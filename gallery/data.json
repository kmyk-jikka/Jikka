{"examples": [{"path": "examples/abc200_b.py", "python": "# https://atcoder.jp/contests/abc200/tasks/abc200_b\n\nfrom typing import *\n\ndef solve(n: int, k: int) -> int:\n    for _ in range(k):\n        if n % 200 == 0:\n            n //= 200\n        else:\n            n = n*1000 + 200\n    return n\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    ans = solve(n, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, k: int) -> int:\n    for _ in range(k):\n        if n % 200 == 0:\n            n //= 200\n        else:\n            n: $1 = n * 1000 + 200\n    return n\ndef main() -> None:\n    n, k: $2 = map(int, input().split())\n    ans: $3 = solve(n, k)\n    print(ans)\n", "core": "fun (n$417: int) (k$418: int) ->\n    iterate k$418 (fun ($419: int) ->\n        if $419 % 200 == 0 then $419 / 200 else $419 * 1000 + 200\n    ) n$417\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_420, int64_t k_421) {\n  for (int32_t i423 = 0; i423 < int32_t(k_421); ++i423) {\n    n_420 = jikka::floormod(n_420, 200ll) == 0ll ? jikka::floordiv(n_420, 200ll)\n                                                 : n_420 * 1000ll + 200ll;\n  }\n  return n_420;\n}\nint main() {\n  int64_t n_425 = -1ll;\n  int64_t k_426 = -1ll;\n  std::cin >> n_425;\n  std::cin >> k_426;\n  auto ans_427 = solve(n_425, k_426);\n  std::cout << ans_427 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc203_b.py", "python": "# https://atcoder.jp/contests/abc203/tasks/abc203_b\n\n# from typing import *\n\ndef solve(n: int, k: int) -> int:\n    a = []\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            a.append(100*i + j)   \n    ans = sum(a)\n    return ans\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    ans = solve(n, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, k: int) -> int:\n    a: $0 = []\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            a.append(100 * i + j)\n    ans: $2 = sum(a)\n    return ans\ndef main() -> None:\n    n, k: $3 = map(int, input().split())\n    ans: $4 = solve(n, k)\n    print(ans)\n", "core": "fun (n$890: int) (k$891: int) ->\n    sum (foldl (fun ($892: int list) ($893: int) ->\n        foldl (fun ($894: int list) ($895: int) ->\n            snoc $894 ($893 * 100 + $895 + 101)\n        ) $892 (range k$891)\n    ) nil (range n$890))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_896, int64_t k_897) {\n  std::vector<int64_t> x898;\n  for (int32_t x899 = 0; x899 < n_896; ++x899) {\n    for (int32_t x903 = 0; x903 < k_897; ++x903) {\n      x898.push_back(x899 * 100ll + x903 + 101ll);\n    }\n  }\n  int64_t x907 = std::accumulate(x898.begin(), x898.end(), 0ll);\n  return x907;\n}\nint main() {\n  int64_t n_908 = -1ll;\n  int64_t k_909 = -1ll;\n  std::cin >> n_908;\n  std::cin >> k_909;\n  auto ans_910 = solve(n_908, k_909);\n  std::cout << ans_910 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc204_b.py", "python": "# https://atcoder.jp/contests/abc204/tasks/abc204_b\n\nfrom typing import *\n\ndef solve(n: int, a: List[int]) -> int:\n    ans = 0\n    for e in a:\n        if e > 10:\n            ans += e - 10\n    return ans\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(n, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, a: List[int]) -> int:\n    ans: $0 = 0\n    for e in a:\n        if e > 10:\n            ans += e - 10\n    return ans\ndef main() -> None:\n    n: $2 = int(input())\n    a: $3 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $5 = solve(n, a)\n    print(ans)\n", "core": "const (fun (a$524: int list) ->\n    foldl (fun ($525: int) ($526: int) ->\n        if - $526 + 10 < 0 then $525 + $526 - 10 else $525\n    ) 0 a$524\n)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_527, std::vector<int64_t> a_528) {\n  int64_t x529 = 0ll;\n  for (int64_t x530 : a_528) {\n    x529 = -x530 + 10ll < 0ll ? x529 + x530 - 10ll : x529;\n  }\n  return x529;\n}\nint main() {\n  int64_t n_533 = -1ll;\n  std::cin >> n_533;\n  std::vector<int64_t> a_534(n_533, -1ll);\n  for (int32_t i535 = 0; i535 < n_533; ++i535) {\n    std::cin >> a_534[i535];\n  }\n  auto ans_536 = solve(n_533, a_534);\n  std::cout << ans_536 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc206_b.py", "python": "# https://atcoder.jp/contests/abc206/tasks/abc206_b\n\n# from typing import *\n\ndef solve(n: int) -> int:\n    c = 0\n    ans = 0\n    flag = True\n    for i in range(100000): # (10^5)^2 > 10^9\n        c += i\n        if c >= n and flag:\n            ans = i\n            flag = False\n    return ans\n\ndef main() -> None:\n    n = int(input())\n    ans = solve(n)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int) -> int:\n    c: $0 = 0\n    ans: $1 = 0\n    flag: $2 = True\n    for i in range(100000):\n        c += i\n        if c >= n and flag:\n            ans: $4 = i\n            flag: $5 = False\n    return ans\ndef main() -> None:\n    n: $6 = int(input())\n    ans: $7 = solve(n)\n    print(ans)\n", "core": "fun (n$500: int) ->\n    (foldl (fun ($501: bool * int * int) ($502: int) ->\n        ((if - $502 + n$500 - $501.2 <= 0 && $501.0 then false else $501.0), (if - $502 + n$500 - $501.2 <= 0 && $501.0 then $502 else $501.1), $502 + $501.2)\n    ) (true, 0, 0) (range 100000)).1\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_503) {\n  bool x_508 = true;\n  int64_t x_509 = 0ll;\n  int64_t x_510 = 0ll;\n  for (int32_t x505 = 0; x505 < 100000ll; ++x505) {\n    bool x511 = -x505 + n_503 - x_510 <= 0ll and x_508 ? false : x_508;\n    int64_t x512 = -x505 + n_503 - x_510 <= 0ll and x_508 ? x505 : x_509;\n    int64_t x513 = x505 + x_510;\n    x_508 = x511;\n    x_509 = x512;\n    x_510 = x513;\n  }\n  return x_509;\n}\nint main() {\n  int64_t n_514 = -1ll;\n  std::cin >> n_514;\n  auto ans_515 = solve(n_514);\n  std::cout << ans_515 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc207_b.py", "python": "# https://atcoder.jp/contests/abc207/tasks/abc207_b\n\n# from typing import *\n\ndef solve(a: int, b: int, c: int, d: int) -> int:\n    ans = -1\n    if d*c - b > 0:\n        ans = (a + d*c - b - 1) // (d*c - b) # ans = a /^ (d*c - b)\n    return ans\n\ndef main() -> None:\n    a, b, c, d = map(int, input().split())\n    ans = solve(a, b, c, d)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(a: int, b: int, c: int, d: int) -> int:\n    ans: $0 = - 1\n    if d * c - b > 0:\n        ans: $2 = a + d * c - b - 1 // d * c - b\n    return ans\ndef main() -> None:\n    a, b, c, d: $3 = map(int, input().split())\n    ans: $4 = solve(a, b, c, d)\n    print(ans)\n", "core": "fun (a$522: int) (b$523: int) (c$524: int) (d$525: int) ->\n    if b$523 - c$524 * d$525 < 0 then (a$522 - b$523 + c$524 * d$525 - 1) / (- b$523 + c$524 * d$525) else -1\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_526, int64_t b_527, int64_t c_528, int64_t d_529) {\n  return b_527 - c_528 * d_529 < 0ll\n             ? jikka::floordiv(a_526 - b_527 + c_528 * d_529 - 1ll,\n                               -b_527 + c_528 * d_529)\n             : -1ll;\n}\nint main() {\n  int64_t a_530 = -1ll;\n  int64_t b_531 = -1ll;\n  int64_t c_532 = -1ll;\n  int64_t d_533 = -1ll;\n  std::cin >> a_530;\n  std::cin >> b_531;\n  std::cin >> c_532;\n  std::cin >> d_533;\n  auto ans_534 = solve(a_530, b_531, c_532, d_533);\n  std::cout << ans_534 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc208_b.py", "python": "# https://atcoder.jp/contests/abc208/tasks/abc208_b\n\n# from typing import *\n\ndef solve(p: int) -> int:\n    e = 1\n    cs = []\n    ans = 0\n    for i in range(10):\n        e *= i+1\n        cs.append(e)\n    for c in reversed(cs):\n        ans += p//c\n        p -= p//c * c\n    return ans\n\ndef main() -> None:\n    p = int(input())\n    ans = solve(p)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(p: int) -> int:\n    e: $0 = 1\n    cs: $1 = []\n    ans: $3 = 0\n    for i in range(10):\n        e *= i + 1\n        cs.append(e)\n    for c in reversed(cs):\n        ans += p // c\n        p -= p // c * c\n    return ans\ndef main() -> None:\n    p: $4 = int(input())\n    ans: $5 = solve(p)\n    print(ans)\n", "core": "fun (p$757: int) ->\n    (foldl (fun ($758: int * int) ($759: int) ->\n        (- ($759 * ($758.0 / $759)) + $758.0, $758.1 + $758.0 / $759)\n    ) (p$757, 0) (reverse (foldl (fun ($760: int list * int) ($761: int) ->\n        (snoc $760.0 ($761 * $760.1 + $760.1), $761 * $760.1 + $760.1)\n    ) (nil, 1) (range 10)).0)).1\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t p_762) {\n  std::vector<int64_t> x_773;\n  int64_t x_774 = 1ll;\n  for (int32_t x764 = 0; x764 < 10ll; ++x764) {\n    x_773.push_back(x764 * x_774 + x_774);\n    int64_t x776 = x764 * x_774 + x_774;\n    x_774 = x776;\n  }\n  std::reverse(x_773.begin(), x_773.end());\n  int64_t x_778 = 0ll;\n  for (int64_t x770 : x_773) {\n    int64_t x779 = -(x770 * jikka::floordiv(p_762, x770)) + p_762;\n    int64_t x780 = x_778 + jikka::floordiv(p_762, x770);\n    p_762 = x779;\n    x_778 = x780;\n  }\n  return x_778;\n}\nint main() {\n  int64_t p_781 = -1ll;\n  std::cin >> p_781;\n  auto ans_782 = solve(p_781);\n  std::cout << ans_782 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_a.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_a\nfrom typing import *\n\ndef solve(n: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 4 for h_i in h)\n\n    dp = [-1 for _ in range(n)]\n    dp[0] = 0\n    dp[1] = abs(h[1] - h[0])\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2]))\n    return dp[n - 1]\n\ndef main() -> None:\n    n = int(input())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 4 for h_i in h)\n    dp: $5 = [- 1 for _ in range(n)]\n    dp[0]: $6 = 0\n    dp[1]: $7 = abs(h[1] - h[0])\n    for i in range(2, n):\n        dp[i]: $8 = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2]))\n    return dp[n - 1]\ndef main() -> None:\n    n: $9 = int(input())\n    h: $10 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $12 = solve(n, h)\n    print(ans)\n", "core": "fun (n$919: int) (h$920: int list) ->\n    assert - n$919 + 2 <= 0 && n$919 - 100000 <= 0 in\n    assert - n$919 + len h$920 == 0 in\n    assert all (map (fun ($921: int) ->\n        - $921 + 1 <= 0 && $921 - 10000 <= 0\n    ) h$920) in\n    if n$919 - 1 == 0 then 0 else (scanl (fun ($922: int * int) ($923: int) ->\n        ($922.1, min (abs (- h$920[$923 + 1] + h$920[$923 + 2]) + $922.1) (abs (- h$920[$923] + h$920[$923 + 2]) + $922.0))\n    ) (0, abs (- h$920[0] + h$920[1])) (range (n$919 - 2)))[n$919 - 2].1\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_924, std::vector<int64_t> h_925) {\n  assert(-n_924 + 2ll <= 0ll and n_924 - 100000ll <= 0ll);\n  assert(-n_924 + int64_t(h_925.size()) == 0ll);\n  for (int64_t x926 : h_925) {\n    assert(-x926 + 1ll <= 0ll and x926 - 10000ll <= 0ll);\n  }\n  int64_t x932;\n  if (n_924 - 1ll == 0ll) {\n    x932 = 0ll;\n  } else {\n    std::vector<std::array<int64_t, 2>> x928(n_924 - 2ll + 1);\n    x928[0] = std::array<int64_t, 2>{0ll, std::abs(-h_925[0ll] + h_925[1ll])};\n    for (int32_t i929 = 0; i929 < int32_t(n_924 - 2ll); ++i929) {\n      x928[i929 + 1] = std::array<int64_t, 2>{\n          x928[i929][1],\n          std::min<int64_t>(\n              std::abs(-h_925[i929 + 1ll] + h_925[i929 + 2ll]) + x928[i929][1],\n              std::abs(-h_925[i929] + h_925[i929 + 2ll]) + x928[i929][0])};\n    }\n    x932 = x928[n_924 - 2ll][1];\n  }\n  return x932;\n}\nint main() {\n  int64_t n_933 = -1ll;\n  std::cin >> n_933;\n  std::vector<int64_t> h_934(n_933, -1ll);\n  for (int32_t i935 = 0; i935 < n_933; ++i935) {\n    std::cin >> h_934[i935];\n  }\n  auto ans_936 = solve(n_933, h_934);\n  std::cout << ans_936 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_b.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_b\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, k: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert 1 <= k <= 100\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 4 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(max(0, i - k), i):\n            dp[i] = min(dp[i], dp[j] + abs(h[i] - h[j]))\n    return dp[n - 1]\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, k, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, k: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 10 ** 5\n    assert 1 <= k and k <= 100\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 4 for h_i in h)\n    dp: $8 = [INF for _ in range(n)]\n    dp[0]: $9 = 0\n    for i in range(1, n):\n        for j in range(max(0, i - k), i):\n            dp[i]: $10 = min(dp[i], dp[j] + abs(h[i] - h[j]))\n    return dp[n - 1]\ndef main() -> None:\n    n, k: $11 = map(int, input().split())\n    h: $12 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $14 = solve(n, k, h)\n    print(ans)\n", "core": "fun (n$1378: int) (k$1379: int) (h$1380: int list) ->\n    assert - n$1378 + 2 <= 0 && n$1378 - 100000 <= 0 in\n    assert - k$1379 + 1 <= 0 && k$1379 - 100 <= 0 in\n    assert - n$1378 + len h$1380 == 0 in\n    assert all (map (fun ($1381: int) ->\n        - $1381 + 1 <= 0 && $1381 - 10000 <= 0\n    ) h$1380) in\n    (foldl (fun ($1382: int list) ($1383: int) ->\n        foldl (fun ($1384: int list) ($1385: int) ->\n            $1384[$1383 + 1 <- min $1384[$1383 + 1] (abs (h$1380[$1383 + 1] - h$1380[$1385 + max 0 ($1383 - k$1379 + 1)]) + $1384[$1385 + max 0 ($1383 - k$1379 + 1)])]\n        ) $1382 (range ($1383 - max 0 ($1383 - k$1379 + 1) + 1))\n    ) (replicate n$1378 1000000000000000000)[0 <- 0] (range (n$1378 - 1)))[n$1378 - 1]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_1387, int64_t k_1388, std::vector<int64_t> h_1389) {\n  assert(-n_1387 + 2ll <= 0ll and n_1387 - 100000ll <= 0ll);\n  assert(-k_1388 + 1ll <= 0ll and k_1388 - 100ll <= 0ll);\n  assert(-n_1387 + int64_t(h_1389.size()) == 0ll);\n  for (int64_t x1390 : h_1389) {\n    assert(-x1390 + 1ll <= 0ll and x1390 - 10000ll <= 0ll);\n  }\n  std::vector<int64_t> x1392(n_1387, 1000000000000000000ll);\n  x1392[0ll] = 0ll;\n  for (int32_t x1394 = 0; x1394 < n_1387 - 1ll; ++x1394) {\n    for (int32_t x1398 = 0;\n         x1398 < x1394 - std::max<int64_t>(0ll, x1394 - k_1388 + 1ll) + 1ll;\n         ++x1398) {\n      x1392[x1394 + 1ll] = std::min<int64_t>(\n          x1392[x1394 + 1ll],\n          std::abs(\n              h_1389[x1394 + 1ll] -\n              h_1389[x1398 + std::max<int64_t>(0ll, x1394 - k_1388 + 1ll)]) +\n              x1392[x1398 + std::max<int64_t>(0ll, x1394 - k_1388 + 1ll)]);\n    }\n  }\n  return x1392[n_1387 - 1ll];\n}\nint main() {\n  int64_t n_1401 = -1ll;\n  int64_t k_1402 = -1ll;\n  std::cin >> n_1401;\n  std::vector<int64_t> h_1403(n_1401, -1ll);\n  std::cin >> k_1402;\n  for (int32_t i1404 = 0; i1404 < n_1401; ++i1404) {\n    std::cin >> h_1403[i1404];\n  }\n  auto ans_1405 = solve(n_1401, k_1402, h_1403);\n  std::cout << ans_1405 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_c.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_c\nfrom typing import *\n\ndef solve(n: int, a: List[int], b: List[int], c: List[int]) -> int:\n    assert 1 <= n <= 10 ** 5\n    assert len(a) == n\n    assert len(b) == n\n    assert len(c) == n\n    assert all(1 <= a_i <= 10 ** 4 for a_i in a)\n    assert all(1 <= b_i <= 10 ** 4 for b_i in b)\n    assert all(1 <= c_i <= 10 ** 4 for c_i in c)\n\n    dp_a = [-1 for _ in range(n + 1)]\n    dp_b = [-1 for _ in range(n + 1)]\n    dp_c = [-1 for _ in range(n + 1)]\n    dp_a[0] = 0\n    dp_b[0] = 0\n    dp_c[0] = 0\n    for i in range(n):\n        dp_a[i + 1] = a[i] + max(dp_b[i], dp_c[i])\n        dp_b[i + 1] = b[i] + max(dp_c[i], dp_a[i])\n        dp_c[i + 1] = c[i] + max(dp_a[i], dp_b[i])\n    return max([dp_a[n], dp_b[n], dp_c[n]])\n\ndef main() -> None:\n    n = int(input())\n    a = list(range(n))\n    b = list(range(n))\n    c = list(range(n))\n    for i in range(n):\n        a[i], b[i], c[i] = map(int, input().split())\n    ans = solve(n, a, b, c)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, a: List[int], b: List[int], c: List[int]) -> int:\n    assert 1 <= n and n <= 10 ** 5\n    assert len(a) == n\n    assert len(b) == n\n    assert len(c) == n\n    assert all(1 <= a_i and a_i <= 10 ** 4 for a_i in a)\n    assert all(1 <= b_i and b_i <= 10 ** 4 for b_i in b)\n    assert all(1 <= c_i and c_i <= 10 ** 4 for c_i in c)\n    dp_a: $11 = [- 1 for _ in range(n + 1)]\n    dp_b: $12 = [- 1 for _ in range(n + 1)]\n    dp_c: $13 = [- 1 for _ in range(n + 1)]\n    dp_a[0]: $14 = 0\n    dp_b[0]: $15 = 0\n    dp_c[0]: $16 = 0\n    for i in range(n):\n        dp_a[i + 1]: $17 = a[i] + max(dp_b[i], dp_c[i])\n        dp_b[i + 1]: $18 = b[i] + max(dp_c[i], dp_a[i])\n        dp_c[i + 1]: $19 = c[i] + max(dp_a[i], dp_b[i])\n    return max([dp_a[n], dp_b[n], dp_c[n]])\ndef main() -> None:\n    n: $21 = int(input())\n    a: $22 = list(range(n))\n    b: $23 = list(range(n))\n    c: $24 = list(range(n))\n    for i in range(n):\n        a[i], b[i], c[i]: $25 = map(int, input().split())\n    ans: $26 = solve(n, a, b, c)\n    print(ans)\n", "core": "fun (n$2120: int) (a$2121: int list) (b$2122: int list) (c$2123: int list) ->\n    assert - n$2120 + 1 <= 0 && n$2120 - 100000 <= 0 in\n    assert - n$2120 + len a$2121 == 0 in\n    assert - n$2120 + len b$2122 == 0 in\n    assert - n$2120 + len c$2123 == 0 in\n    assert all (map (fun ($2124: int) ->\n        - $2124 + 1 <= 0 && $2124 - 10000 <= 0\n    ) a$2121) in\n    assert all (map (fun ($2125: int) ->\n        - $2125 + 1 <= 0 && $2125 - 10000 <= 0\n    ) b$2122) in\n    assert all (map (fun ($2126: int) ->\n        - $2126 + 1 <= 0 && $2126 - 10000 <= 0\n    ) c$2123) in\n    let $2134: int list * int list * int list = foldl (fun ($2127: int list * int list * int list) ($2128: int) ->\n        let dp_a$2129: int list = $2127.2[$2128 + 1 <- max $2127.1[$2128] $2127.0[$2128] + a$2121[$2128]]\n        in let dp_b$2130: int list = $2127.1[$2128 + 1 <- max $2127.0[$2128] dp_a$2129[$2128] + b$2122[$2128]]\n        in ($2127.0[$2128 + 1 <- max dp_a$2129[$2128] dp_b$2130[$2128] + c$2123[$2128]], dp_b$2130, dp_a$2129)\n    ) ((replicate (n$2120 + 1) -1)[0 <- 0], (replicate (n$2120 + 1) -1)[0 <- 0], (replicate (n$2120 + 1) -1)[0 <- 0]) (range n$2120)\n    in max $2134.2[n$2120] (max $2134.1[n$2120] (maximum (cons $2134.0[n$2120] nil)))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_2135, std::vector<int64_t> a_2136,\n              std::vector<int64_t> b_2137, std::vector<int64_t> c_2138) {\n  assert(-n_2135 + 1ll <= 0ll and n_2135 - 100000ll <= 0ll);\n  assert(-n_2135 + int64_t(a_2136.size()) == 0ll);\n  assert(-n_2135 + int64_t(b_2137.size()) == 0ll);\n  assert(-n_2135 + int64_t(c_2138.size()) == 0ll);\n  for (int64_t x2139 : a_2136) {\n    assert(-x2139 + 1ll <= 0ll and x2139 - 10000ll <= 0ll);\n  }\n  for (int64_t x2141 : b_2137) {\n    assert(-x2141 + 1ll <= 0ll and x2141 - 10000ll <= 0ll);\n  }\n  for (int64_t x2143 : c_2138) {\n    assert(-x2143 + 1ll <= 0ll and x2143 - 10000ll <= 0ll);\n  }\n  std::vector<int64_t> x2146(n_2135 + 1ll, -1ll);\n  std::vector<int64_t> x2147(n_2135 + 1ll, -1ll);\n  std::vector<int64_t> x2148(n_2135 + 1ll, -1ll);\n  x2146[0ll] = 0ll;\n  x2147[0ll] = 0ll;\n  x2148[0ll] = 0ll;\n  for (int32_t x2150 = 0; x2150 < n_2135; ++x2150) {\n    x2148[x2150 + 1ll] =\n        std::max<int64_t>(x2147[x2150], x2146[x2150]) + a_2136[x2150];\n    x2147[x2150 + 1ll] =\n        std::max<int64_t>(x2146[x2150], x2148[x2150]) + b_2137[x2150];\n    x2146[x2150 + 1ll] =\n        std::max<int64_t>(x2148[x2150], x2147[x2150]) + c_2138[x2150];\n  }\n  std::vector<int64_t> x2155;\n  x2155.push_back(x2146[n_2135]);\n  x2155.insert(x2155.end(), std::vector<int64_t>().begin(),\n               std::vector<int64_t>().end());\n  int64_t x2156 = *std::max_element(x2155.begin(), x2155.end());\n  return std::max<int64_t>(x2148[n_2135],\n                           std::max<int64_t>(x2147[n_2135], x2156));\n}\nint main() {\n  int64_t n_2166 = -1ll;\n  std::cin >> n_2166;\n  std::vector<int64_t> a_2167(n_2166, -1ll);\n  std::vector<int64_t> b_2168(n_2166, -1ll);\n  std::vector<int64_t> c_2169(n_2166, -1ll);\n  for (int32_t i_2170 = 0; i_2170 < n_2166; ++i_2170) {\n    std::cin >> a_2167[i_2170];\n    std::cin >> b_2168[i_2170];\n    std::cin >> c_2169[i_2170];\n  }\n  auto ans_2171 = solve(n_2166, a_2167, b_2168, c_2169);\n  std::cout << ans_2171 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_min_mult.py", "python": "# https://judge.kimiyuki.net/problem/dp-min-mult\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, a: List[int], b: List[int]) -> int:\n    n = len(a)\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + a[j] * b[i])\n    return dp[n - 1]\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == n\n    ans = solve(n, a, b)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, a: List[int], b: List[int]) -> int:\n    n: $1 = len(a)\n    dp: $2 = [INF for _ in range(n)]\n    dp[0]: $3 = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i]: $4 = min(dp[i], dp[j] + a[j] * b[i])\n    return dp[n - 1]\ndef main() -> None:\n    n: $5 = int(input())\n    a: $6 = list(map(int, input().split()))\n    assert len(a) == n\n    b: $8 = list(map(int, input().split()))\n    assert len(b) == n\n    ans: $10 = solve(n, a, b)\n    print(ans)\n", "core": "const (fun (a$1220: int list) (b$1221: int list) ->\n    (foldl (fun ($1222: convex_hull_trick * int list) ($1223: int) ->\n        let $1224: int list = snoc $1222.1 (cht_getmin $1222.0 b$1221[$1223 + 1])\n        in (cht_insert $1222.0 a$1220[$1223 + 1] $1224[$1223 + 1], $1224)\n    ) (let $1225: int list = snoc nil 0\n    in (foldl (fun ($1226: convex_hull_trick) ($1227: int) ->\n        cht_insert $1226 a$1220[$1227] $1225[$1227]\n    ) cht_init (range 1), $1225)) (range (len a$1220 - 1))).1[len a$1220 - 1]\n)\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_1228, std::vector<int64_t> a_1229,\n              std::vector<int64_t> b_1230) {\n  std::vector<int64_t> x1232;\n  x1232.push_back(0ll);\n  jikka::convex_hull_trick x1233;\n  for (int32_t x1234 = 0; x1234 < 1ll; ++x1234) {\n    x1233.add_line(a_1229[x1234], x1232[x1234]);\n  }\n  for (int32_t x1238 = 0; x1238 < int64_t(a_1229.size()) - 1ll; ++x1238) {\n    x1232.push_back(x1233.get_min(b_1230[x1238 + 1ll]));\n    x1233.add_line(a_1229[x1238 + 1ll], x1232[x1238 + 1ll]);\n  }\n  return x1232[int64_t(a_1229.size()) - 1ll];\n}\nint main() {\n  int64_t n_1247 = -1ll;\n  std::cin >> n_1247;\n  std::vector<int64_t> a_1248(n_1247, -1ll);\n  std::vector<int64_t> b_1249(n_1247, -1ll);\n  for (int32_t i1250 = 0; i1250 < n_1247; ++i1250) {\n    std::cin >> a_1248[i1250];\n  }\n  for (int32_t i1251 = 0; i1251 < n_1247; ++i1251) {\n    std::cin >> b_1249[i1251];\n  }\n  auto ans_1252 = solve(n_1247, a_1248, b_1249);\n  std::cout << ans_1252 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_min_square_kubaru.py", "python": "# https://judge.kimiyuki.net/problem/dp-min-square\n\nINF = 10 ** 18\n\ndef solve(a: List[int]) -> int:\n    n = len(a)\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for j in range(n):\n        for i in range(j + 1, n):\n            dp[i] = min(dp[i], dp[j] + (a[i] - a[j]) ** 2)\n    return dp[n - 1]\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(a: List[int]) -> int:\n    n: $1 = len(a)\n    dp: $2 = [INF for _ in range(n)]\n    dp[0]: $3 = 0\n    for j in range(n):\n        for i in range(j + 1, n):\n            dp[i]: $4 = min(dp[i], dp[j] + a[i] - a[j] ** 2)\n    return dp[n - 1]\n", "core": "fun (a$1015: int list) ->\n    (foldl (fun ($1016: convex_hull_trick * int list) ($1017: int) ->\n        let $1018: int list = snoc $1016.1 (min (- (a$1015[$1017 + 1] * a$1015[$1017 + 1]) + (if $1017 + 1 == 0 then 0 else 1000000000000000000)) (cht_getmin $1016.0 (a$1015[$1017 + 1] * -2)) + a$1015[$1017 + 1] * a$1015[$1017 + 1])\n        in (cht_insert $1016.0 a$1015[$1017 + 1] ($1018[$1017 + 1] + a$1015[$1017 + 1] * a$1015[$1017 + 1]), $1018)\n    ) (let $1019: int list = snoc nil 0\n    in (foldl (fun ($1020: convex_hull_trick) ($1021: int) ->\n        cht_insert $1020 a$1015[$1021] ($1019[$1021] + a$1015[$1021] * a$1015[$1021])\n    ) cht_init (range 1), $1019)) (range (len a$1015 - 1))).1[len a$1015 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_1022) {\n  std::vector<int64_t> x1024;\n  x1024.push_back(0ll);\n  jikka::convex_hull_trick x1025;\n  for (int32_t x1026 = 0; x1026 < 1ll; ++x1026) {\n    x1025.add_line(a_1022[x1026], x1024[x1026] + a_1022[x1026] * a_1022[x1026]);\n  }\n  for (int32_t x1030 = 0; x1030 < int64_t(a_1022.size()) - 1ll; ++x1030) {\n    x1024.push_back(std::min<int64_t>(\n                        -(a_1022[x1030 + 1ll] * a_1022[x1030 + 1ll]) +\n                            (x1030 + 1ll == 0ll ? 0ll : 1000000000000000000ll),\n                        x1025.get_min(a_1022[x1030 + 1ll] * -2ll)) +\n                    a_1022[x1030 + 1ll] * a_1022[x1030 + 1ll]);\n    x1025.add_line(a_1022[x1030 + 1ll],\n                   x1024[x1030 + 1ll] +\n                       a_1022[x1030 + 1ll] * a_1022[x1030 + 1ll]);\n  }\n  return x1024[int64_t(a_1022.size()) - 1ll];\n}\nint main() {\n  int64_t x1039 = -1ll;\n  std::cin >> x1039;\n  std::vector<int64_t> x1040(x1039, -1ll);\n  for (int32_t i1041 = 0; i1041 < x1039; ++i1041) {\n    std::cin >> x1040[i1041];\n  }\n  auto x1042 = solve(x1040);\n  std::cout << x1042 << ' ';\n}\n"}, {"path": "examples/dp_min_square_morau.py", "python": "# https://judge.kimiyuki.net/problem/dp-min-square\n\nINF = 10 ** 18\n\ndef solve(a: List[int]) -> int:\n    n = len(a)\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + (a[i] - a[j]) ** 2)\n    return dp[n - 1]\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(a: List[int]) -> int:\n    n: $1 = len(a)\n    dp: $2 = [INF for _ in range(n)]\n    dp[0]: $3 = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i]: $4 = min(dp[i], dp[j] + a[i] - a[j] ** 2)\n    return dp[n - 1]\n", "core": "fun (a$985: int list) ->\n    (foldl (fun ($986: convex_hull_trick * int list) ($987: int) ->\n        let $988: int list = snoc $986.1 (a$985[$987 + 1] * a$985[$987 + 1] + cht_getmin $986.0 (a$985[$987 + 1] * -2))\n        in (cht_insert $986.0 a$985[$987 + 1] ($988[$987 + 1] + a$985[$987 + 1] * a$985[$987 + 1]), $988)\n    ) (let $989: int list = snoc nil 0\n    in (foldl (fun ($990: convex_hull_trick) ($991: int) ->\n        cht_insert $990 a$985[$991] ($989[$991] + a$985[$991] * a$985[$991])\n    ) cht_init (range 1), $989)) (range (len a$985 - 1))).1[len a$985 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_992) {\n  std::vector<int64_t> x994;\n  x994.push_back(0ll);\n  jikka::convex_hull_trick x995;\n  for (int32_t x996 = 0; x996 < 1ll; ++x996) {\n    x995.add_line(a_992[x996], x994[x996] + a_992[x996] * a_992[x996]);\n  }\n  for (int32_t x1000 = 0; x1000 < int64_t(a_992.size()) - 1ll; ++x1000) {\n    x994.push_back(a_992[x1000 + 1ll] * a_992[x1000 + 1ll] +\n                   x995.get_min(a_992[x1000 + 1ll] * -2ll));\n    x995.add_line(a_992[x1000 + 1ll],\n                  x994[x1000 + 1ll] + a_992[x1000 + 1ll] * a_992[x1000 + 1ll]);\n  }\n  return x994[int64_t(a_992.size()) - 1ll];\n}\nint main() {\n  int64_t x1009 = -1ll;\n  std::cin >> x1009;\n  std::vector<int64_t> x1010(x1009, -1ll);\n  for (int32_t i1011 = 0; i1011 < x1009; ++i1011) {\n    std::cin >> x1010[i1011];\n  }\n  auto x1012 = solve(x1010);\n  std::cout << x1012 << ' ';\n}\n"}, {"path": "examples/dp_q.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_q\nfrom typing import *\n\ndef solve(n: int, h: List[int], a: List[int]) -> int:\n    assert 1 <= n <= 2 * 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i <= n for h_i in h)\n    assert len(a) == n\n    assert all(1 <= a_i <= 10 ** 9 for a_i in a)\n\n    dp = [0 for _ in range(n)]\n    for i in range(n):\n        b = 0\n        for j in range(h[i]):\n            b = max(b, dp[j])\n        dp[h[i] - 1] = b + a[i]\n    return max(dp)\n\ndef main() -> None:\n    n = int(input())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(n, h, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, h: List[int], a: List[int]) -> int:\n    assert 1 <= n and n <= 2 * 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= n for h_i in h)\n    assert len(a) == n\n    assert all(1 <= a_i and a_i <= 10 ** 9 for a_i in a)\n    dp: $8 = [0 for _ in range(n)]\n    for i in range(n):\n        b: $9 = 0\n        for j in range(h[i]):\n            b: $10 = max(b, dp[j])\n        dp[h[i] - 1]: $11 = b + a[i]\n    return max(dp)\ndef main() -> None:\n    n: $12 = int(input())\n    h: $13 = list(map(int, input().split()))\n    assert len(h) == n\n    a: $15 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $17 = solve(n, h, a)\n    print(ans)\n", "core": "fun (n$1369: int) (h$1370: int list) (a$1371: int list) ->\n    assert - n$1369 + 1 <= 0 && n$1369 - 200000 <= 0 in\n    assert - n$1369 + len h$1370 == 0 in\n    assert all (map (fun ($1372: int) ->\n        - $1372 + 1 <= 0 && $1372 - n$1369 <= 0\n    ) h$1370) in\n    assert - n$1369 + len a$1371 == 0 in\n    assert all (map (fun ($1373: int) ->\n        - $1373 + 1 <= 0 && $1373 - 1000000000 <= 0\n    ) a$1371) in\n    maximum (let $1375: int list = replicate n$1369 0\n    in (foldl (fun ($1376: int list * segment_tree<int_max>) ($1377: int) ->\n        let $1378: int = max 0 (segtree_getrange $1376.1 0 h$1370[$1377]) + a$1371[$1377]\n        in ($1376.0[h$1370[$1377] - 1 <- $1378], segtree_setpoint $1376.1 (h$1370[$1377] - 1) $1378)\n    ) ($1375, segtree_initlist $1375) (range n$1369)).0)\n", "cxx": "#include \"jikka/segment_tree.hpp\"\n#include <algorithm>\n#include <array>\n#include <atcoder/segtree>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_1379, std::vector<int64_t> h_1380,\n              std::vector<int64_t> a_1381) {\n  assert(-n_1379 + 1ll <= 0ll and n_1379 - 200000ll <= 0ll);\n  assert(-n_1379 + int64_t(h_1380.size()) == 0ll);\n  for (int64_t x1382 : h_1380) {\n    assert(-x1382 + 1ll <= 0ll and x1382 - n_1379 <= 0ll);\n  }\n  assert(-n_1379 + int64_t(a_1381.size()) == 0ll);\n  for (int64_t x1384 : a_1381) {\n    assert(-x1384 + 1ll <= 0ll and x1384 - 1000000000ll <= 0ll);\n  }\n  std::vector<int64_t> x1387(n_1379, 0ll);\n  std::vector<int64_t> x_1394 = x1387;\n  atcoder::segtree<int64_t, jikka::max_int64_t, jikka::const_int64_min> x_1395(\n      x1387);\n  for (int32_t x1389 = 0; x1389 < n_1379; ++x1389) {\n    int64_t x1392 =\n        std::max<int64_t>(0ll, x_1395.prod(0ll, h_1380[x1389])) + a_1381[x1389];\n    x_1394[h_1380[x1389] - 1ll] = x1392;\n    x_1395.set(h_1380[x1389] - 1ll, x1392);\n  }\n  int64_t x1393 = *std::max_element(x_1394.begin(), x_1394.end());\n  return x1393;\n}\nint main() {\n  int64_t n_1398 = -1ll;\n  std::cin >> n_1398;\n  std::vector<int64_t> h_1399(n_1398, -1ll);\n  std::vector<int64_t> a_1400(n_1398, -1ll);\n  for (int32_t i1401 = 0; i1401 < n_1398; ++i1401) {\n    std::cin >> h_1399[i1401];\n  }\n  for (int32_t i1402 = 0; i1402 < n_1398; ++i1402) {\n    std::cin >> a_1400[i1402];\n  }\n  auto ans_1403 = solve(n_1398, h_1399, a_1400);\n  std::cout << ans_1403 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_z-kubaru.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_z\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n <= 2 * 10 ** 5\n    assert 1 <= c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 6 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = min(dp[j], dp[i] + (h[i] - h[j]) ** 2 + c)\n    return dp[n - 1]\n\ndef main() -> None:\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, c, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 2 * 10 ** 5\n    assert 1 <= c and c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 6 for h_i in h)\n    dp: $8 = [INF for _ in range(n)]\n    dp[0]: $9 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j]: $10 = min(dp[j], dp[i] + h[i] - h[j] ** 2 + c)\n    return dp[n - 1]\ndef main() -> None:\n    n, c: $11 = map(int, input().split())\n    h: $12 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $14 = solve(n, c, h)\n    print(ans)\n", "core": "fun (n$1412: int) (c$1413: int) (h$1414: int list) ->\n    assert - n$1412 + 2 <= 0 && n$1412 - 200000 <= 0 in\n    assert - c$1413 + 1 <= 0 && c$1413 - 1000000000000 <= 0 in\n    assert - n$1412 + len h$1414 == 0 in\n    assert all (map (fun ($1415: int) ->\n        - $1415 + 1 <= 0 && $1415 - 1000000 <= 0\n    ) h$1414) in\n    (foldl (fun ($1416: convex_hull_trick * int list) ($1417: int) ->\n        let $1418: int list = snoc $1416.1 (c$1413 + min (- c$1413 - h$1414[$1417 + 1] * h$1414[$1417 + 1] + (if $1417 + 1 == 0 then 0 else 1000000000000000000)) (cht_getmin $1416.0 (h$1414[$1417 + 1] * -2)) + h$1414[$1417 + 1] * h$1414[$1417 + 1])\n        in (cht_insert $1416.0 h$1414[$1417 + 1] ($1418[$1417 + 1] + h$1414[$1417 + 1] * h$1414[$1417 + 1]), $1418)\n    ) (let $1419: int list = snoc nil 0\n    in (foldl (fun ($1420: convex_hull_trick) ($1421: int) ->\n        cht_insert $1420 h$1414[$1421] ($1419[$1421] + h$1414[$1421] * h$1414[$1421])\n    ) cht_init (range 1), $1419)) (range (n$1412 - 1))).1[n$1412 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_1422, int64_t c_1423, std::vector<int64_t> h_1424) {\n  assert(-n_1422 + 2ll <= 0ll and n_1422 - 200000ll <= 0ll);\n  assert(-c_1423 + 1ll <= 0ll and c_1423 - 1000000000000ll <= 0ll);\n  assert(-n_1422 + int64_t(h_1424.size()) == 0ll);\n  for (int64_t x1425 : h_1424) {\n    assert(-x1425 + 1ll <= 0ll and x1425 - 1000000ll <= 0ll);\n  }\n  std::vector<int64_t> x1428;\n  x1428.push_back(0ll);\n  jikka::convex_hull_trick x1429;\n  for (int32_t x1430 = 0; x1430 < 1ll; ++x1430) {\n    x1429.add_line(h_1424[x1430], x1428[x1430] + h_1424[x1430] * h_1424[x1430]);\n  }\n  for (int32_t x1434 = 0; x1434 < n_1422 - 1ll; ++x1434) {\n    x1428.push_back(c_1423 +\n                    std::min<int64_t>(\n                        -c_1423 - h_1424[x1434 + 1ll] * h_1424[x1434 + 1ll] +\n                            (x1434 + 1ll == 0ll ? 0ll : 1000000000000000000ll),\n                        x1429.get_min(h_1424[x1434 + 1ll] * -2ll)) +\n                    h_1424[x1434 + 1ll] * h_1424[x1434 + 1ll]);\n    x1429.add_line(h_1424[x1434 + 1ll],\n                   x1428[x1434 + 1ll] +\n                       h_1424[x1434 + 1ll] * h_1424[x1434 + 1ll]);\n  }\n  return x1428[n_1422 - 1ll];\n}\nint main() {\n  int64_t n_1443 = -1ll;\n  int64_t c_1444 = -1ll;\n  std::cin >> n_1443;\n  std::vector<int64_t> h_1445(n_1443, -1ll);\n  std::cin >> c_1444;\n  for (int32_t i1446 = 0; i1446 < n_1443; ++i1446) {\n    std::cin >> h_1445[i1446];\n  }\n  auto ans_1447 = solve(n_1443, c_1444, h_1445);\n  std::cout << ans_1447 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_z-morau.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_z\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n <= 2 * 10 ** 5\n    assert 1 <= c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 6 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + (h[j] - h[i]) ** 2 + c)\n    return dp[n - 1]\n\ndef main() -> None:\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, c, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 2 * 10 ** 5\n    assert 1 <= c and c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 6 for h_i in h)\n    dp: $8 = [INF for _ in range(n)]\n    dp[0]: $9 = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i]: $10 = min(dp[i], dp[j] + h[j] - h[i] ** 2 + c)\n    return dp[n - 1]\ndef main() -> None:\n    n, c: $11 = map(int, input().split())\n    h: $12 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $14 = solve(n, c, h)\n    print(ans)\n", "core": "fun (n$1382: int) (c$1383: int) (h$1384: int list) ->\n    assert - n$1382 + 2 <= 0 && n$1382 - 200000 <= 0 in\n    assert - c$1383 + 1 <= 0 && c$1383 - 1000000000000 <= 0 in\n    assert - n$1382 + len h$1384 == 0 in\n    assert all (map (fun ($1385: int) ->\n        - $1385 + 1 <= 0 && $1385 - 1000000 <= 0\n    ) h$1384) in\n    (foldl (fun ($1386: convex_hull_trick * int list) ($1387: int) ->\n        let $1388: int list = snoc $1386.1 (c$1383 + h$1384[$1387 + 1] * h$1384[$1387 + 1] + cht_getmin $1386.0 (h$1384[$1387 + 1] * -2))\n        in (cht_insert $1386.0 h$1384[$1387 + 1] ($1388[$1387 + 1] + h$1384[$1387 + 1] * h$1384[$1387 + 1]), $1388)\n    ) (let $1389: int list = snoc nil 0\n    in (foldl (fun ($1390: convex_hull_trick) ($1391: int) ->\n        cht_insert $1390 h$1384[$1391] ($1389[$1391] + h$1384[$1391] * h$1384[$1391])\n    ) cht_init (range 1), $1389)) (range (n$1382 - 1))).1[n$1382 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_1392, int64_t c_1393, std::vector<int64_t> h_1394) {\n  assert(-n_1392 + 2ll <= 0ll and n_1392 - 200000ll <= 0ll);\n  assert(-c_1393 + 1ll <= 0ll and c_1393 - 1000000000000ll <= 0ll);\n  assert(-n_1392 + int64_t(h_1394.size()) == 0ll);\n  for (int64_t x1395 : h_1394) {\n    assert(-x1395 + 1ll <= 0ll and x1395 - 1000000ll <= 0ll);\n  }\n  std::vector<int64_t> x1398;\n  x1398.push_back(0ll);\n  jikka::convex_hull_trick x1399;\n  for (int32_t x1400 = 0; x1400 < 1ll; ++x1400) {\n    x1399.add_line(h_1394[x1400], x1398[x1400] + h_1394[x1400] * h_1394[x1400]);\n  }\n  for (int32_t x1404 = 0; x1404 < n_1392 - 1ll; ++x1404) {\n    x1398.push_back(c_1393 + h_1394[x1404 + 1ll] * h_1394[x1404 + 1ll] +\n                    x1399.get_min(h_1394[x1404 + 1ll] * -2ll));\n    x1399.add_line(h_1394[x1404 + 1ll],\n                   x1398[x1404 + 1ll] +\n                       h_1394[x1404 + 1ll] * h_1394[x1404 + 1ll]);\n  }\n  return x1398[n_1392 - 1ll];\n}\nint main() {\n  int64_t n_1413 = -1ll;\n  int64_t c_1414 = -1ll;\n  std::cin >> n_1413;\n  std::vector<int64_t> h_1415(n_1413, -1ll);\n  std::cin >> c_1414;\n  for (int32_t i1416 = 0; i1416 < n_1413; ++i1416) {\n    std::cin >> h_1415[i1416];\n  }\n  auto ans_1417 = solve(n_1413, c_1414, h_1415);\n  std::cout << ans_1417 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/fact.py", "python": "def solve(n: int) -> int:\n    ans = 1\n    for i in range(n):\n        ans *= i + 1\n    return ans % 998244353\n", "rpython": "def solve(n: int) -> int:\n    ans: $0 = 1\n    for i in range(n):\n        ans *= i + 1\n    return ans % 998244353\n", "core": "fun (n$341: int) ->\n    modproduct (map (fun ($342: int) ->\n        modplus ($342 % 998244353) 1 998244353\n    ) (range n$341)) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_343) {\n  std::vector<int64_t> x344(n_343);\n  for (int32_t i345 = 0; i345 < int32_t(n_343); ++i345) {\n    x344[i345] =\n        jikka::mod::plus(jikka::floormod(i345, 998244353ll), 1ll, 998244353ll);\n  }\n  int64_t x347 = 1ll;\n  for (int64_t x348 : x344) {\n    x347 = jikka::mod::mult(x347, x348, 998244353ll);\n  }\n  return x347;\n}\nint main() {\n  int64_t x349 = -1ll;\n  std::cin >> x349;\n  auto x350 = solve(x349);\n  std::cout << x350 << ' ';\n}\n"}, {"path": "examples/fib.py", "python": "def f(n: int) -> int:\n    a = 0\n    b = 1\n    for _ in range(n):\n        c = a + b\n        a = b\n        b = c\n    return a\n\ndef solve(n: int) -> int:\n    return f(n) % 998244353\n", "rpython": "def f(n: int) -> int:\n    a: $0 = 0\n    b: $1 = 1\n    for _ in range(n):\n        c: $2 = a + b\n        a: $3 = b\n        b: $4 = c\n    return a\ndef solve(n: int) -> int:\n    return f(n) % 998244353\n", "core": "fun (n$265: int) ->\n    (modmatap@2@2 (modmatpow@2 ((1, 1), (1, 0)) n$265 998244353) (1, 0) 998244353).1\n", "cxx": "#include \"jikka/modulo_matrix.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_266) {\n  return jikka::modmat::ap<2, 2>(jikka::modmat::pow<2>(\n                                     std::array<std::array<int64_t, 2>, 2>{\n                                         std::array<int64_t, 2>{1ll, 1ll},\n                                         std::array<int64_t, 2>{1ll, 0ll}},\n                                     n_266, 998244353ll),\n                                 std::array<int64_t, 2>{1ll, 0ll},\n                                 998244353ll)[1];\n}\nint main() {\n  int64_t x267 = -1ll;\n  std::cin >> x267;\n  auto x268 = solve(x267);\n  std::cout << x268 << ' ';\n}\n"}, {"path": "examples/fib_list_riantkb.py", "python": "# See https://github.com/kmyk/Jikka/issues/178\nfrom typing import *\n\n\ndef solve(n: int) -> int:\n    a = 0\n    b = 1\n    lis = []\n    for i in range(n):\n        lis.append(0)\n    for i in lis:\n        c = a + b + i\n        a = b\n        b = c\n    return a % 1000000007\n\n\ndef main():\n    n = int(input())\n    ans = solve(n)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(n: int) -> int:\n    a: $0 = 0\n    b: $1 = 1\n    lis: $2 = []\n    for i in range(n):\n        lis.append(0)\n    for i in lis:\n        c: $4 = a + b + i\n        a: $5 = b\n        b: $6 = c\n    return a % 1000000007\ndef main() -> $9:\n    n: $7 = int(input())\n    ans: $8 = solve(n)\n    print(ans)\n", "core": "fun (n$611: int) ->\n    (foldl (fun ($612: int * int) ($613: int) ->\n        (modplus (modplus ($613 % 1000000007) (vecfloormod@2 $612 1000000007).0 1000000007) (vecfloormod@2 $612 1000000007).1 1000000007, (vecfloormod@2 $612 1000000007).0)\n    ) (1, 0) (iterate n$611 (fun ($614: int list) ->\n        snoc $614 0\n    ) nil)).1\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include \"jikka/modulo_matrix.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_615) {\n  std::vector<int64_t> x616;\n  for (int32_t i617 = 0; i617 < int32_t(n_615); ++i617) {\n    x616.push_back(0ll);\n  }\n  int64_t x_624 = 1ll;\n  int64_t x_625 = 0ll;\n  for (int64_t x621 : x616) {\n    int64_t x626 = jikka::mod::plus(\n        jikka::mod::plus(\n            jikka::floormod(x621, 1000000007ll),\n            jikka::modmat::floormod<2>(std::array<int64_t, 2>{x_624, x_625},\n                                       1000000007ll)[0],\n            1000000007ll),\n        jikka::modmat::floormod<2>(std::array<int64_t, 2>{x_624, x_625},\n                                   1000000007ll)[1],\n        1000000007ll);\n    int64_t x627 = jikka::modmat::floormod<2>(\n        std::array<int64_t, 2>{x_624, x_625}, 1000000007ll)[0];\n    x_624 = x626;\n    x_625 = x627;\n  }\n  return x_625;\n}\nint main() {\n  int64_t n_628 = -1ll;\n  std::cin >> n_628;\n  auto ans_629 = solve(n_628);\n  std::cout << ans_629 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/higher_order_function.py", "python": "from typing import *\n\ndef repeat(f: Callable[[int], int], k: int) -> Callable[[int], int]:\n    g = lambda x: x\n    for _ in range(k):\n        g = (lambda g: lambda x: f(g(x)))(g)\n    return g\n\ndef solve(n: int) -> int:\n    return repeat(lambda x: x + n, n)(n)\n", "rpython": "def repeat(f: Callable[[int], int], k: int) -> Callable[[int], int]:\n    g: $0 = lambda x: x\n    for _ in range(k):\n        g: $2 = lambda g: lambda x: f(g(x))(g)\n    return g\ndef solve(n: int) -> int:\n    return repeat(lambda x: x + n, n)(n)\n", "core": "fun (n$630: int) ->\n    iterate n$630 (fun ($631: int -> int) ($632: int) ->\n        n$630 + $631 $632\n    ) id n$630\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_634) {\n  std::function<int64_t(int64_t)> x636 = [=](int64_t x_635) -> int64_t {\n    return x_635;\n  };\n  for (int32_t i637 = 0; i637 < int32_t(n_634); ++i637) {\n    x636 = [=](int64_t b639) -> int64_t { return n_634 + x636(b639); };\n  }\n  return x636(n_634);\n}\nint main() {\n  int64_t x640 = -1ll;\n  std::cin >> x640;\n  auto x641 = solve(x640);\n  std::cout << x641 << ' ';\n}\n"}, {"path": "examples/list_literal.py", "python": "def solve(a: int, b: int, c:int) -> int:\n    return sum([a, b, c])\n", "rpython": "def solve(a: int, b: int, c: int) -> int:\n    return sum([a, b, c])\n", "core": "fun (a$347: int) (b$348: int) (c$349: int) ->\n    a$347 + b$348 + c$349\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_350, int64_t b_351, int64_t c_352) {\n  return a_350 + b_351 + c_352;\n}\nint main() {\n  int64_t x353 = -1ll;\n  int64_t x354 = -1ll;\n  int64_t x355 = -1ll;\n  std::cin >> x353;\n  std::cin >> x354;\n  std::cin >> x355;\n  auto x356 = solve(x353, x354, x355);\n  std::cout << x356 << ' ';\n}\n"}, {"path": "examples/loop_mod_uta8a.py", "python": "# See https://github.com/kmyk/Jikka/issues/173\n\ndef solve(n: int, k: int) -> int:\n    for _ in range(k):\n        n = n % 3\n    return n\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    ans = solve(n, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, k: int) -> int:\n    for _ in range(k):\n        n: $0 = n % 3\n    return n\ndef main() -> None:\n    n, k: $1 = map(int, input().split())\n    ans: $2 = solve(n, k)\n    print(ans)\n", "core": "fun (n$280: int) (k$281: int) ->\n    if range k$281 == nil then n$280 else n$280 % 3\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/range.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_282, int64_t k_283) {\n  return jikka::range(k_283) == std::vector<int64_t>()\n             ? n_282\n             : jikka::floormod(n_282, 3ll);\n}\nint main() {\n  int64_t n_284 = -1ll;\n  int64_t k_285 = -1ll;\n  std::cin >> n_284;\n  std::cin >> k_285;\n  auto ans_286 = solve(n_284, k_285);\n  std::cout << ans_286 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/method_calls.py", "python": "def solve(a: int, b: int, c: int) -> int:\n    xs = [a, b, c, 1]\n    return xs.count(0) + xs.index(1)\n", "rpython": "def solve(a: int, b: int, c: int) -> int:\n    xs: $0 = [a, b, c, 1]\n    return xs.count(0) + xs.index(1)\n", "core": "fun (a$711: int) (b$712: int) (c$713: int) ->\n    let xs$714: int list = cons a$711 (cons b$712 (cons c$713 (cons 1 nil)))\n    in len (filter (fun (y$715: int) ->\n        y$715 == 0\n    ) xs$714) + minimum (filter (fun (i$716: int) ->\n        xs$714[i$716] - 1 == 0\n    ) (range (len xs$714)))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_717, int64_t b_718, int64_t c_719) {\n  std::vector<int64_t> x721;\n  x721.push_back(1ll);\n  x721.insert(x721.end(), std::vector<int64_t>().begin(),\n              std::vector<int64_t>().end());\n  std::vector<int64_t> x722;\n  x722.push_back(c_719);\n  x722.insert(x722.end(), x721.begin(), x721.end());\n  std::vector<int64_t> x723;\n  x723.push_back(b_718);\n  x723.insert(x723.end(), x722.begin(), x722.end());\n  std::vector<int64_t> x724;\n  x724.push_back(a_717);\n  x724.insert(x724.end(), x723.begin(), x723.end());\n  std::vector<int64_t> x725;\n  for (int64_t x726 : x724) {\n    if (x726 == 0ll) {\n      x725.push_back(x726);\n    }\n  }\n  std::vector<int64_t> x728;\n  for (int32_t x729 = 0; x729 < int64_t(x724.size()); ++x729) {\n    if (x724[x729] - 1ll == 0ll) {\n      x728.push_back(x729);\n    }\n  }\n  int64_t x731 = *std::min_element(x728.begin(), x728.end());\n  return int64_t(x725.size()) + x731;\n}\nint main() {\n  int64_t x732 = -1ll;\n  int64_t x733 = -1ll;\n  int64_t x734 = -1ll;\n  std::cin >> x732;\n  std::cin >> x733;\n  std::cin >> x734;\n  auto x735 = solve(x732, x733, x734);\n  std::cout << x735 << ' ';\n}\n"}, {"path": "examples/static_range_sum.py", "python": "# https://judge.yosupo.jp/problem/static_range_sum\n\nfrom typing import *\n\ndef solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:\n    ans = [-1 for _ in range(q)]\n    for i in range(q):\n        ans[i] = sum(a[l[i]:r[i]])\n    return ans\n\ndef main() -> None:\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    l = list(range(q))\n    r = list(range(q))\n    for i in range(q):\n        l[i], r[i] = map(int, input().split())\n    ans = solve(n, q, a, l, r)\n    for i in range(q):\n        print(ans[i])\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:\n    ans: $0 = [- 1 for _ in range(q)]\n    for i in range(q):\n        ans[i]: $1 = sum(a[l[i]:r[i]])\n    return ans\ndef main() -> None:\n    n, q: $2 = map(int, input().split())\n    a: $3 = list(map(int, input().split()))\n    assert len(a) == n\n    l: $5 = list(range(q))\n    r: $6 = list(range(q))\n    for i in range(q):\n        l[i], r[i]: $7 = map(int, input().split())\n    ans: $8 = solve(n, q, a, l, r)\n    for i in range(q):\n        print(ans[i])\n", "core": "const (fun (q$1106: int) (a$1107: int list) (l$1108: int list) (r$1109: int list) ->\n    let $1112: int list = scanl (fun ($1110: int) ($1111: int) ->\n        $1110 + $1111\n    ) 0 a$1107\n    in map (fun ($1113: int) ->\n        - $1112[l$1108[$1113]] + $1112[r$1109[$1113]]\n    ) (range q$1106)\n)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_1114, int64_t q_1115,\n                           std::vector<int64_t> a_1116,\n                           std::vector<int64_t> l_1117,\n                           std::vector<int64_t> r_1118) {\n  std::vector<int64_t> x1120(a_1116.size() + 1);\n  x1120[0] = 0ll;\n  for (int32_t i1121 = 0; i1121 < int32_t(a_1116.size()); ++i1121) {\n    x1120[i1121 + 1] = x1120[i1121] + a_1116[i1121];\n  }\n  std::vector<int64_t> x1124(q_1115);\n  for (int32_t i1125 = 0; i1125 < int32_t(q_1115); ++i1125) {\n    x1124[i1125] = -x1120[l_1117[i1125]] + x1120[r_1118[i1125]];\n  }\n  return x1124;\n}\nint main() {\n  int64_t n_1127 = -1ll;\n  int64_t q_1128 = -1ll;\n  std::cin >> n_1127;\n  std::vector<int64_t> a_1129(n_1127, -1ll);\n  std::cin >> q_1128;\n  std::vector<int64_t> l_1130(q_1128, -1ll);\n  std::vector<int64_t> r_1131(q_1128, -1ll);\n  for (int32_t i1132 = 0; i1132 < n_1127; ++i1132) {\n    std::cin >> a_1129[i1132];\n  }\n  for (int32_t i_1133 = 0; i_1133 < q_1128; ++i_1133) {\n    std::cin >> l_1130[i_1133];\n    std::cin >> r_1131[i_1133];\n  }\n  auto ans_1134 = solve(n_1127, q_1128, a_1129, l_1130, r_1131);\n  for (int32_t i_1135 = 0; i_1135 < q_1128; ++i_1135) {\n    std::cout << ans_1134[i_1135] << ' ';\n    std::cout << '\\n' << ' ';\n  }\n}\n"}, {"path": "examples/sum.py", "python": "def solve(a: int, b: int, n: int) -> int:\n    y = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 1000000007\n", "rpython": "def solve(a: int, b: int, n: int) -> int:\n    y: $0 = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 1000000007\n", "core": "fun (a$402: int) (b$403: int) (n$404: int) ->\n    modplus (modplus (modmult (modmult (a$402 % 1000000007) (n$404 % 1000000007) 1000000007) 500000003 1000000007) (modmult (modmult (modmult (a$402 % 1000000007) (n$404 % 1000000007) 1000000007) (n$404 % 1000000007) 1000000007) 500000004 1000000007) 1000000007) (modmult (b$403 % 1000000007) (n$404 % 1000000007) 1000000007) 1000000007\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_405, int64_t b_406, int64_t n_407) {\n  return jikka::mod::plus(\n      jikka::mod::plus(\n          jikka::mod::mult(\n              jikka::mod::mult(jikka::floormod(a_405, 1000000007ll),\n                               jikka::floormod(n_407, 1000000007ll),\n                               1000000007ll),\n              500000003ll, 1000000007ll),\n          jikka::mod::mult(\n              jikka::mod::mult(\n                  jikka::mod::mult(jikka::floormod(a_405, 1000000007ll),\n                                   jikka::floormod(n_407, 1000000007ll),\n                                   1000000007ll),\n                  jikka::floormod(n_407, 1000000007ll), 1000000007ll),\n              500000004ll, 1000000007ll),\n          1000000007ll),\n      jikka::mod::mult(jikka::floormod(b_406, 1000000007ll),\n                       jikka::floormod(n_407, 1000000007ll), 1000000007ll),\n      1000000007ll);\n}\nint main() {\n  int64_t x408 = -1ll;\n  int64_t x409 = -1ll;\n  int64_t x410 = -1ll;\n  std::cin >> x408;\n  std::cin >> x409;\n  std::cin >> x410;\n  auto x411 = solve(x408, x409, x410);\n  std::cout << x411 << ' ';\n}\n"}, {"path": "examples/sum_ax_plus_b.py", "python": "# https://judge.kimiyuki.net/problem/sum-ax-plus-b\ndef solve(a: int, b: int, n: int) -> int:\n    y = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 998244353\n", "rpython": "def solve(a: int, b: int, n: int) -> int:\n    y: $0 = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 998244353\n", "core": "fun (a$402: int) (b$403: int) (n$404: int) ->\n    modplus (modplus (modmult (modmult (a$402 % 998244353) (n$404 % 998244353) 998244353) 499122176 998244353) (modmult (modmult (modmult (a$402 % 998244353) (n$404 % 998244353) 998244353) (n$404 % 998244353) 998244353) 499122177 998244353) 998244353) (modmult (b$403 % 998244353) (n$404 % 998244353) 998244353) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_405, int64_t b_406, int64_t n_407) {\n  return jikka::mod::plus(\n      jikka::mod::plus(\n          jikka::mod::mult(jikka::mod::mult(jikka::floormod(a_405, 998244353ll),\n                                            jikka::floormod(n_407, 998244353ll),\n                                            998244353ll),\n                           499122176ll, 998244353ll),\n          jikka::mod::mult(\n              jikka::mod::mult(\n                  jikka::mod::mult(jikka::floormod(a_405, 998244353ll),\n                                   jikka::floormod(n_407, 998244353ll),\n                                   998244353ll),\n                  jikka::floormod(n_407, 998244353ll), 998244353ll),\n              499122177ll, 998244353ll),\n          998244353ll),\n      jikka::mod::mult(jikka::floormod(b_406, 998244353ll),\n                       jikka::floormod(n_407, 998244353ll), 998244353ll),\n      998244353ll);\n}\nint main() {\n  int64_t x408 = -1ll;\n  int64_t x409 = -1ll;\n  int64_t x410 = -1ll;\n  std::cin >> x408;\n  std::cin >> x409;\n  std::cin >> x410;\n  auto x411 = solve(x408, x409, x410);\n  std::cout << x411 << ' ';\n}\n"}, {"path": "examples/sum_sum_plus_one.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-plus-one\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i - a_j\n    return ans\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i - a_j\n    return ans\ndef main() -> None:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $4 = solve(a)\n    print(ans)\n", "core": "const 0\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_244) { return 0ll; }\nint main() {\n  int64_t n_245 = -1ll;\n  std::cin >> n_245;\n  std::vector<int64_t> a_246(n_245, -1ll);\n  for (int32_t i247 = 0; i247 < n_245; ++i247) {\n    std::cin >> a_246[i247];\n  }\n  auto ans_248 = solve(a_246);\n  std::cout << ans_248 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_plus_one_lt.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-plus-one-lt\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    n = len(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += a[i] - a[j]\n    return ans\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    n: $0 = len(a)\n    ans: $1 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += a[i] - a[j]\n    return ans\ndef main() -> None:\n    n: $2 = int(input())\n    a: $3 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $5 = solve(a)\n    print(ans)\n", "core": "fun (a$1062: int list) ->\n    len a$1062 * (scanl (fun ($1063: int) ($1064: int) ->\n        $1063 + $1064\n    ) 0 a$1062)[len a$1062] - sum (map (fun ($1065: int) ->\n        $1065 * a$1062[$1065]\n    ) (range (len a$1062))) - sum (let $1068: int list = scanl (fun ($1066: int) ($1067: int) ->\n        $1066 + $1067\n    ) 0 a$1062\n    in map (fun ($1069: int) ->\n        $1068[len a$1062] - $1068[$1069 + 1]\n    ) (range (len a$1062))) - (scanl (fun ($1070: int) ($1071: int) ->\n        $1070 + $1071\n    ) 0 a$1062)[len a$1062]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_1072) {\n  std::vector<int64_t> x1073(a_1072.size() + 1);\n  x1073[0] = 0ll;\n  for (int32_t i1074 = 0; i1074 < int32_t(a_1072.size()); ++i1074) {\n    x1073[i1074 + 1] = x1073[i1074] + a_1072[i1074];\n  }\n  std::vector<int64_t> x1077(int64_t(a_1072.size()));\n  for (int32_t i1078 = 0; i1078 < int32_t(int64_t(a_1072.size())); ++i1078) {\n    x1077[i1078] = i1078 * a_1072[i1078];\n  }\n  int64_t x1080 = std::accumulate(x1077.begin(), x1077.end(), 0ll);\n  std::vector<int64_t> x1082(a_1072.size() + 1);\n  x1082[0] = 0ll;\n  for (int32_t i1083 = 0; i1083 < int32_t(a_1072.size()); ++i1083) {\n    x1082[i1083 + 1] = x1082[i1083] + a_1072[i1083];\n  }\n  std::vector<int64_t> x1086(int64_t(a_1072.size()));\n  for (int32_t i1087 = 0; i1087 < int32_t(int64_t(a_1072.size())); ++i1087) {\n    x1086[i1087] = x1082[int64_t(a_1072.size())] - x1082[i1087 + 1ll];\n  }\n  int64_t x1089 = std::accumulate(x1086.begin(), x1086.end(), 0ll);\n  std::vector<int64_t> x1090(a_1072.size() + 1);\n  x1090[0] = 0ll;\n  for (int32_t i1091 = 0; i1091 < int32_t(a_1072.size()); ++i1091) {\n    x1090[i1091 + 1] = x1090[i1091] + a_1072[i1091];\n  }\n  return int64_t(a_1072.size()) * x1073[int64_t(a_1072.size())] - x1080 -\n         x1089 - x1090[int64_t(a_1072.size())];\n}\nint main() {\n  int64_t n_1094 = -1ll;\n  std::cin >> n_1094;\n  std::vector<int64_t> a_1095(n_1094, -1ll);\n  for (int32_t i1096 = 0; i1096 < n_1094; ++i1096) {\n    std::cin >> a_1095[i1096];\n  }\n  auto ans_1097 = solve(a_1095);\n  std::cout << ans_1097 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_plus_two.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-plus-two\nfrom typing import *\n\n\ndef solve(a: List[int], b: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for b_j in b:\n            ans += a_i - b_j\n    return ans\n\n\ndef main() -> None:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == m\n    ans = solve(a, b)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int], b: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for b_j in b:\n            ans += a_i - b_j\n    return ans\ndef main() -> None:\n    n, m: $1 = map(int, input().split())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    b: $4 = list(map(int, input().split()))\n    assert len(b) == m\n    ans: $6 = solve(a, b)\n    print(ans)\n", "core": "fun (a$363: int list) (b$364: int list) ->\n    - (len a$363 * sum b$364) + len b$364 * sum a$363\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_365, std::vector<int64_t> b_366) {\n  int64_t x367 = std::accumulate(b_366.begin(), b_366.end(), 0ll);\n  int64_t x368 = std::accumulate(a_365.begin(), a_365.end(), 0ll);\n  return -(int64_t(a_365.size()) * x367) + int64_t(b_366.size()) * x368;\n}\nint main() {\n  int64_t n_369 = -1ll;\n  int64_t m_370 = -1ll;\n  std::cin >> n_369;\n  std::vector<int64_t> a_371(n_369, -1ll);\n  std::cin >> m_370;\n  std::vector<int64_t> b_372(m_370, -1ll);\n  for (int32_t i373 = 0; i373 < n_369; ++i373) {\n    std::cin >> a_371[i373];\n  }\n  for (int32_t i374 = 0; i374 < m_370; ++i374) {\n    std::cin >> b_372[i374];\n  }\n  auto ans_375 = solve(a_371, b_372);\n  std::cout << ans_375 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_square.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-square\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for a_j in a:\n            ans += (a_i - a_j) ** 2\n    return ans % 998244353\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i - a_j ** 2\n    return ans % 998244353\ndef main() -> None:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $4 = solve(a)\n    print(ans)\n", "core": "fun (a$639: int list) ->\n    modplus (modplus (modmult (len a$639 % 998244353) (modsum (map (fun ($640: int) ->\n        modmult ($640 % 998244353) ($640 % 998244353) 998244353\n    ) a$639) 998244353) 998244353) (modmult (len a$639 % 998244353) (modsum (map (fun ($641: int) ->\n        modmult ($641 % 998244353) ($641 % 998244353) 998244353\n    ) a$639) 998244353) 998244353) 998244353) (modmult (modmult (modsum (map (fun ($642: int) ->\n        $642 % 998244353\n    ) a$639) 998244353) (modsum (map (fun ($643: int) ->\n        $643 % 998244353\n    ) a$639) 998244353) 998244353) 998244351 998244353) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_644) {\n  std::vector<int64_t> x645(a_644.size());\n  for (int32_t i646 = 0; i646 < int32_t(a_644.size()); ++i646) {\n    x645[i646] = jikka::mod::mult(jikka::floormod(a_644[i646], 998244353ll),\n                                  jikka::floormod(a_644[i646], 998244353ll),\n                                  998244353ll);\n  }\n  int64_t x648 = 0ll;\n  for (int64_t x649 : x645) {\n    x648 += jikka::floormod(x649, 998244353ll);\n  }\n  std::vector<int64_t> x650(a_644.size());\n  for (int32_t i651 = 0; i651 < int32_t(a_644.size()); ++i651) {\n    x650[i651] = jikka::mod::mult(jikka::floormod(a_644[i651], 998244353ll),\n                                  jikka::floormod(a_644[i651], 998244353ll),\n                                  998244353ll);\n  }\n  int64_t x653 = 0ll;\n  for (int64_t x654 : x650) {\n    x653 += jikka::floormod(x654, 998244353ll);\n  }\n  std::vector<int64_t> x655(a_644.size());\n  for (int32_t i656 = 0; i656 < int32_t(a_644.size()); ++i656) {\n    x655[i656] = jikka::floormod(a_644[i656], 998244353ll);\n  }\n  int64_t x658 = 0ll;\n  for (int64_t x659 : x655) {\n    x658 += jikka::floormod(x659, 998244353ll);\n  }\n  std::vector<int64_t> x660(a_644.size());\n  for (int32_t i661 = 0; i661 < int32_t(a_644.size()); ++i661) {\n    x660[i661] = jikka::floormod(a_644[i661], 998244353ll);\n  }\n  int64_t x663 = 0ll;\n  for (int64_t x664 : x660) {\n    x663 += jikka::floormod(x664, 998244353ll);\n  }\n  return jikka::mod::plus(\n      jikka::mod::plus(\n          jikka::mod::mult(jikka::floormod(int64_t(a_644.size()), 998244353ll),\n                           jikka::floormod(x648, 998244353ll), 998244353ll),\n          jikka::mod::mult(jikka::floormod(int64_t(a_644.size()), 998244353ll),\n                           jikka::floormod(x653, 998244353ll), 998244353ll),\n          998244353ll),\n      jikka::mod::mult(jikka::mod::mult(jikka::floormod(x658, 998244353ll),\n                                        jikka::floormod(x663, 998244353ll),\n                                        998244353ll),\n                       998244351ll, 998244353ll),\n      998244353ll);\n}\nint main() {\n  int64_t n_665 = -1ll;\n  std::cin >> n_665;\n  std::vector<int64_t> a_666(n_665, -1ll);\n  for (int32_t i667 = 0; i667 < n_665; ++i667) {\n    std::cin >> a_666[i667];\n  }\n  auto ans_668 = solve(a_666);\n  std::cout << ans_668 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/wip/tle/abc127_e.py", "python": "# https://atcoder.jp/contests/abc127/tasks/abc127_e\n\nMOD: int = 10 ** 9 + 7\n\ndef solve(h: int, w: int, k: int) -> int:\n    ans = 0\n    for y1 in range(h):\n        for x1 in range(w):\n            for y2 in range(h):\n                for x2 in range(w):\n                    if (y1, x1) < (y2, x2):\n                        ans += jikka.choose(h * w - 2, k - 2) * (abs(y2 - y1) + abs(x2 - x1))\n    return ans % MOD\n\ndef main() -> None:\n    n, m, k = map(int, input().split())\n    ans = solve(n, m, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "MOD: int = 10 ** 9 + 7\ndef solve(h: int, w: int, k: int) -> int:\n    ans: $0 = 0\n    for y1 in range(h):\n        for x1 in range(w):\n            for y2 in range(h):\n                for x2 in range(w):\n                    if (y1, x1) < (y2, x2):\n                        ans += jikka.choose(h * w - 2, k - 2) * abs(y2 - y1) + abs(x2 - x1)\n    return ans % MOD\ndef main() -> None:\n    n, m, k: $2 = map(int, input().split())\n    ans: $3 = solve(n, m, k)\n    print(ans)\n", "core": "fun (h$1564: int) (w$1565: int) (k$1566: int) ->\n    foldl (fun ($1567: int) ($1568: int) ->\n        (vecfloormod@1 (foldl (fun ($1569: int) ($1570: int) ->\n            foldl (fun ($1571: int) ($1572: int) ->\n                foldl (fun ($1573: int) ($1574: int) ->\n                    if ($1568, $1570) < ($1572, $1574) then $1573 + abs (- $1568 + $1572) * choose (h$1564 * w$1565 - 2) (k$1566 - 2) + abs (- $1570 + $1574) * choose (h$1564 * w$1565 - 2) (k$1566 - 2) else $1573\n                ) $1571 (range w$1565)\n            ) $1569 (range h$1564)\n        ) $1567 (range w$1565),) 1000000007).0\n    ) 0 (range h$1564)\n", "cxx": "#include \"jikka/modulo_matrix.hpp\"\n#include \"jikka/not_modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t h_1575, int64_t w_1576, int64_t k_1577) {\n  int64_t x1578 = 0ll;\n  for (int32_t x1579 = 0; x1579 < h_1575; ++x1579) {\n    int64_t x1582 = x1578;\n    for (int32_t x1583 = 0; x1583 < w_1576; ++x1583) {\n      for (int32_t x1587 = 0; x1587 < h_1575; ++x1587) {\n        for (int32_t x1591 = 0; x1591 < w_1576; ++x1591) {\n          x1582 = std::array<int64_t, 2>{x1579, x1583} <\n                          std::array<int64_t, 2>{x1587, x1591}\n                      ? x1582 +\n                            std::abs(-x1579 + x1587) *\n                                jikka::notmod::choose(h_1575 * w_1576 - 2ll,\n                                                      k_1577 - 2ll) +\n                            std::abs(-x1583 + x1591) *\n                                jikka::notmod::choose(h_1575 * w_1576 - 2ll,\n                                                      k_1577 - 2ll)\n                      : x1582;\n        }\n      }\n    }\n    x1578 = jikka::modmat::floormod<1>(std::array<int64_t, 1>{x1582},\n                                       1000000007ll)[0];\n  }\n  return x1578;\n}\nint main() {\n  int64_t n_1594 = -1ll;\n  int64_t m_1595 = -1ll;\n  int64_t k_1596 = -1ll;\n  std::cin >> n_1594;\n  std::cin >> m_1595;\n  std::cin >> k_1596;\n  auto ans_1597 = solve(n_1594, m_1595, k_1596);\n  std::cout << ans_1597 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/wip/tle/abc134_c.py", "python": "# https://atcoder.jp/contests/abc134/tasks/abc134_c\nfrom typing import *\n\ndef solve(N: int, A: List[int]) -> List[int]:\n    # assert 2 <= N <= 200000\n    # assert len(A) == N\n    # assert all(0 <= A_i <= 200000 for A_i in A)\n\n    ans = [-1 for _ in range(N)]\n    for i in range(N):\n        ans[i] = max((0 if j == i else A[j]) for j in range(N))\n    return ans\n", "rpython": "def solve(N: int, A: List[int]) -> List[int]:\n    ans: $0 = [- 1 for _ in range(N)]\n    for i in range(N):\n        ans[i]: $1 = max(0 if j == i else A[j] for j in range(N))\n    return ans\n", "core": "fun (N$566: int) (A$567: int list) ->\n    map (fun ($568: int) ->\n        maximum (map (fun ($569: int) ->\n            if - $568 + $569 == 0 then 0 else A$567[$569]\n        ) (range N$566))\n    ) (range N$566)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t N_570, std::vector<int64_t> A_571) {\n  std::vector<int64_t> x572(N_570);\n  for (int32_t i573 = 0; i573 < int32_t(N_570); ++i573) {\n    std::vector<int64_t> x575(N_570);\n    for (int32_t i576 = 0; i576 < int32_t(N_570); ++i576) {\n      x575[i576] = -i573 + i576 == 0ll ? 0ll : A_571[i576];\n    }\n    int64_t x578 = *std::max_element(x575.begin(), x575.end());\n    x572[i573] = x578;\n  }\n  return x572;\n}\nint main() {\n  int64_t x579 = -1ll;\n  int64_t x580 = -1ll;\n  std::cin >> x579;\n  std::cin >> x580;\n  std::vector<int64_t> x581(x580, -1ll);\n  for (int32_t i582 = 0; i582 < x580; ++i582) {\n    std::cin >> x581[i582];\n  }\n  auto x583 = solve(x579, x581);\n  std::cout << int32_t(x583.size()) << ' ';\n  for (int32_t i584 = 0; i584 < int32_t(x583.size()); ++i584) {\n    std::cout << x583[i584] << ' ';\n  }\n}\n"}, {"path": "examples/wip/tle/codefestival_2015_final_d.py", "python": "# https://atcoder.jp/contests/code-festival-2015-final-open/tasks/codefestival_2015_final_d\nfrom typing import *\n\ndef solve(n: int, s: List[int], t: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert len(s) == n\n    assert len(t) == n\n    ans = n\n    for i in range(n):\n        ans_i = max(sum((1 if s[j] <= x < t[j] else 0) for j in range(n) if j != i) for x in range(max(t)))\n        ans = min(ans, ans_i)\n    return ans\n", "rpython": "def solve(n: int, s: List[int], t: List[int]) -> int:\n    assert 2 <= n and n <= 10 ** 5\n    assert len(s) == n\n    assert len(t) == n\n    ans: $4 = n\n    for i in range(n):\n        ans_i: $5 = max(sum(1 if s[j] <= x and x < t[j] else 0 for j in range(n) if j != i) for x in range(max(t)))\n        ans: $9 = min(ans, ans_i)\n    return ans\n", "core": "fun (n$962: int) (s$963: int list) (t$964: int list) ->\n    assert - n$962 + 2 <= 0 && n$962 - 100000 <= 0 in\n    assert - n$962 + len s$963 == 0 in\n    assert - n$962 + len t$964 == 0 in\n    minimum (cons n$962 (map (fun ($965: int) ->\n        maximum (map (fun ($966: int) ->\n            sum (map (fun ($967: int) ->\n                if - $966 + s$963[$967] <= 0 && $966 - t$964[$967] < 0 then 1 else 0\n            ) (filter (fun ($968: int) ->\n                - $965 + $968 != 0\n            ) (range n$962)))\n        ) (range (maximum t$964)))\n    ) (range n$962)))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_969, std::vector<int64_t> s_970,\n              std::vector<int64_t> t_971) {\n  assert(-n_969 + 2ll <= 0ll and n_969 - 100000ll <= 0ll);\n  assert(-n_969 + int64_t(s_970.size()) == 0ll);\n  assert(-n_969 + int64_t(t_971.size()) == 0ll);\n  std::vector<int64_t> x972(n_969);\n  for (int32_t i973 = 0; i973 < int32_t(n_969); ++i973) {\n    int64_t x976 = *std::max_element(t_971.begin(), t_971.end());\n    std::vector<int64_t> x975(x976);\n    for (int32_t i977 = 0; i977 < int32_t(x976); ++i977) {\n      std::vector<int64_t> x980;\n      for (int32_t x981 = 0; x981 < n_969; ++x981) {\n        if (-i973 + x981 != 0ll) {\n          x980.push_back(x981);\n        }\n      }\n      std::vector<int64_t> x979(x980.size());\n      for (int32_t i983 = 0; i983 < int32_t(x980.size()); ++i983) {\n        x979[i983] =\n            -i977 + s_970[x980[i983]] <= 0ll and i977 - t_971[x980[i983]] < 0ll\n                ? 1ll\n                : 0ll;\n      }\n      int64_t x985 = std::accumulate(x979.begin(), x979.end(), 0ll);\n      x975[i977] = x985;\n    }\n    int64_t x986 = *std::max_element(x975.begin(), x975.end());\n    x972[i973] = x986;\n  }\n  std::vector<int64_t> x987;\n  x987.push_back(n_969);\n  x987.insert(x987.end(), x972.begin(), x972.end());\n  int64_t x988 = *std::min_element(x987.begin(), x987.end());\n  return x988;\n}\nint main() {\n  int64_t x989 = -1ll;\n  int64_t x990 = -1ll;\n  int64_t x992 = -1ll;\n  std::cin >> x989;\n  std::cin >> x990;\n  std::vector<int64_t> x991(x990, -1ll);\n  for (int32_t i994 = 0; i994 < x990; ++i994) {\n    std::cin >> x991[i994];\n  }\n  std::cin >> x992;\n  std::vector<int64_t> x993(x992, -1ll);\n  for (int32_t i995 = 0; i995 < x992; ++i995) {\n    std::cin >> x993[i995];\n  }\n  auto x996 = solve(x989, x991, x993);\n  std::cout << x996 << ' ';\n}\n"}, {"path": "examples/wip/tle/m_solutions2019_e.py", "python": "# https://atcoder.jp/contests/m-solutions2019/tasks/m_solutions2019_e\nfrom typing import *\n\nMOD: int = 1000003\n\ndef solve1(x: int, d: int, n: int) -> int:\n    assert 0 <= x < MOD\n    assert 0 <= d < MOD\n    assert 0 <= n < 10 ** 9\n\n    return product(x + i * d for i in range(n)) % MOD\n\ndef solve(Q: int, x: List[int], d: List[int], n: List[int]) -> List[int]:\n    assert 1 <= Q <= 100000\n    assert len(x) == Q\n    assert all(0 <= x_i < MOD for x_i in x)\n    assert len(d) == Q\n    assert all(0 <= d_i < MOD for d_i in d)\n    assert len(n) == Q\n    assert all(0 <= n_i < MOD for n_i in n)\n\n    ans = [-1 for _ in range(Q)]\n    for i in range(Q):\n        ans[i] = solve1(x[i], d[i], n[i])\n    return ans\n", "rpython": "MOD: int = 1000003\ndef solve1(x: int, d: int, n: int) -> int:\n    assert 0 <= x and x < MOD\n    assert 0 <= d and d < MOD\n    assert 0 <= n and n < 10 ** 9\n    return product(x + i * d for i in range(n)) % MOD\ndef solve(Q: int, x: List[int], d: List[int], n: List[int]) -> List[int]:\n    assert 1 <= Q and Q <= 100000\n    assert len(x) == Q\n    assert all(0 <= x_i and x_i < MOD for x_i in x)\n    assert len(d) == Q\n    assert all(0 <= d_i and d_i < MOD for d_i in d)\n    assert len(n) == Q\n    assert all(0 <= n_i and n_i < MOD for n_i in n)\n    ans: $17 = [- 1 for _ in range(Q)]\n    for i in range(Q):\n        ans[i]: $18 = solve1(x[i], d[i], n[i])\n    return ans\n", "core": "fun (Q$1391: int) (x$1392: int list) (d$1393: int list) (n$1394: int list) ->\n    assert - Q$1391 + 1 <= 0 && Q$1391 - 100000 <= 0 in\n    assert - Q$1391 + len x$1392 == 0 in\n    assert all (map (fun ($1395: int) ->\n        - $1395 <= 0 && $1395 - 1000003 < 0\n    ) x$1392) in\n    assert - Q$1391 + len d$1393 == 0 in\n    assert all (map (fun ($1396: int) ->\n        - $1396 <= 0 && $1396 - 1000003 < 0\n    ) d$1393) in\n    assert - Q$1391 + len n$1394 == 0 in\n    assert all (map (fun ($1397: int) ->\n        - $1397 <= 0 && $1397 - 1000003 < 0\n    ) n$1394) in\n    map (fun ($1398: int) ->\n        assert - x$1392[$1398] <= 0 && x$1392[$1398] - 1000003 < 0 in\n        assert - d$1393[$1398] <= 0 && d$1393[$1398] - 1000003 < 0 in\n        assert - n$1394[$1398] <= 0 && n$1394[$1398] - 1000000000 < 0 in\n        modproduct (map (fun ($1399: int) ->\n            modplus (modmult ($1399 % 1000003) (d$1393[$1398] % 1000003) 1000003) (x$1392[$1398] % 1000003) 1000003\n        ) (range n$1394[$1398])) 1000003\n    ) (range Q$1391)\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t Q_1400, std::vector<int64_t> x_1401,\n                           std::vector<int64_t> d_1402,\n                           std::vector<int64_t> n_1403) {\n  assert(-Q_1400 + 1ll <= 0ll and Q_1400 - 100000ll <= 0ll);\n  assert(-Q_1400 + int64_t(x_1401.size()) == 0ll);\n  for (int64_t x1404 : x_1401) {\n    assert(-x1404 <= 0ll and x1404 - 1000003ll < 0ll);\n  }\n  assert(-Q_1400 + int64_t(d_1402.size()) == 0ll);\n  for (int64_t x1406 : d_1402) {\n    assert(-x1406 <= 0ll and x1406 - 1000003ll < 0ll);\n  }\n  assert(-Q_1400 + int64_t(n_1403.size()) == 0ll);\n  for (int64_t x1408 : n_1403) {\n    assert(-x1408 <= 0ll and x1408 - 1000003ll < 0ll);\n  }\n  std::vector<int64_t> x1410(Q_1400);\n  for (int32_t i1411 = 0; i1411 < int32_t(Q_1400); ++i1411) {\n    assert(-x_1401[i1411] <= 0ll and x_1401[i1411] - 1000003ll < 0ll);\n    assert(-d_1402[i1411] <= 0ll and d_1402[i1411] - 1000003ll < 0ll);\n    assert(-n_1403[i1411] <= 0ll and n_1403[i1411] - 1000000000ll < 0ll);\n    std::vector<int64_t> x1413(n_1403[i1411]);\n    for (int32_t i1414 = 0; i1414 < int32_t(n_1403[i1411]); ++i1414) {\n      x1413[i1414] = jikka::mod::plus(\n          jikka::mod::mult(jikka::floormod(i1414, 1000003ll),\n                           jikka::floormod(d_1402[i1411], 1000003ll),\n                           1000003ll),\n          jikka::floormod(x_1401[i1411], 1000003ll), 1000003ll);\n    }\n    int64_t x1416 = 1ll;\n    for (int64_t x1417 : x1413) {\n      x1416 = jikka::mod::mult(x1416, x1417, 1000003ll);\n    }\n    x1410[i1411] = x1416;\n  }\n  return x1410;\n}\nint main() {\n  int64_t x1418 = -1ll;\n  int64_t x1419 = -1ll;\n  int64_t x1421 = -1ll;\n  int64_t x1423 = -1ll;\n  std::cin >> x1418;\n  std::cin >> x1419;\n  std::vector<int64_t> x1420(x1419, -1ll);\n  for (int32_t i1425 = 0; i1425 < x1419; ++i1425) {\n    std::cin >> x1420[i1425];\n  }\n  std::cin >> x1421;\n  std::vector<int64_t> x1422(x1421, -1ll);\n  for (int32_t i1426 = 0; i1426 < x1421; ++i1426) {\n    std::cin >> x1422[i1426];\n  }\n  std::cin >> x1423;\n  std::vector<int64_t> x1424(x1423, -1ll);\n  for (int32_t i1427 = 0; i1427 < x1423; ++i1427) {\n    std::cin >> x1424[i1427];\n  }\n  auto x1428 = solve(x1418, x1420, x1422, x1424);\n  std::cout << int32_t(x1428.size()) << ' ';\n  for (int32_t i1429 = 0; i1429 < int32_t(x1428.size()); ++i1429) {\n    std::cout << x1428[i1429] << ' ';\n  }\n}\n"}, {"path": "examples/wip/tle/point_add_range_sum.py", "python": "# https://judge.yosupo.jp/problem/point_add_range_sum\n\nfrom typing import *\n\ndef solve(n: int, q: int, a: List[int], t: List[int], args1: List[int], args2: List[int]) -> List[int]:\n    ans = []\n    for i in range(q):\n        if t[i] == 0:\n            p = args1[i]\n            x = args2[i]\n            a[p] += x\n        else:\n            l = args1[i]\n            r = args2[i]\n            ans.append(sum(a[l:r]))\n    return ans\n\ndef main() -> None:\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    t = list(range(q))\n    args1 = list(range(q))\n    args2 = list(range(q))\n    for i in range(q):\n        t[i], args1[i], args2[i] = map(int, input().split())\n    ans = solve(n, q, a, t, args1, args2)\n    for i in range(len(ans)):\n        print(ans[i])\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, q: int, a: List[int], t: List[int], args1: List[int], args2: List[int]) -> List[int]:\n    ans: $0 = []\n    for i in range(q):\n        if t[i] == 0:\n            p: $3 = args1[i]\n            x: $4 = args2[i]\n            a[p] += x\n        else:\n            l: $5 = args1[i]\n            r: $6 = args2[i]\n            ans.append(sum(a[l:r]))\n    return ans\ndef main() -> None:\n    n, q: $7 = map(int, input().split())\n    a: $8 = list(map(int, input().split()))\n    assert len(a) == n\n    t: $10 = list(range(q))\n    args1: $11 = list(range(q))\n    args2: $12 = list(range(q))\n    for i in range(q):\n        t[i], args1[i], args2[i]: $13 = map(int, input().split())\n    ans: $14 = solve(n, q, a, t, args1, args2)\n    for i in range(len(ans)):\n        print(ans[i])\n", "core": "const (fun (q$1542: int) (a$1543: int list) (t$1544: int list) (args1$1545: int list) (args2$1546: int list) ->\n    (foldl (fun ($1547: int list * int list) ($1548: int) ->\n        let $1552: int list * int list = if t$1544[$1548] == 0 then ($1547.0[args1$1545[$1548] <- args2$1546[$1548] + $1547.0[args1$1545[$1548]]], $1547.1) else ($1547.0, snoc $1547.1 (let $1551: int list = scanl (fun ($1549: int) ($1550: int) ->\n            $1549 + $1550\n        ) 0 $1547.0\n        in - $1551[args1$1545[$1548]] + $1551[args2$1546[$1548]]))\n        in ($1552.0, $1552.1)\n    ) (a$1543, nil) (range q$1542)).1\n)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_1553, int64_t q_1554,\n                           std::vector<int64_t> a_1555,\n                           std::vector<int64_t> t_1556,\n                           std::vector<int64_t> args_1557,\n                           std::vector<int64_t> args_1558) {\n  std::vector<int64_t> x_1572;\n  for (int32_t x1560 = 0; x1560 < q_1554; ++x1560) {\n    std::array<std::vector<int64_t>, 2> x1570;\n    if (t_1556[x1560] == 0ll) {\n      std::vector<int64_t> a_1575 = a_1555;\n      a_1575[args_1557[x1560]] = args_1558[x1560] + a_1555[args_1557[x1560]];\n      x1570 = std::array<std::vector<int64_t>, 2>{a_1575, x_1572};\n    } else {\n      std::vector<int64_t> x1565(a_1555.size() + 1);\n      x1565[0] = 0ll;\n      for (int32_t i1566 = 0; i1566 < int32_t(a_1555.size()); ++i1566) {\n        x1565[i1566 + 1] = x1565[i1566] + a_1555[i1566];\n      }\n      std::vector<int64_t> x1569 = x_1572;\n      x1569.push_back(-x1565[args_1557[x1560]] + x1565[args_1558[x1560]]);\n      x1570 = std::array<std::vector<int64_t>, 2>{a_1555, x1569};\n    }\n    std::vector<int64_t> x1573 = x1570[0];\n    std::vector<int64_t> x1574 = x1570[1];\n    a_1555 = x1573;\n    x_1572 = x1574;\n  }\n  return x_1572;\n}\nint main() {\n  int64_t n_1576 = -1ll;\n  int64_t q_1577 = -1ll;\n  std::cin >> n_1576;\n  std::vector<int64_t> a_1578(n_1576, -1ll);\n  std::cin >> q_1577;\n  std::vector<int64_t> t_1579(q_1577, -1ll);\n  std::vector<int64_t> args_1580(q_1577, -1ll);\n  std::vector<int64_t> args_1581(q_1577, -1ll);\n  for (int32_t i1582 = 0; i1582 < n_1576; ++i1582) {\n    std::cin >> a_1578[i1582];\n  }\n  for (int32_t i_1583 = 0; i_1583 < q_1577; ++i_1583) {\n    std::cin >> t_1579[i_1583];\n    std::cin >> args_1580[i_1583];\n    std::cin >> args_1581[i_1583];\n  }\n  auto ans_1584 = solve(n_1576, q_1577, a_1578, t_1579, args_1580, args_1581);\n  for (int32_t i_1585 = 0; i_1585 < int32_t(ans_1584.size()); ++i_1585) {\n    std::cout << ans_1584[i_1585] << ' ';\n    std::cout << '\\n' << ' ';\n  }\n}\n"}, {"path": "examples/wip/tle/yukicoder_1618.py", "python": "# https://yukicoder.me/problems/no/1618\nfrom typing import *\n\n\ndef solve(n: int, a: List[int], b: List[int]) -> List[int]:\n    c = [0 for _ in range(2 * n)]\n    for i in range(n):\n        for j in range(n):\n            c[i + j + 1] += (i + 1) * a[j] + (j + 1) * b[i]\n    return c\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == n\n    ans = solve(n, a, b)\n    print(*ans)\n\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, a: List[int], b: List[int]) -> List[int]:\n    c: $0 = [0 for _ in range(2 * n)]\n    for i in range(n):\n        for j in range(n):\n            c[i + j + 1] += i + 1 * a[j] + j + 1 * b[i]\n    return c\ndef main() -> $7:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    b: $4 = list(map(int, input().split()))\n    assert len(b) == n\n    ans: $6 = solve(n, a, b)\n    print(*ans)\n", "core": "fun (n$1039: int) (a$1040: int list) (b$1041: int list) ->\n    foldl (fun ($1042: int list) ($1043: int) ->\n        foldl (fun ($1044: int list) ($1045: int) ->\n            $1044[$1043 + $1045 + 1 <- $1043 * a$1040[$1045] + $1045 * b$1041[$1043] + $1044[$1043 + $1045 + 1] + a$1040[$1045] + b$1041[$1043]]\n        ) $1042 (range n$1039)\n    ) (replicate (n$1039 * 2) 0) (range n$1039)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_1047, std::vector<int64_t> a_1048,\n                           std::vector<int64_t> b_1049) {\n  std::vector<int64_t> x1050(n_1047 * 2ll, 0ll);\n  for (int32_t x1052 = 0; x1052 < n_1047; ++x1052) {\n    for (int32_t x1056 = 0; x1056 < n_1047; ++x1056) {\n      x1050[x1052 + x1056 + 1ll] =\n          x1052 * a_1048[x1056] + x1056 * b_1049[x1052] +\n          x1050[x1052 + x1056 + 1ll] + a_1048[x1056] + b_1049[x1052];\n    }\n  }\n  return x1050;\n}\nint main() {\n  int64_t n_1059 = -1ll;\n  std::cin >> n_1059;\n  std::vector<int64_t> a_1060(n_1059, -1ll);\n  std::vector<int64_t> b_1061(n_1059, -1ll);\n  for (int32_t i1062 = 0; i1062 < n_1059; ++i1062) {\n    std::cin >> a_1060[i1062];\n  }\n  for (int32_t i1063 = 0; i1063 < n_1059; ++i1063) {\n    std::cin >> b_1061[i1063];\n  }\n  auto ans_1064 = solve(n_1059, a_1060, b_1061);\n  for (int32_t i1065 = 0; i1065 < int32_t(ans_1064.size()); ++i1065) {\n    std::cout << ans_1064[i1065] << ' ';\n  }\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/wip/tle/yukicoder_1649.py", "python": "# https://yukicoder.me/problems/no/1649\nfrom typing import *\n\nMOD = 998244353\n\n\ndef solve(N: int, x: List[int], y: List[int]) -> int:\n    ans = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            ans += (abs(x[i] - x[j]) + abs(y[i] - y[j])) ** 2\n    return ans % MOD\n\n\n# generated by oj-template v4.8.0 (https://github.com/online-judge-tools/template-generator)\ndef main():\n    N = int(input())\n    x = list(range(N))\n    y = list(range(N))\n    for i in range(N):\n        x[i], y[i] = map(int, input().split())\n    ans = solve(N, x, y)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "rpython": "MOD: $0 = 998244353\ndef solve(N: int, x: List[int], y: List[int]) -> int:\n    ans: $1 = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            ans += abs(x[i] - x[j]) + abs(y[i] - y[j]) ** 2\n    return ans % MOD\ndef main() -> $7:\n    N: $2 = int(input())\n    x: $3 = list(range(N))\n    y: $4 = list(range(N))\n    for i in range(N):\n        x[i], y[i]: $5 = map(int, input().split())\n    ans: $6 = solve(N, x, y)\n    print(ans)\n", "core": "fun (N$1062: int) (x$1063: int list) (y$1064: int list) ->\n    foldl (fun ($1065: int) ($1066: int) ->\n        if range (- $1066 + N$1062 - 1) == nil then $1065 else modplus (modplus (modplus ($1065 % 998244353) (modsum (map (fun ($1067: int) ->\n            modmult (abs (x$1063[$1066] - x$1063[$1066 + $1067 + 1]) % 998244353) (abs (x$1063[$1066] - x$1063[$1066 + $1067 + 1]) % 998244353) 998244353\n        ) (range (- $1066 + N$1062 - 1))) 998244353) 998244353) (modmult (modsum (map (fun ($1068: int) ->\n            modmult (abs (x$1063[$1066] - x$1063[$1066 + $1068 + 1]) % 998244353) (abs (y$1064[$1066] - y$1064[$1066 + $1068 + 1]) % 998244353) 998244353\n        ) (range (- $1066 + N$1062 - 1))) 998244353) 2 998244353) 998244353) (modsum (map (fun ($1069: int) ->\n            modmult (abs (y$1064[$1066] - y$1064[$1066 + $1069 + 1]) % 998244353) (abs (y$1064[$1066] - y$1064[$1066 + $1069 + 1]) % 998244353) 998244353\n        ) (range (- $1066 + N$1062 - 1))) 998244353) 998244353\n    ) 0 (range (N$1062 - 1))\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include \"jikka/range.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t N_1070, std::vector<int64_t> x_1071,\n              std::vector<int64_t> y_1072) {\n  int64_t x1073 = 0ll;\n  for (int32_t x1074 = 0; x1074 < N_1070 - 1ll; ++x1074) {\n    int64_t x1092;\n    if (jikka::range(-x1074 + N_1070 - 1ll) == std::vector<int64_t>()) {\n      x1092 = x1073;\n    } else {\n      std::vector<int64_t> x1077(-x1074 + N_1070 - 1ll);\n      for (int32_t i1078 = 0; i1078 < int32_t(-x1074 + N_1070 - 1ll); ++i1078) {\n        x1077[i1078] = jikka::mod::mult(\n            jikka::floormod(\n                std::abs(x_1071[x1074] - x_1071[x1074 + i1078 + 1ll]),\n                998244353ll),\n            jikka::floormod(\n                std::abs(x_1071[x1074] - x_1071[x1074 + i1078 + 1ll]),\n                998244353ll),\n            998244353ll);\n      }\n      int64_t x1080 = 0ll;\n      for (int64_t x1081 : x1077) {\n        x1080 += jikka::floormod(x1081, 998244353ll);\n      }\n      std::vector<int64_t> x1082(-x1074 + N_1070 - 1ll);\n      for (int32_t i1083 = 0; i1083 < int32_t(-x1074 + N_1070 - 1ll); ++i1083) {\n        x1082[i1083] = jikka::mod::mult(\n            jikka::floormod(\n                std::abs(x_1071[x1074] - x_1071[x1074 + i1083 + 1ll]),\n                998244353ll),\n            jikka::floormod(\n                std::abs(y_1072[x1074] - y_1072[x1074 + i1083 + 1ll]),\n                998244353ll),\n            998244353ll);\n      }\n      int64_t x1085 = 0ll;\n      for (int64_t x1086 : x1082) {\n        x1085 += jikka::floormod(x1086, 998244353ll);\n      }\n      std::vector<int64_t> x1087(-x1074 + N_1070 - 1ll);\n      for (int32_t i1088 = 0; i1088 < int32_t(-x1074 + N_1070 - 1ll); ++i1088) {\n        x1087[i1088] = jikka::mod::mult(\n            jikka::floormod(\n                std::abs(y_1072[x1074] - y_1072[x1074 + i1088 + 1ll]),\n                998244353ll),\n            jikka::floormod(\n                std::abs(y_1072[x1074] - y_1072[x1074 + i1088 + 1ll]),\n                998244353ll),\n            998244353ll);\n      }\n      int64_t x1090 = 0ll;\n      for (int64_t x1091 : x1087) {\n        x1090 += jikka::floormod(x1091, 998244353ll);\n      }\n      x1092 = jikka::mod::plus(\n          jikka::mod::plus(jikka::mod::plus(jikka::floormod(x1073, 998244353ll),\n                                            jikka::floormod(x1080, 998244353ll),\n                                            998244353ll),\n                           jikka::mod::mult(jikka::floormod(x1085, 998244353ll),\n                                            2ll, 998244353ll),\n                           998244353ll),\n          jikka::floormod(x1090, 998244353ll), 998244353ll);\n    }\n    x1073 = x1092;\n  }\n  return x1073;\n}\nint main() {\n  int64_t N_1093 = -1ll;\n  std::cin >> N_1093;\n  std::vector<int64_t> x_1094(N_1093, -1ll);\n  std::vector<int64_t> y_1095(N_1093, -1ll);\n  for (int32_t i_1096 = 0; i_1096 < N_1093; ++i_1096) {\n    std::cin >> x_1094[i_1096];\n    std::cin >> y_1095[i_1096];\n  }\n  auto ans_1097 = solve(N_1093, x_1094, y_1095);\n  std::cout << ans_1097 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}], "errors": [{"path": "examples/errors/toplevel_expr_statements.py", "python": "if __name__ == '__main__':  # err\n    a = int(input())\n    print(a ** 2)\n", "error": "Semantic Error (line 1 column 1) (user's mistake?): Failed at Jikka.Python.Convert.ToplevelDecl: only `if __name__ == \"__main__\": main()' is allowed for if statements at toplevel\n1 |if __name__ == '__main__':  # err\n   ^^\n2 |    a = int(input())\n"}, {"path": "examples/errors/type_errors.py", "python": "def solve(n: int) -> bool:\n    a = n + True  # err\n    b = 2 * n\n    return b  # err\n", "error": "Type Error (line 2 column 13) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type int and type bool: type int is not type bool\n1 |def solve(n: int) -> bool:\n2 |    a = n + True  # err\n               ^^^^\n3 |    b = 2 * n\n\nType Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type bool and type int: type bool is not type int\n3 |    b = 2 * n\n4 |    return b  # err\n              ^\n"}, {"path": "examples/errors/undefined_identifiers.py", "python": "def solve(x: int) -> int:\n    x = y  # err\n    z = x + 1\n    return y  # err\n", "error": "Symbol Error (line 2 column 9) (user's mistake?): Jikka.RestrictedPython.Convert.Alpha: undefined identifier: y\n1 |def solve(x: int) -> int:\n2 |    x = y  # err\n           ^\n3 |    z = x + 1\n\nSymbol Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.Alpha: undefined identifier: y\n3 |    z = x + 1\n4 |    return y  # err\n              ^\n"}]}