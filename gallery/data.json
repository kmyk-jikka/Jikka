{"examples": [{"path": "examples/abc127_e.py", "python": "# https://atcoder.jp/contests/abc127/tasks/abc127_e\n\nMOD: int = 10 ** 9 + 7\n\ndef solve(h: int, w: int, k: int) -> int:\n    ans = 0\n    for y1 in range(h):\n        for x1 in range(w):\n            for y2 in range(h):\n                for x2 in range(w):\n                    if (y1, x1) < (y2, x2):\n                        ans += jikka.choose(h * w - 2, k - 2) * (abs(y2 - y1) + abs(x2 - x1))\n    return ans % MOD\n\ndef main() -> None:\n    n, m, k = map(int, input().split())\n    ans = solve(n, m, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "MOD: int = 10 ** 9 + 7\ndef solve(h$58: int, w$59: int, k$60: int) -> int:\n    ans$61: int = 0\n    for y1$62 in range(h$58):\n        for x1$63 in range(w$59):\n            for y2$64 in range(h$58):\n                for x2$65 in range(w$59):\n                    if (y1$62, x1$63) < (y2$64, x2$65):\n                        ans$61 += choose(h$58 * w$59 - 2, k$60 - 2) * abs(y2$64 - y1$62) + abs(x2$65 - x1$63)\n    return ans$61 % MOD\n", "core": "fun (h$1418: int) (w$1419: int) (k$1420: int) ->\n    foldl((fun ($1421: int) ($1422: int) ->\n        foldl((fun ($1423: int) ($1424: int) ->\n            foldl((fun ($1425: int) ($1426: int) ->\n                foldl((fun ($1427: int) ($1428: int) ->\n                    if ($1422, $1424) < ($1426, $1428) then $1427 + - $1422 + $1426 >? $1422 - $1426 * choose(h$1418 * w$1419 - 2, k$1420 - 2) + - $1424 + $1428 >? $1424 - $1428 * choose(h$1418 * w$1419 - 2, k$1420 - 2) else $1427\n                ), $1425, range(w$1419))\n            ), $1423, range(h$1418))\n        ), $1421, range(w$1419))\n    ), 0, range(h$1418)) % 1000000007\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/not_modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t h_0, int64_t w_1, int64_t k_2) {\n  int64_t x3 = 0;\n  for (int32_t x4 = 0; x4 < h_0; ++x4) {\n    for (int32_t x8 = 0; x8 < w_1; ++x8) {\n      for (int32_t x12 = 0; x12 < h_0; ++x12) {\n        for (int32_t x16 = 0; x16 < w_1; ++x16) {\n          x3 = std::array<int64_t, 2>{x4, x8} < std::array<int64_t, 2>{x12, x16}\n                   ? x3 +\n                         std::max<int64_t>(-x4 + x12, x4 - x12) *\n                             jikka::notmod::choose(h_0 * w_1 - 2, k_2 - 2) +\n                         std::max<int64_t>(-x8 + x16, x8 - x16) *\n                             jikka::notmod::choose(h_0 * w_1 - 2, k_2 - 2)\n                   : x3;\n        }\n      }\n    }\n  }\n  return jikka::floormod(x3, 1000000007);\n}\nint main() {\n  int64_t n_19 = -1;\n  int64_t m_20 = -1;\n  int64_t k_21 = -1;\n  std::cin >> n_19;\n  std::cin >> m_20;\n  std::cin >> k_21;\n  auto ans_22 = solve(n_19, m_20, k_21);\n  std::cout << ans_22 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc134_c.py", "python": "# https://atcoder.jp/contests/abc134/tasks/abc134_c\nfrom typing import *\n\ndef solve(N: int, A: List[int]) -> List[int]:\n    # assert 2 <= N <= 200000\n    # assert len(A) == N\n    # assert all(0 <= A_i <= 200000 for A_i in A)\n\n    ans = [-1 for _ in range(N)]\n    for i in range(N):\n        ans[i] = max((0 if j == i else A[j]) for j in range(N))\n    return ans\n", "rpython": "def solve(N$36: int, A$37: List[int]) -> List[int]:\n    ans$39: List[int] = [- 1 for $38 in range(N$36)]\n    for i$40 in range(N$36):\n        ans$39[i$40]: int = max(0 if j$41 == i$40 else A$37[j$41] for j$41 in range(N$36))\n    return ans$39\n", "core": "fun (N$566: int) (A$567: int list) ->\n    map((fun ($568: int) ->\n        max(map((fun ($569: int) ->\n            if - $568 + $569 == 0 then 0 else A$567[$569]\n        ), range(N$566)))\n    ), range(N$566))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t N_0, std::vector<int64_t> A_1) {\n  std::vector<int64_t> x2(N_0);\n  for (int32_t i3 = 0; i3 < int32_t(N_0); ++i3) {\n    std::vector<int64_t> x5(N_0);\n    for (int32_t i6 = 0; i6 < int32_t(N_0); ++i6) {\n      x5[i6] = -i3 + i6 == 0 ? 0 : A_1[i6];\n    }\n    int64_t x8 = *std::max_element(x5.begin(), x5.end());\n    x2[i3] = x8;\n  }\n  return x2;\n}\nint main() {\n  int64_t x9 = -1;\n  int64_t x10 = -1;\n  std::cin >> x9;\n  std::cin >> x10;\n  std::vector<int64_t> x11(x10, -1);\n  for (int32_t i12 = 0; i12 < x10; ++i12) {\n    std::cin >> x11[i12];\n  }\n  auto x13 = solve(x9, x11);\n  std::cout << int32_t(x13.size()) << ' ';\n  for (int32_t i14 = 0; i14 < int32_t(x13.size()); ++i14) {\n    std::cout << x13[i14] << ' ';\n  }\n}\n"}, {"path": "examples/codefestival_2015_final_d.py", "python": "# https://atcoder.jp/contests/code-festival-2015-final-open/tasks/codefestival_2015_final_d\nfrom typing import *\n\ndef solve(n: int, s: List[int], t: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert len(s) == n\n    assert len(t) == n\n    ans = n\n    for i in range(n):\n        ans_i = max(sum((1 if s[j] <= x < t[j] else 0) for j in range(n) if j != i) for x in range(max(t)))\n        ans = min(ans, ans_i)\n    return ans\n", "rpython": "def solve(n$69: int, s$70: List[int], t$71: List[int]) -> int:\n    assert 2 <= n$69 and n$69 <= 10 ** 5\n    assert len(s$70) == n$69\n    assert len(t$71) == n$69\n    ans$72: int = n$69\n    for i$73 in range(n$69):\n        ans_i$76: int = max(sum(1 if s$70[j$75] <= x$74 and x$74 < t$71[j$75] else 0 for j$75 in range(n$69) if j$75 != i$73) for x$74 in range(max(t$71)))\n        ans$72: int = min(ans$72, ans_i$76)\n    return ans$72\n", "core": "fun (n$942: int) (s$943: int list) (t$944: int list) ->\n    min(cons(n$942, map((fun ($945: int) ->\n        max(map((fun ($946: int) ->\n            sum(map((fun ($947: int) ->\n                if - $946 + s$943[$947] <= 0 and $946 - t$944[$947] < 0 then 1 else 0\n            ), filter((fun ($948: int) ->\n                not - $945 + $948 == 0\n            ), range(n$942))))\n        ), range(max(t$944))))\n    ), range(n$942))))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, std::vector<int64_t> s_1, std::vector<int64_t> t_2) {\n  std::vector<int64_t> x3(n_0);\n  for (int32_t i4 = 0; i4 < int32_t(n_0); ++i4) {\n    int64_t x7 = *std::max_element(t_2.begin(), t_2.end());\n    std::vector<int64_t> x6(x7);\n    for (int32_t i8 = 0; i8 < int32_t(x7); ++i8) {\n      std::vector<int64_t> x11;\n      for (int32_t x12 = 0; x12 < n_0; ++x12) {\n        if (not(-i4 + x12 == 0)) {\n          x11.push_back(x12);\n        }\n      }\n      std::vector<int64_t> x10(x11.size());\n      for (int32_t i14 = 0; i14 < int32_t(x11.size()); ++i14) {\n        x10[i14] = -i8 + s_1[x11[i14]] <= 0 and i8 - t_2[x11[i14]] < 0 ? 1 : 0;\n      }\n      int64_t x16 = std::accumulate(x10.begin(), x10.end(), 0);\n      x6[i8] = x16;\n    }\n    int64_t x17 = *std::max_element(x6.begin(), x6.end());\n    x3[i4] = x17;\n  }\n  std::vector<int64_t> x18;\n  x18.push_back(n_0);\n  x18.insert(x18.end(), x3.begin(), x3.end());\n  int64_t x19 = *std::min_element(x18.begin(), x18.end());\n  return x19;\n}\nint main() {\n  int64_t x20 = -1;\n  int64_t x21 = -1;\n  int64_t x23 = -1;\n  std::cin >> x20;\n  std::cin >> x21;\n  std::vector<int64_t> x22(x21, -1);\n  for (int32_t i25 = 0; i25 < x21; ++i25) {\n    std::cin >> x22[i25];\n  }\n  std::cin >> x23;\n  std::vector<int64_t> x24(x23, -1);\n  for (int32_t i26 = 0; i26 < x23; ++i26) {\n    std::cin >> x24[i26];\n  }\n  auto x27 = solve(x20, x22, x24);\n  std::cout << x27 << ' ';\n}\n"}, {"path": "examples/dp_a.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_a\nfrom typing import *\n\ndef solve(n: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 4 for h_i in h)\n\n    dp = [-1 for _ in range(n)]\n    dp[0] = 0\n    dp[1] = abs(h[1] - h[0])\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2]))\n    return dp[n - 1]\n\ndef main() -> None:\n    n = int(input())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n$91: int, h$92: List[int]) -> int:\n    assert 2 <= n$91 and n$91 <= 10 ** 5\n    assert len(h$92) == n$91\n    assert all(1 <= h_i$93 and h_i$93 <= 10 ** 4 for h_i$93 in h$92)\n    dp$95: List[int] = [- 1 for $94 in range(n$91)]\n    dp$95[0]: int = 0\n    dp$95[1]: int = abs(h$92[1] - h$92[0])\n    for i$96 in range(2, n$91):\n        dp$95[i$96]: int = min(dp$95[i$96 - 1] + abs(h$92[i$96] - h$92[i$96 - 1]), dp$95[i$96 - 2] + abs(h$92[i$96] - h$92[i$96 - 2]))\n    return dp$95[n$91 - 1]\n", "core": "fun (n$777: int) (h$778: int list) ->\n    if n$777 - 1 == 0 then 0 else scanl((fun ($779: int * int) ($780: int) ->\n        ($779.1, $779.1 + - h$778[$780 + 1] + h$778[$780 + 2] >? h$778[$780 + 1] - h$778[$780 + 2] <? $779.0 + - h$778[$780] + h$778[$780 + 2] >? h$778[$780] - h$778[$780 + 2])\n    ), (0, - h$778[0] + h$778[1] >? h$778[0] - h$778[1]), range(n$777 - 2))[n$777 - 2].1\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, std::vector<int64_t> h_1) {\n  int64_t x6;\n  if (n_0 - 1 == 0) {\n    x6 = 0;\n  } else {\n    std::vector<std::array<int64_t, 2>> x2(n_0 - 2 + 1);\n    x2[0] = std::array<int64_t, 2>{\n        0, std::max<int64_t>(-h_1[0] + h_1[1], h_1[0] - h_1[1])};\n    for (int32_t i3 = 0; i3 < int32_t(n_0 - 2); ++i3) {\n      x2[i3 + 1] = std::array<int64_t, 2>{\n          x2[i3][1],\n          std::min<int64_t>(\n              x2[i3][1] + std::max<int64_t>(-h_1[i3 + 1] + h_1[i3 + 2],\n                                            h_1[i3 + 1] - h_1[i3 + 2]),\n              x2[i3][0] + std::max<int64_t>(-h_1[i3] + h_1[i3 + 2],\n                                            h_1[i3] - h_1[i3 + 2]))};\n    }\n    x6 = x2[n_0 - 2][1];\n  }\n  return x6;\n}\nint main() {\n  int64_t n_7 = -1;\n  std::cin >> n_7;\n  std::vector<int64_t> h_8(n_7, -1);\n  for (int32_t i9 = 0; i9 < n_7; ++i9) {\n    std::cin >> h_8[i9];\n  }\n  auto ans_10 = solve(n_7, h_8);\n  std::cout << ans_10 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_b.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_b\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, k: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert 1 <= k <= 100\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 4 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(max(0, i - k), i):\n            dp[i] = min(dp[i], dp[j] + abs(h[i] - h[j]))\n    return dp[n - 1]\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, k, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: int = 10 ** 18\ndef solve(n$96: int, k$97: int, h$98: List[int]) -> int:\n    assert 2 <= n$96 and n$96 <= 10 ** 5\n    assert 1 <= k$97 and k$97 <= 100\n    assert len(h$98) == n$96\n    assert all(1 <= h_i$99 and h_i$99 <= 10 ** 4 for h_i$99 in h$98)\n    dp$101: List[int] = [INF for $100 in range(n$96)]\n    dp$101[0]: int = 0\n    for i$102 in range(1, n$96):\n        for j$103 in range(max(0, i$102 - k$97), i$102):\n            dp$101[i$102]: int = min(dp$101[i$102], dp$101[j$103] + abs(h$98[i$102] - h$98[j$103]))\n    return dp$101[n$96 - 1]\n", "core": "fun (n$1228: int) (k$1229: int) (h$1230: int list) ->\n    foldl((fun ($1231: int list) ($1232: int) ->\n        foldl((fun ($1233: int list) ($1234: int) ->\n            $1233[$1232 + 1 := $1233[$1232 + 1] <? h$1230[$1232 + 1] - h$1230[$1234 + 0 >? $1232 - k$1229 + 1] >? - h$1230[$1232 + 1] + h$1230[$1234 + 0 >? $1232 - k$1229 + 1] + $1233[$1234 + 0 >? $1232 - k$1229 + 1]]\n        ), $1231, range($1232 - 0 >? $1232 - k$1229 + 1 + 1))\n    ), replicate(n$1228, 1000000000000000000)[0 := 0], range(n$1228 - 1))[n$1228 - 1]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, int64_t k_1, std::vector<int64_t> h_2) {\n  std::vector<int64_t> x3(n_0, 1000000000000000000ll);\n  x3[0] = 0;\n  for (int32_t x6 = 0; x6 < n_0 - 1; ++x6) {\n    for (int32_t x10 = 0; x10 < x6 - std::max<int64_t>(0, x6 - k_1 + 1) + 1;\n         ++x10) {\n      x3[x6 + 1] = std::min<int64_t>(\n          x3[x6 + 1],\n          std::max<int64_t>(\n              h_2[x6 + 1] - h_2[x10 + std::max<int64_t>(0, x6 - k_1 + 1)],\n              -h_2[x6 + 1] + h_2[x10 + std::max<int64_t>(0, x6 - k_1 + 1)]) +\n              x3[x10 + std::max<int64_t>(0, x6 - k_1 + 1)]);\n    }\n  }\n  return x3[n_0 - 1];\n}\nint main() {\n  int64_t n_14 = -1;\n  int64_t k_15 = -1;\n  std::cin >> n_14;\n  std::vector<int64_t> h_16(n_14, -1);\n  std::cin >> k_15;\n  for (int32_t i17 = 0; i17 < n_14; ++i17) {\n    std::cin >> h_16[i17];\n  }\n  auto ans_18 = solve(n_14, k_15, h_16);\n  std::cout << ans_18 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_c.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_c\nfrom typing import *\n\ndef solve(n: int, a: List[int], b: List[int], c: List[int]) -> int:\n    assert 1 <= n <= 10 ** 5\n    assert len(a) == n\n    assert len(b) == n\n    assert len(c) == n\n    assert all(1 <= a_i <= 10 ** 4 for a_i in a)\n    assert all(1 <= b_i <= 10 ** 4 for b_i in b)\n    assert all(1 <= c_i <= 10 ** 4 for c_i in c)\n\n    dp_a = [-1 for _ in range(n + 1)]\n    dp_b = [-1 for _ in range(n + 1)]\n    dp_c = [-1 for _ in range(n + 1)]\n    dp_a[0] = 0\n    dp_b[0] = 0\n    dp_c[0] = 0\n    for i in range(n):\n        dp_a[i + 1] = a[i] + max(dp_b[i], dp_c[i])\n        dp_b[i + 1] = b[i] + max(dp_c[i], dp_a[i])\n        dp_c[i + 1] = c[i] + max(dp_a[i], dp_b[i])\n    return max([dp_a[n], dp_b[n], dp_c[n]])\n\ndef main() -> None:\n    n = int(input())\n    a = list(range(n))\n    b = list(range(n))\n    c = list(range(n))\n    for i in range(n):\n        a[i], b[i], c[i] = map(int, input().split())\n    ans = solve(n, a, b, c)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n$172: int, a$173: List[int], b$174: List[int], c$175: List[int]) -> int:\n    assert 1 <= n$172 and n$172 <= 10 ** 5\n    assert len(a$173) == n$172\n    assert len(b$174) == n$172\n    assert len(c$175) == n$172\n    assert all(1 <= a_i$176 and a_i$176 <= 10 ** 4 for a_i$176 in a$173)\n    assert all(1 <= b_i$177 and b_i$177 <= 10 ** 4 for b_i$177 in b$174)\n    assert all(1 <= c_i$178 and c_i$178 <= 10 ** 4 for c_i$178 in c$175)\n    dp_a$180: List[int] = [- 1 for $179 in range(n$172 + 1)]\n    dp_b$182: List[int] = [- 1 for $181 in range(n$172 + 1)]\n    dp_c$184: List[int] = [- 1 for $183 in range(n$172 + 1)]\n    dp_a$180[0]: int = 0\n    dp_b$182[0]: int = 0\n    dp_c$184[0]: int = 0\n    for i$185 in range(n$172):\n        dp_a$180[i$185 + 1]: int = a$173[i$185] + max(dp_b$182[i$185], dp_c$184[i$185])\n        dp_b$182[i$185 + 1]: int = b$174[i$185] + max(dp_c$184[i$185], dp_a$180[i$185])\n        dp_c$184[i$185 + 1]: int = c$175[i$185] + max(dp_a$180[i$185], dp_b$182[i$185])\n    return max([dp_a$180[n$172], dp_b$182[n$172], dp_c$184[n$172]])\n", "core": "fun (n$1714: int) (a$1715: int list) (b$1716: int list) (c$1717: int list) ->\n    let $1725: int list * int list * int list =\n        foldl((fun ($1718: int list * int list * int list) ($1719: int) ->\n            let dp_a$1720: int list =\n                $1718.2[$1719 + 1 := $1718.1[$1719] >? $1718.0[$1719] + a$1715[$1719]]\n            in let dp_b$1721: int list =\n                $1718.1[$1719 + 1 := $1718.0[$1719] >? dp_a$1720[$1719] + b$1716[$1719]]\n            in ($1718.0[$1719 + 1 := dp_a$1720[$1719] >? dp_b$1721[$1719] + c$1717[$1719]], dp_b$1721, dp_a$1720)\n        ), (replicate(n$1714 + 1, -1)[0 := 0], replicate(n$1714 + 1, -1)[0 := 0], replicate(n$1714 + 1, -1)[0 := 0]), range(n$1714))\n    in $1725.2[n$1714] >? $1725.1[n$1714] >? $1725.0[n$1714]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, std::vector<int64_t> a_1, std::vector<int64_t> b_2,\n              std::vector<int64_t> c_3) {\n  std::vector<int64_t> x5(n_0 + 1, -1);\n  x5[0] = 0;\n  std::vector<int64_t> x7(n_0 + 1, -1);\n  x7[0] = 0;\n  std::vector<int64_t> x9(n_0 + 1, -1);\n  x9[0] = 0;\n  for (int32_t x12 = 0; x12 < n_0; ++x12) {\n    x9[x12 + 1] = std::max<int64_t>(x7[x12], x5[x12]) + a_1[x12];\n    x7[x12 + 1] = std::max<int64_t>(x5[x12], x9[x12]) + b_2[x12];\n    x5[x12 + 1] = std::max<int64_t>(x9[x12], x7[x12]) + c_3[x12];\n  }\n  return std::max<int64_t>(x9[n_0], std::max<int64_t>(x7[n_0], x5[n_0]));\n}\nint main() {\n  int64_t n_26 = -1;\n  std::cin >> n_26;\n  std::vector<int64_t> a_27(n_26, -1);\n  std::vector<int64_t> b_28(n_26, -1);\n  std::vector<int64_t> c_29(n_26, -1);\n  for (int32_t i_30 = 0; i_30 < n_26; ++i_30) {\n    std::cin >> a_27[i_30];\n    std::cin >> b_28[i_30];\n    std::cin >> c_29[i_30];\n  }\n  auto ans_31 = solve(n_26, a_27, b_28, c_29);\n  std::cout << ans_31 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_q.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_q\nfrom typing import *\n\ndef solve(n: int, h: List[int], a: List[int]) -> int:\n    assert 1 <= n <= 2 * 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i <= n for h_i in h)\n    assert len(a) == n\n    assert all(1 <= a_i <= 10 ** 9 for a_i in a)\n\n    dp = [0 for _ in range(n)]\n    for i in range(n):\n        b = 0\n        for j in range(h[i]):\n            b = max(b, dp[j])\n        dp[h[i] - 1] = b + a[i]\n    return max(dp)\n\ndef main() -> None:\n    n = int(input())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(n, h, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n$109: int, h$110: List[int], a$111: List[int]) -> int:\n    assert 1 <= n$109 and n$109 <= 2 * 10 ** 5\n    assert len(h$110) == n$109\n    assert all(1 <= h_i$112 and h_i$112 <= n$109 for h_i$112 in h$110)\n    assert len(a$111) == n$109\n    assert all(1 <= a_i$113 and a_i$113 <= 10 ** 9 for a_i$113 in a$111)\n    dp$115: List[int] = [0 for $114 in range(n$109)]\n    for i$116 in range(n$109):\n        b$117: int = 0\n        for j$118 in range(h$110[i$116]):\n            b$117: int = max(b$117, dp$115[j$118])\n        dp$115[h$110[i$116] - 1]: int = b$117 + a$111[i$116]\n    return max(dp$115)\n", "core": "fun (n$1094: int) (h$1095: int list) (a$1096: int list) ->\n    max((let $1098: int list =\n        replicate(n$1094, 0)\n    in foldl((fun ($1099: int list * segment-tree<int.max>) ($1100: int) ->\n        let $1101: int list =\n            $1099.0[h$1095[$1100] - 1 := 0 >? segtree.getrange($1099.1, 0, h$1095[$1100]) + a$1096[$1100]]\n        in ($1101, segtree.setpoint($1099.1, h$1095[$1100] - 1, $1101[h$1095[$1100] - 1]))\n    ), ($1098, segtree.initlist($1098)), range(n$1094)).0))\n", "cxx": "#include \"jikka/segment_tree.hpp\"\n#include <algorithm>\n#include <array>\n#include <atcoder/segtree>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, std::vector<int64_t> h_1, std::vector<int64_t> a_2) {\n  std::vector<int64_t> x4(n_0, 0);\n  atcoder::segtree<int64_t, jikka::max_int64_t, jikka::const_int64_min> x5_13(\n      x4);\n  for (int32_t x6 = 0; x6 < n_0; ++x6) {\n    x4[h_1[x6] - 1] = std::max<int64_t>(0, x5_13.prod(0, h_1[x6])) + a_2[x6];\n    x5_13.set(h_1[x6] - 1, x4[h_1[x6] - 1]);\n  }\n  int64_t x11 = *std::max_element(x4.begin(), x4.end());\n  return x11;\n}\nint main() {\n  int64_t n_14 = -1;\n  std::cin >> n_14;\n  std::vector<int64_t> h_15(n_14, -1);\n  std::vector<int64_t> a_16(n_14, -1);\n  for (int32_t i17 = 0; i17 < n_14; ++i17) {\n    std::cin >> h_15[i17];\n  }\n  for (int32_t i18 = 0; i18 < n_14; ++i18) {\n    std::cin >> a_16[i18];\n  }\n  auto ans_19 = solve(n_14, h_15, a_16);\n  std::cout << ans_19 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_z-kubaru.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_z\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert 1 <= c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 6 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = min(dp[j], dp[i] + (h[i] - h[j]) ** 2 + c)\n    return dp[n - 1]\n\ndef main() -> None:\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, c, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: int = 10 ** 18\ndef solve(n$93: int, c$94: int, h$95: List[int]) -> int:\n    assert 2 <= n$93 and n$93 <= 10 ** 5\n    assert 1 <= c$94 and c$94 <= 10 ** 12\n    assert len(h$95) == n$93\n    assert all(1 <= h_i$96 and h_i$96 <= 10 ** 6 for h_i$96 in h$95)\n    dp$98: List[int] = [INF for $97 in range(n$93)]\n    dp$98[0]: int = 0\n    for i$99 in range(n$93):\n        for j$100 in range(i$99 + 1, n$93):\n            dp$98[j$100]: int = min(dp$98[j$100], dp$98[i$99] + h$95[i$99] - h$95[j$100] ** 2 + c$94)\n    return dp$98[n$93 - 1]\n", "core": "fun (n$1258: int) (c$1259: int) (h$1260: int list) ->\n    foldl((fun ($1261: convex-hull-trick * int list) ($1262: int) ->\n        let $1263: int list =\n            snoc($1261.1, c$1259 + - c$1259 + h$1260[$1262 + 1] * h$1260[$1262 + 1] + if - $1262 + 1 == 0 then 0 else 1000000000000000000 <? cht.getmin($1261.0, h$1260[$1262 + 1] * -2) + h$1260[$1262 + 1] * h$1260[$1262 + 1])\n        in (cht.insert($1261.0, h$1260[$1262 + 1], $1263[$1262 + 1] + h$1260[$1262 + 1] * h$1260[$1262 + 1]), $1263)\n    ), (let $1264: int list =\n        snoc(nil<int>, 0)\n    in (foldl((fun ($1265: convex-hull-trick) ($1266: int) ->\n        cht.insert($1265, h$1260[$1266], $1264[$1266] + h$1260[$1266] * h$1260[$1266])\n    ), cht.init, range(1)), $1264)), range(n$1258 - 1)).1[n$1258 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, int64_t c_1, std::vector<int64_t> h_2) {\n  std::vector<int64_t> x4;\n  x4.push_back(0);\n  jikka::convex_hull_trick x5;\n  for (int32_t x6 = 0; x6 < 1; ++x6) {\n    x5.add_line(h_2[x6], x4[x6] + h_2[x6] * h_2[x6]);\n  }\n  for (int32_t x10 = 0; x10 < n_0 - 1; ++x10) {\n    x4.push_back(\n        c_1 +\n        std::min<int64_t>(-(c_1 + h_2[x10 + 1] * h_2[x10 + 1]) +\n                              (-(x10 + 1) == 0 ? 0 : 1000000000000000000ll),\n                          x5.get_min(h_2[x10 + 1] * -2)) +\n        h_2[x10 + 1] * h_2[x10 + 1]);\n    x5.add_line(h_2[x10 + 1], x4[x10 + 1] + h_2[x10 + 1] * h_2[x10 + 1]);\n  }\n  return x4[n_0 - 1];\n}\nint main() {\n  int64_t n_17 = -1;\n  int64_t c_18 = -1;\n  std::cin >> n_17;\n  std::vector<int64_t> h_19(n_17, -1);\n  std::cin >> c_18;\n  for (int32_t i20 = 0; i20 < n_17; ++i20) {\n    std::cin >> h_19[i20];\n  }\n  auto ans_21 = solve(n_17, c_18, h_19);\n  std::cout << ans_21 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_z-morau.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_z\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert 1 <= c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 6 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + (h[j] - h[i]) ** 2 + c)\n    return dp[n - 1]\n\ndef main() -> None:\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, c, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: int = 10 ** 18\ndef solve(n$92: int, c$93: int, h$94: List[int]) -> int:\n    assert 2 <= n$92 and n$92 <= 10 ** 5\n    assert 1 <= c$93 and c$93 <= 10 ** 12\n    assert len(h$94) == n$92\n    assert all(1 <= h_i$95 and h_i$95 <= 10 ** 6 for h_i$95 in h$94)\n    dp$97: List[int] = [INF for $96 in range(n$92)]\n    dp$97[0]: int = 0\n    for i$98 in range(1, n$92):\n        for j$99 in range(i$98):\n            dp$97[i$98]: int = min(dp$97[i$98], dp$97[j$99] + h$94[j$99] - h$94[i$98] ** 2 + c$93)\n    return dp$97[n$92 - 1]\n", "core": "fun (n$1228: int) (c$1229: int) (h$1230: int list) ->\n    foldl((fun ($1231: convex-hull-trick * int list) ($1232: int) ->\n        let $1233: int list =\n            snoc($1231.1, c$1229 + h$1230[$1232 + 1] * h$1230[$1232 + 1] + cht.getmin($1231.0, h$1230[$1232 + 1] * -2))\n        in (cht.insert($1231.0, h$1230[$1232 + 1], $1233[$1232 + 1] + h$1230[$1232 + 1] * h$1230[$1232 + 1]), $1233)\n    ), (let $1234: int list =\n        snoc(nil<int>, 0)\n    in (foldl((fun ($1235: convex-hull-trick) ($1236: int) ->\n        cht.insert($1235, h$1230[$1236], $1234[$1236] + h$1230[$1236] * h$1230[$1236])\n    ), cht.init, range(1)), $1234)), range(n$1228 - 1)).1[n$1228 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0, int64_t c_1, std::vector<int64_t> h_2) {\n  std::vector<int64_t> x4;\n  x4.push_back(0);\n  jikka::convex_hull_trick x5;\n  for (int32_t x6 = 0; x6 < 1; ++x6) {\n    x5.add_line(h_2[x6], x4[x6] + h_2[x6] * h_2[x6]);\n  }\n  for (int32_t x10 = 0; x10 < n_0 - 1; ++x10) {\n    x4.push_back(c_1 + h_2[x10 + 1] * h_2[x10 + 1] +\n                 x5.get_min(h_2[x10 + 1] * -2));\n    x5.add_line(h_2[x10 + 1], x4[x10 + 1] + h_2[x10 + 1] * h_2[x10 + 1]);\n  }\n  return x4[n_0 - 1];\n}\nint main() {\n  int64_t n_17 = -1;\n  int64_t c_18 = -1;\n  std::cin >> n_17;\n  std::vector<int64_t> h_19(n_17, -1);\n  std::cin >> c_18;\n  for (int32_t i20 = 0; i20 < n_17; ++i20) {\n    std::cin >> h_19[i20];\n  }\n  auto ans_21 = solve(n_17, c_18, h_19);\n  std::cout << ans_21 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/fact.py", "python": "def solve(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * solve(n - 1)\n", "rpython": "def solve(n$8: int) -> int:\n    if n$8 == 0:\n        return 1\n    else:\n        return n$8 * solve(n$8 - 1)\n", "core": "let rec solve$237 (n$238: int): int =\n    if n$238 == 0 then 1 else n$238 * solve$237(n$238 - 1)\nin\nsolve$237\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve_0(int64_t n_1) {\n  int64_t x2;\n  if (n_1 == 0) {\n    x2 = 1;\n  } else {\n    x2 = n_1 * solve_0(n_1 - 1);\n  }\n  return x2;\n}\nint64_t solve(int64_t a3) { return solve_0(a3); }\nint main() {\n  int64_t x4 = -1;\n  std::cin >> x4;\n  auto x5 = solve(x4);\n  std::cout << x5 << ' ';\n}\n"}, {"path": "examples/fib.py", "python": "def f(n: int) -> int:\n    a = 0\n    b = 1\n    for _ in range(n):\n        c = a + b\n        a = b\n        b = c\n    return a\n\ndef solve(n: int) -> int:\n    return f(n) % 1000000007\n", "rpython": "def f(n$33: int) -> int:\n    a$34: int = 0\n    b$35: int = 1\n    for $36 in range(n$33):\n        c$37: int = a$34 + b$35\n        a$34: int = b$35\n        b$35: int = c$37\n    return a$34\ndef solve(n$38: int) -> int:\n    return f(n$38) % 1000000007\n", "core": "fun (n$265: int) ->\n    modmatap(modmatpow(((1, 1), (1, 0)), n$265, 1000000007), (1, 0), 1000000007).1\n", "cxx": "#include \"jikka/modulo_matrix.hpp\"\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0) {\n  return jikka::modmat::ap<2, 2>(\n      jikka::modmat::pow<2>(\n          std::array<std::array<int64_t, 2>, 2>{std::array<int64_t, 2>{1, 1},\n                                                std::array<int64_t, 2>{1, 0}},\n          n_0, 1000000007),\n      std::array<int64_t, 2>{1, 0}, 1000000007)[1];\n}\nint main() {\n  int64_t x1 = -1;\n  std::cin >> x1;\n  auto x2 = solve(x1);\n  std::cout << x2 << ' ';\n}\n"}, {"path": "examples/higher_order_function.py", "python": "from typing import *\n\ndef repeat(f: Callable[[int], int], k: int) -> Callable[[int], int]:\n    g = lambda x: x\n    for _ in range(k):\n        g = (lambda g: lambda x: f(g(x)))(g)\n    return g\n\ndef solve(n: int) -> int:\n    return repeat(lambda x: x + n, n)(n)\n", "rpython": "def repeat(f$47: Callable[[int], int], k$48: int) -> Callable[[int], int]:\n    g$50: Callable[[int], int] = lambda x$49: x$49\n    for $51 in range(k$48):\n        g$50: Callable[[int], int] = lambda g$50: lambda x$52: f$47(g$50(x$52))(g$50)\n    return g$50\ndef solve(n$53: int) -> int:\n    return repeat(lambda x$54: x$54 + n$53, n$53)(n$53)\n", "core": "fun (n$630: int) ->\n    iterate(n$630, (fun ($631: int -> int) ($632: int) ->\n        n$630 + $631($632)\n    ), id, n$630)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0) {\n  std::function<int64_t(int64_t)> x2 = [=](int64_t x_1) -> int64_t {\n    return x_1;\n  };\n  for (int32_t i3 = 0; i3 < int32_t(n_0); ++i3) {\n    x2 = [=](int64_t b5) -> int64_t { return n_0 + x2(b5); };\n  }\n  return x2(n_0);\n}\nint main() {\n  int64_t x6 = -1;\n  std::cin >> x6;\n  auto x7 = solve(x6);\n  std::cout << x7 << ' ';\n}\n"}, {"path": "examples/ifs.py", "python": "def solve(n: int) -> int:\n    a = 0\n    if n & 1 != 0:\n        a += 1\n    else:\n        a += 3\n    if n & 2 != 0:\n        a *= 6\n    if n & 4 != 0:\n        a -= 3\n    else:\n        a = 3 * a + 2\n    if n & 8 != 0:\n        a += 1\n    else:\n        a -= 1\n    if n & 16 != 0:\n        a += 2\n    else:\n        a -= 2\n    if n & 32 != 0:\n        a += 3\n    else:\n        a -= 3\n    if n & 64 != 0:\n        a += 4\n    else:\n        a -= 4\n    if n & 128 != 0:\n        a += 5\n    else:\n        a -= 5\n    return a\n", "rpython": "def solve(n$40: int) -> int:\n    a$41: int = 0\n    if n$40 & 1 != 0:\n        a$41 += 1\n    else:\n        a$41 += 3\n    if n$40 & 2 != 0:\n        a$41 *= 6\n    if n$40 & 4 != 0:\n        a$41 -= 3\n    else:\n        a$41: int = 3 * a$41 + 2\n    if n$40 & 8 != 0:\n        a$41 += 1\n    else:\n        a$41 -= 1\n    if n$40 & 16 != 0:\n        a$41 += 2\n    else:\n        a$41 -= 2\n    if n$40 & 32 != 0:\n        a$41 += 3\n    else:\n        a$41 -= 3\n    if n$40 & 64 != 0:\n        a$41 += 4\n    else:\n        a$41 -= 4\n    if n$40 & 128 != 0:\n        a$41 += 5\n    else:\n        a$41 -= 5\n    return a$41\n", "core": "fun (n$441: int) ->\n    if n$441 & 128 == 0 then if n$441 & 64 == 0 then if n$441 & 32 == 0 then if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 - 3 else if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 + 3 - 4 else if n$441 & 32 == 0 then if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 - 3 else if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 + 3 + 4 - 5 else if n$441 & 64 == 0 then if n$441 & 32 == 0 then if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 - 3 else if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 + 3 - 4 else if n$441 & 32 == 0 then if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 - 3 else if n$441 & 16 == 0 then if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 - 2 else if n$441 & 8 == 0 then if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 - 1 else if n$441 & 4 == 0 then if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 * 3 + 2 else if n$441 & 2 == 0 then if n$441 & 1 == 0 then 3 else 1 else if n$441 & 1 == 0 then 3 else 1 * 6 - 3 + 1 + 2 + 3 + 4 + 5\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_0) {\n  return (n_0 & 128) == 0\n             ? ((n_0 & 64) == 0\n                    ? ((n_0 & 32) == 0\n                           ? ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) -\n                                 3\n                           : ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) +\n                                 3) -\n                          4\n                    : ((n_0 & 32) == 0\n                           ? ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) -\n                                 3\n                           : ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) +\n                                 3) +\n                          4) -\n                   5\n             : ((n_0 & 64) == 0\n                    ? ((n_0 & 32) == 0\n                           ? ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) -\n                                 3\n                           : ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) +\n                                 3) -\n                          4\n                    : ((n_0 & 32) == 0\n                           ? ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) -\n                                 3\n                           : ((n_0 & 16) == 0\n                                  ? ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) -\n                                        2\n                                  : ((n_0 & 8) == 0\n                                         ? ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) -\n                                               1\n                                         : ((n_0 & 4) == 0\n                                                ? ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) *\n                                                          3 +\n                                                      2\n                                                : ((n_0 & 2) == 0\n                                                       ? (n_0 & 1) == 0 ? 3 : 1\n                                                       : ((n_0 & 1) == 0 ? 3\n                                                                         : 1) *\n                                                             6) -\n                                                      3) +\n                                               1) +\n                                        2) +\n                                 3) +\n                          4) +\n                   5;\n}\nint main() {\n  int64_t x1 = -1;\n  std::cin >> x1;\n  auto x2 = solve(x1);\n  std::cout << x2 << ' ';\n}\n"}, {"path": "examples/list_literal.py", "python": "def solve(a: int, b: int, c:int) -> int:\n    return sum([a, b, c])\n", "rpython": "def solve(a$11: int, b$12: int, c$13: int) -> int:\n    return sum([a$11, b$12, c$13])\n", "core": "fun (a$347: int) (b$348: int) (c$349: int) ->\n    a$347 + b$348 + c$349\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_0, int64_t b_1, int64_t c_2) { return a_0 + b_1 + c_2; }\nint main() {\n  int64_t x3 = -1;\n  int64_t x4 = -1;\n  int64_t x5 = -1;\n  std::cin >> x3;\n  std::cin >> x4;\n  std::cin >> x5;\n  auto x6 = solve(x3, x4, x5);\n  std::cout << x6 << ' ';\n}\n"}, {"path": "examples/m_solutions2019_e.py", "python": "# https://atcoder.jp/contests/m-solutions2019/tasks/m_solutions2019_e\nfrom typing import *\n\nMOD: int = 1000003\n\ndef solve1(x: int, d: int, n: int) -> int:\n    assert 0 <= x < MOD\n    assert 0 <= d < MOD\n    assert 0 <= n < 10 ** 9\n\n    return product(x + i * d for i in range(n)) % MOD\n\ndef solve(Q: int, x: List[int], d: List[int], n: List[int]) -> List[int]:\n    assert 1 <= Q <= 100000\n    assert len(x) == Q\n    assert all(0 <= x_i < MOD for x_i in x)\n    assert len(d) == Q\n    assert all(0 <= d_i < MOD for d_i in d)\n    assert len(n) == Q\n    assert all(0 <= n_i < MOD for n_i in n)\n\n    ans = [-1 for _ in range(Q)]\n    for i in range(Q):\n        ans[i] = solve1(x[i], d[i], n[i])\n    return ans\n", "rpython": "MOD: int = 1000003\ndef solve1(x$117: int, d$118: int, n$119: int) -> int:\n    assert 0 <= x$117 and x$117 < MOD\n    assert 0 <= d$118 and d$118 < MOD\n    assert 0 <= n$119 and n$119 < 10 ** 9\n    return product(x$117 + i$120 * d$118 for i$120 in range(n$119)) % MOD\ndef solve(Q$121: int, x$122: List[int], d$123: List[int], n$124: List[int]) -> List[int]:\n    assert 1 <= Q$121 and Q$121 <= 100000\n    assert len(x$122) == Q$121\n    assert all(0 <= x_i$125 and x_i$125 < MOD for x_i$125 in x$122)\n    assert len(d$123) == Q$121\n    assert all(0 <= d_i$126 and d_i$126 < MOD for d_i$126 in d$123)\n    assert len(n$124) == Q$121\n    assert all(0 <= n_i$127 and n_i$127 < MOD for n_i$127 in n$124)\n    ans$129: List[int] = [- 1 for $128 in range(Q$121)]\n    for i$130 in range(Q$121):\n        ans$129[i$130]: int = solve1(x$122[i$130], d$123[i$130], n$124[i$130])\n    return ans$129\n", "core": "fun (Q$961: int) (x$962: int list) (d$963: int list) (n$964: int list) ->\n    map((fun ($965: int) ->\n        modproduct(map((fun ($966: int) ->\n            modplus(x$962[$965] % 1000003, modmult($966 % 1000003, d$963[$965] % 1000003, 1000003), 1000003)\n        ), range(n$964[$965])), 1000003)\n    ), range(Q$961))\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t Q_0, std::vector<int64_t> x_1,\n                           std::vector<int64_t> d_2, std::vector<int64_t> n_3) {\n  std::vector<int64_t> x4(Q_0);\n  for (int32_t i5 = 0; i5 < int32_t(Q_0); ++i5) {\n    std::vector<int64_t> x7(n_3[i5]);\n    for (int32_t i8 = 0; i8 < int32_t(n_3[i5]); ++i8) {\n      x7[i8] = jikka::mod::plus(\n          jikka::floormod(x_1[i5], 1000003),\n          jikka::mod::mult(jikka::floormod(i8, 1000003),\n                           jikka::floormod(d_2[i5], 1000003), 1000003),\n          1000003);\n    }\n    int64_t x10 = 1;\n    for (int64_t x11 : x7) {\n      x10 = jikka::mod::mult(x10, x11, 1000003);\n    }\n    x4[i5] = x10;\n  }\n  return x4;\n}\nint main() {\n  int64_t x12 = -1;\n  int64_t x13 = -1;\n  int64_t x15 = -1;\n  int64_t x17 = -1;\n  std::cin >> x12;\n  std::cin >> x13;\n  std::vector<int64_t> x14(x13, -1);\n  for (int32_t i19 = 0; i19 < x13; ++i19) {\n    std::cin >> x14[i19];\n  }\n  std::cin >> x15;\n  std::vector<int64_t> x16(x15, -1);\n  for (int32_t i20 = 0; i20 < x15; ++i20) {\n    std::cin >> x16[i20];\n  }\n  std::cin >> x17;\n  std::vector<int64_t> x18(x17, -1);\n  for (int32_t i21 = 0; i21 < x17; ++i21) {\n    std::cin >> x18[i21];\n  }\n  auto x22 = solve(x12, x14, x16, x18);\n  std::cout << int32_t(x22.size()) << ' ';\n  for (int32_t i23 = 0; i23 < int32_t(x22.size()); ++i23) {\n    std::cout << x22[i23] << ' ';\n  }\n}\n"}, {"path": "examples/method_calls.py", "python": "def solve(a: int, b: int, c: int) -> int:\n    xs = [a, b, c, 1]\n    return xs.count(0) + xs.index(1)\n", "rpython": "def solve(a$20: int, b$21: int, c$22: int) -> int:\n    xs$23: List[int] = [a$20, b$21, c$22, 1]\n    return xs$23.count(0) + xs$23.index(1)\n", "core": "fun (a$711: int) (b$712: int) (c$713: int) ->\n    let xs$714: int list =\n        cons(a$711, cons(b$712, cons(c$713, cons(1, nil<int>))))\n    in len(filter((fun (y$715: int) ->\n        - y$715 == 0\n    ), xs$714)) + min(filter((fun (i$716: int) ->\n        xs$714[i$716] - 1 == 0\n    ), range(len(xs$714))))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_0, int64_t b_1, int64_t c_2) {\n  std::vector<int64_t> x4;\n  x4.push_back(1);\n  x4.insert(x4.end(), std::vector<int64_t>().begin(),\n            std::vector<int64_t>().end());\n  std::vector<int64_t> x5;\n  x5.push_back(c_2);\n  x5.insert(x5.end(), x4.begin(), x4.end());\n  std::vector<int64_t> x6;\n  x6.push_back(b_1);\n  x6.insert(x6.end(), x5.begin(), x5.end());\n  std::vector<int64_t> x7;\n  x7.push_back(a_0);\n  x7.insert(x7.end(), x6.begin(), x6.end());\n  std::vector<int64_t> x8;\n  for (int64_t x9 : x7) {\n    if (-x9 == 0) {\n      x8.push_back(x9);\n    }\n  }\n  std::vector<int64_t> x11;\n  for (int32_t x12 = 0; x12 < int64_t(x7.size()); ++x12) {\n    if (x7[x12] - 1 == 0) {\n      x11.push_back(x12);\n    }\n  }\n  int64_t x14 = *std::min_element(x11.begin(), x11.end());\n  return int64_t(x8.size()) + x14;\n}\nint main() {\n  int64_t x15 = -1;\n  int64_t x16 = -1;\n  int64_t x17 = -1;\n  std::cin >> x15;\n  std::cin >> x16;\n  std::cin >> x17;\n  auto x18 = solve(x15, x16, x17);\n  std::cout << x18 << ' ';\n}\n"}, {"path": "examples/point_add_range_sum.py", "python": "# https://judge.yosupo.jp/problem/point_add_range_sum\n\nfrom typing import *\n\ndef solve(n: int, q: int, a: List[int], t: List[int], args1: List[int], args2: List[int]) -> List[int]:\n    ans = []\n    for i in range(q):\n        if t[i] == 0:\n            p = args1[i]\n            x = args2[i]\n            a[p] += x\n        else:\n            l = args1[i]\n            r = args2[i]\n            ans.append(sum(a[l:r]))\n    return ans\n\ndef main() -> None:\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    t = list(range(q))\n    args1 = list(range(q))\n    args2 = list(range(q))\n    for i in range(q):\n        t[i], args1[i], args2[i] = map(int, input().split())\n    ans = solve(n, q, a, t, args1, args2)\n    for i in range(len(ans)):\n        print(ans[i])\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n$101: int, q$102: int, a$103: List[int], t$104: List[int], args1$105: List[int], args2$106: List[int]) -> List[int]:\n    ans$107: List[int] = []\n    for i$108 in range(q$102):\n        if t$104[i$108] == 0:\n            p$109: int = args1$105[i$108]\n            x$110: int = args2$106[i$108]\n            a$103[p$109] += x$110\n        else:\n            l$111: int = args1$105[i$108]\n            r$112: int = args2$106[i$108]\n            ans$107.append(sum(a$103[l$111:r$112]))\n    return ans$107\n", "core": "const((fun (q$1542: int) (a$1543: int list) (t$1544: int list) (args1$1545: int list) (args2$1546: int list) ->\n    foldl((fun ($1547: int list * int list) ($1548: int) ->\n        let $1552: int list * int list =\n            if t$1544[$1548] == 0 then ($1547.0[args1$1545[$1548] := args2$1546[$1548] + $1547.0[args1$1545[$1548]]], $1547.1) else ($1547.0, snoc($1547.1, (let $1551: int list =\n                scanl((fun ($1549: int) ($1550: int) ->\n                    $1549 + $1550\n                ), 0, $1547.0)\n            in - $1551[args1$1545[$1548]] + $1551[args2$1546[$1548]])))\n        in ($1552.0, $1552.1)\n    ), (a$1543, nil<int>), range(q$1542)).1\n))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_0, int64_t q_1, std::vector<int64_t> a_2,\n                           std::vector<int64_t> t_3,\n                           std::vector<int64_t> args1_4,\n                           std::vector<int64_t> args2_5) {\n  std::vector<int64_t> x6_20;\n  for (int32_t x7 = 0; x7 < q_1; ++x7) {\n    std::array<std::vector<int64_t>, 2> x18;\n    if (t_3[x7] == 0) {\n      a_2[args1_4[x7]] = args2_5[x7] + a_2[args1_4[x7]];\n      x18 = std::array<std::vector<int64_t>, 2>{a_2, x6_20};\n    } else {\n      std::vector<int64_t> x13(a_2.size() + 1);\n      x13[0] = 0;\n      for (int32_t i14 = 0; i14 < int32_t(a_2.size()); ++i14) {\n        x13[i14 + 1] = x13[i14] + a_2[i14];\n      }\n      std::vector<int64_t> x17 = x6_20;\n      x17.push_back(-x13[args1_4[x7]] + x13[args2_5[x7]]);\n      x18 = std::array<std::vector<int64_t>, 2>{a_2, x17};\n    }\n    a_2 = x18[0];\n    x6_20 = x18[1];\n  }\n  return x6_20;\n}\nint main() {\n  int64_t n_21 = -1;\n  int64_t q_22 = -1;\n  std::cin >> n_21;\n  std::vector<int64_t> a_23(n_21, -1);\n  std::cin >> q_22;\n  std::vector<int64_t> t_24(q_22, -1);\n  std::vector<int64_t> args1_25(q_22, -1);\n  std::vector<int64_t> args2_26(q_22, -1);\n  for (int32_t i27 = 0; i27 < n_21; ++i27) {\n    std::cin >> a_23[i27];\n  }\n  for (int32_t i_28 = 0; i_28 < q_22; ++i_28) {\n    std::cin >> t_24[i_28];\n    std::cin >> args1_25[i_28];\n    std::cin >> args2_26[i_28];\n  }\n  auto ans_29 = solve(n_21, q_22, a_23, t_24, args1_25, args2_26);\n  for (int32_t i_30 = 0; i_30 < int32_t(ans_29.size()); ++i_30) {\n    std::cout << ans_29[i_30] << ' ';\n    std::cout << '\\n' << ' ';\n  }\n}\n"}, {"path": "examples/static_range_sum.py", "python": "# https://judge.yosupo.jp/problem/static_range_sum\n\nfrom typing import *\n\ndef solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:\n    ans = [-1 for _ in range(q)]\n    for i in range(q):\n        ans[i] = sum(a[l[i]:r[i]])\n    return ans\n\ndef main() -> None:\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    l = list(range(q))\n    r = list(range(q))\n    for i in range(q):\n        l[i], r[i] = map(int, input().split())\n    ans = solve(n, q, a, l, r)\n    for i in range(q):\n        print(ans[i])\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n$68: int, q$69: int, a$70: List[int], l$71: List[int], r$72: List[int]) -> List[int]:\n    ans$74: List[int] = [- 1 for $73 in range(q$69)]\n    for i$75 in range(q$69):\n        ans$74[i$75]: int = sum(a$70[l$71[i$75]:r$72[i$75]])\n    return ans$74\n", "core": "const((fun (q$1106: int) (a$1107: int list) (l$1108: int list) (r$1109: int list) ->\n    let $1112: int list =\n        scanl((fun ($1110: int) ($1111: int) ->\n            $1110 + $1111\n        ), 0, a$1107)\n    in map((fun ($1113: int) ->\n        - $1112[l$1108[$1113]] + $1112[r$1109[$1113]]\n    ), range(q$1106))\n))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_0, int64_t q_1, std::vector<int64_t> a_2,\n                           std::vector<int64_t> l_3, std::vector<int64_t> r_4) {\n  std::vector<int64_t> x6(a_2.size() + 1);\n  x6[0] = 0;\n  for (int32_t i7 = 0; i7 < int32_t(a_2.size()); ++i7) {\n    x6[i7 + 1] = x6[i7] + a_2[i7];\n  }\n  std::vector<int64_t> x10(q_1);\n  for (int32_t i11 = 0; i11 < int32_t(q_1); ++i11) {\n    x10[i11] = -x6[l_3[i11]] + x6[r_4[i11]];\n  }\n  return x10;\n}\nint main() {\n  int64_t n_13 = -1;\n  int64_t q_14 = -1;\n  std::cin >> n_13;\n  std::vector<int64_t> a_15(n_13, -1);\n  std::cin >> q_14;\n  std::vector<int64_t> l_16(q_14, -1);\n  std::vector<int64_t> r_17(q_14, -1);\n  for (int32_t i18 = 0; i18 < n_13; ++i18) {\n    std::cin >> a_15[i18];\n  }\n  for (int32_t i_19 = 0; i_19 < q_14; ++i_19) {\n    std::cin >> l_16[i_19];\n    std::cin >> r_17[i_19];\n  }\n  auto ans_20 = solve(n_13, q_14, a_15, l_16, r_17);\n  for (int32_t i_21 = 0; i_21 < q_14; ++i_21) {\n    std::cout << ans_20[i_21] << ' ';\n    std::cout << '\\n' << ' ';\n  }\n}\n"}, {"path": "examples/sum.py", "python": "def solve(a: int, b: int, n: int) -> int:\n    y = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 1000000007\n", "rpython": "def solve(a$20: int, b$21: int, n$22: int) -> int:\n    y$23: int = 0\n    for x$24 in range(n$22):\n        y$23 += a$20 * x$24 + b$21\n    return y$23 % 1000000007\n", "core": "fun (a$484: int) (b$485: int) (n$486: int) ->\n    modplus(0, modplus(modmult(a$484 % 1000000007, modmult(modmult(n$486 % 1000000007, modminus(n$486 % 1000000007, 1, 1000000007), 1000000007), modinv(2, 1000000007), 1000000007), 1000000007), modmult(n$486 % 1000000007, b$485 % 1000000007, 1000000007), 1000000007), 1000000007)\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_0, int64_t b_1, int64_t n_2) {\n  return jikka::mod::plus(\n      0,\n      jikka::mod::plus(\n          jikka::mod::mult(\n              jikka::floormod(a_0, 1000000007),\n              jikka::mod::mult(\n                  jikka::mod::mult(\n                      jikka::floormod(n_2, 1000000007),\n                      jikka::mod::minus(jikka::floormod(n_2, 1000000007), 1,\n                                        1000000007),\n                      1000000007),\n                  jikka::mod::inv(2, 1000000007), 1000000007),\n              1000000007),\n          jikka::mod::mult(jikka::floormod(n_2, 1000000007),\n                           jikka::floormod(b_1, 1000000007), 1000000007),\n          1000000007),\n      1000000007);\n}\nint main() {\n  int64_t x3 = -1;\n  int64_t x4 = -1;\n  int64_t x5 = -1;\n  std::cin >> x3;\n  std::cin >> x4;\n  std::cin >> x5;\n  auto x6 = solve(x3, x4, x5);\n  std::cout << x6 << ' ';\n}\n"}, {"path": "examples/yukicoder_1618.py", "python": "# https://yukicoder.me/problems/no/1618\nfrom typing import *\n\n\ndef solve(n: int, a: List[int], b: List[int]) -> List[int]:\n    c = [0 for _ in range(2 * n)]\n    for i in range(n):\n        for j in range(n):\n            c[i + j + 1] += (i + 1) * a[j] + (j + 1) * b[i]\n    return c\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == n\n    ans = solve(n, a, b)\n    print(*ans)\n\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n$64: int, a$65: List[int], b$66: List[int]) -> List[int]:\n    c$68: List[int] = [0 for $67 in range(2 * n$64)]\n    for i$69 in range(n$64):\n        for j$70 in range(n$64):\n            c$68[i$69 + j$70 + 1] += i$69 + 1 * a$65[j$70] + j$70 + 1 * b$66[i$69]\n    return c$68\n", "core": "fun (n$1039: int) (a$1040: int list) (b$1041: int list) ->\n    foldl((fun ($1042: int list) ($1043: int) ->\n        foldl((fun ($1044: int list) ($1045: int) ->\n            $1044[$1043 + $1045 + 1 := $1043 * a$1040[$1045] + $1045 * b$1041[$1043] + $1044[$1043 + $1045 + 1] + a$1040[$1045] + b$1041[$1043]]\n        ), $1042, range(n$1039))\n    ), replicate(n$1039 * 2, 0), range(n$1039))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_0, std::vector<int64_t> a_1,\n                           std::vector<int64_t> b_2) {\n  std::vector<int64_t> x3(n_0 * 2, 0);\n  for (int32_t x5 = 0; x5 < n_0; ++x5) {\n    for (int32_t x9 = 0; x9 < n_0; ++x9) {\n      x3[x5 + x9 + 1] =\n          x5 * a_1[x9] + x9 * b_2[x5] + x3[x5 + x9 + 1] + a_1[x9] + b_2[x5];\n    }\n  }\n  return x3;\n}\nint main() {\n  int64_t n_13 = -1;\n  std::cin >> n_13;\n  std::vector<int64_t> a_14(n_13, -1);\n  std::vector<int64_t> b_15(n_13, -1);\n  for (int32_t i16 = 0; i16 < n_13; ++i16) {\n    std::cin >> a_14[i16];\n  }\n  for (int32_t i17 = 0; i17 < n_13; ++i17) {\n    std::cin >> b_15[i17];\n  }\n  auto ans_18 = solve(n_13, a_14, b_15);\n  for (int32_t i19 = 0; i19 < int32_t(ans_18.size()); ++i19) {\n    std::cout << ans_18[i19] << ' ';\n  }\n  std::cout << '\\n' << ' ';\n}\n"}], "errors": [{"path": "examples/errors/toplevel_expr_statements.py", "python": "if __name__ == '__main__':  # err\n    a = int(input())\n    print(a ** 2)\n", "error": "Semantic Error (line 1 column 1) (user's mistake?): Failed at Jikka.Python.Convert.ToplevelDecl: only `if __name__ == \"__main__\": main()' is allowed for if statements at toplevel\n1 |if __name__ == '__main__':  # err\n   ^^\n2 |    a = int(input())\n"}, {"path": "examples/errors/type_errors.py", "python": "def solve(n: int) -> bool:\n    a = n + True  # err\n    b = 2 * n\n    return b  # err\n", "error": "Type Error (line 2 column 13) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type int and type bool: type int is not type bool\n1 |def solve(n: int) -> bool:\n2 |    a = n + True  # err\n               ^^^^\n3 |    b = 2 * n\n\nType Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type bool and type int: type bool is not type int\n3 |    b = 2 * n\n4 |    return b  # err\n              ^\n"}, {"path": "examples/errors/undefined_identifiers.py", "python": "def solve(x: int) -> int:\n    x = y  # err\n    z = x + 1\n    return y  # err\n", "error": "Symbol Error (line 2 column 9) (user's mistake?): Jikka.RestrictedPython.Convert.Alpha: undefined identifier: y\n1 |def solve(x: int) -> int:\n2 |    x = y  # err\n           ^\n3 |    z = x + 1\n\nSymbol Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.Alpha: undefined identifier: y\n3 |    z = x + 1\n4 |    return y  # err\n              ^\n"}]}