{"examples": [{"path": "examples/abc200_b.py", "python": "# https://atcoder.jp/contests/abc200/tasks/abc200_b\n\nfrom typing import *\n\ndef solve(n: int, k: int) -> int:\n    for _ in range(k):\n        if n % 200 == 0:\n            n //= 200\n        else:\n            n = n*1000 + 200\n    return n\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    ans = solve(n, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, k: int) -> int:\n    for _ in range(k):\n        if n % 200 == 0:\n            n //= 200\n        else:\n            n: $1 = n * 1000 + 200\n    return n\ndef main() -> None:\n    n, k: $2 = map(int, input().split())\n    ans: $3 = solve(n, k)\n    print(ans)\n", "core": "fun (n$25: int) (k$26: int) ->\n    iterate k$26 (fun ($30: int) ->\n        if $30 % 200 == 0 then $30 / 200 else $30 * 1000 + 200\n    ) n$25\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_85, int64_t k_86) {\n  for (int32_t i88 = 0; i88 < int32_t(k_86); ++i88) {\n    n_85 = jikka::floormod(n_85, 200ll) == 0ll ? jikka::floordiv(n_85, 200ll)\n                                               : n_85 * 1000ll + 200ll;\n  }\n  return n_85;\n}\nint main() {\n  int64_t n_90 = -1ll;\n  int64_t k_91 = -1ll;\n  std::cin >> n_90;\n  std::cin >> k_91;\n  auto ans_92 = solve(n_90, k_91);\n  std::cout << ans_92 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc203_b.py", "python": "# https://atcoder.jp/contests/abc203/tasks/abc203_b\n\n# from typing import *\n\ndef solve(n: int, k: int) -> int:\n    a = []\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            a.append(100*i + j)   \n    ans = sum(a)\n    return ans\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    ans = solve(n, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, k: int) -> int:\n    a: $0 = []\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            a.append(100 * i + j)\n    ans: $2 = sum(a)\n    return ans\ndef main() -> None:\n    n, k: $3 = map(int, input().split())\n    ans: $4 = solve(n, k)\n    print(ans)\n", "core": "fun (n$40: int) (k$41: int) ->\n    sum (foldl (fun ($119: int list) ($120: int) ->\n        foldl (fun ($116: int list) ($117: int) ->\n            snoc $116 ($117 + $120 * 100 + 101)\n        ) $119 (range k$41)\n    ) nil (range n$40))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_121, int64_t k_122) {\n  std::vector<int64_t> x123;\n  for (int32_t x124 = 0; x124 < n_121; ++x124) {\n    for (int32_t x128 = 0; x128 < k_122; ++x128) {\n      x123.push_back(x128 + x124 * 100ll + 101ll);\n    }\n  }\n  int64_t x132 = std::accumulate(x123.begin(), x123.end(), 0ll);\n  return x132;\n}\nint main() {\n  int64_t n_133 = -1ll;\n  int64_t k_134 = -1ll;\n  std::cin >> n_133;\n  std::cin >> k_134;\n  auto ans_135 = solve(n_133, k_134);\n  std::cout << ans_135 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc204_b.py", "python": "# https://atcoder.jp/contests/abc204/tasks/abc204_b\n\nfrom typing import *\n\ndef solve(n: int, a: List[int]) -> int:\n    ans = 0\n    for e in a:\n        if e > 10:\n            ans += e - 10\n    return ans\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(n, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, a: List[int]) -> int:\n    ans: $0 = 0\n    for e in a:\n        if e > 10:\n            ans += e - 10\n    return ans\ndef main() -> None:\n    n: $2 = int(input())\n    a: $3 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $5 = solve(n, a)\n    print(ans)\n", "core": "const (fun (a$33: int list) ->\n    foldl (fun ($39: int) ($38: int) ->\n        if - $38 + 10 < 0 then $38 + $39 - 10 else $39\n    ) 0 a$33\n)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_87, std::vector<int64_t> a_88) {\n  int64_t x89 = 0ll;\n  for (int64_t x90 : a_88) {\n    x89 = -x90 + 10ll < 0ll ? x90 + x89 - 10ll : x89;\n  }\n  return x89;\n}\nint main() {\n  int64_t n_93 = -1ll;\n  std::cin >> n_93;\n  std::vector<int64_t> a_94(n_93, -1ll);\n  for (int32_t i95 = 0; i95 < n_93; ++i95) {\n    std::cin >> a_94[i95];\n  }\n  auto ans_96 = solve(n_93, a_94);\n  std::cout << ans_96 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc206_b.py", "python": "# https://atcoder.jp/contests/abc206/tasks/abc206_b\n\n# from typing import *\n\ndef solve(n: int) -> int:\n    c = 0\n    ans = 0\n    flag = True\n    for i in range(100000): # (10^5)^2 > 10^9\n        c += i\n        if c >= n and flag:\n            ans = i\n            flag = False\n    return ans\n\ndef main() -> None:\n    n = int(input())\n    ans = solve(n)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int) -> int:\n    c: $0 = 0\n    ans: $1 = 0\n    flag: $2 = True\n    for i in range(100000):\n        c += i\n        if c >= n and flag:\n            ans: $4 = i\n            flag: $5 = False\n    return ans\ndef main() -> None:\n    n: $6 = int(input())\n    ans: $7 = solve(n)\n    print(ans)\n", "core": "fun (n$36: int) ->\n    (foldl (fun ($46: bool * int * int) ($45: int) ->\n        ((if - $45 + n$36 - $46.2 <= 0 && $46.0 then false else $46.0), (if - $45 + n$36 - $46.2 <= 0 && $46.0 then $45 else $46.1), $45 + $46.2)\n    ) (true, 0, 0) (range 100000)).1\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_135) {\n  bool x_140 = true;\n  int64_t x_141 = 0ll;\n  int64_t x_142 = 0ll;\n  for (int32_t x137 = 0; x137 < 100000ll; ++x137) {\n    bool x143 = -x137 + n_135 - x_142 <= 0ll and x_140 ? false : x_140;\n    int64_t x144 = -x137 + n_135 - x_142 <= 0ll and x_140 ? x137 : x_141;\n    int64_t x145 = x137 + x_142;\n    x_140 = x143;\n    x_141 = x144;\n    x_142 = x145;\n  }\n  return x_141;\n}\nint main() {\n  int64_t n_146 = -1ll;\n  std::cin >> n_146;\n  auto ans_147 = solve(n_146);\n  std::cout << ans_147 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc207_b.py", "python": "# https://atcoder.jp/contests/abc207/tasks/abc207_b\n\n# from typing import *\n\ndef solve(a: int, b: int, c: int, d: int) -> int:\n    ans = -1\n    if d*c - b > 0:\n        ans = (a + d*c - b - 1) // (d*c - b) # ans = a /^ (d*c - b)\n    return ans\n\ndef main() -> None:\n    a, b, c, d = map(int, input().split())\n    ans = solve(a, b, c, d)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(a: int, b: int, c: int, d: int) -> int:\n    ans: $0 = - 1\n    if d * c - b > 0:\n        ans: $2 = a + d * c - b - 1 // d * c - b\n    return ans\ndef main() -> None:\n    a, b, c, d: $3 = map(int, input().split())\n    ans: $4 = solve(a, b, c, d)\n    print(ans)\n", "core": "fun (a$37: int) (b$38: int) (c$39: int) (d$40: int) ->\n    if b$38 - c$39 * d$40 < 0 then (a$37 - b$38 + c$39 * d$40 - 1) / (- b$38 + c$39 * d$40) else -1\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_93, int64_t b_94, int64_t c_95, int64_t d_96) {\n  return b_94 - c_95 * d_96 < 0ll\n             ? jikka::floordiv(a_93 - b_94 + c_95 * d_96 - 1ll,\n                               -b_94 + c_95 * d_96)\n             : -1ll;\n}\nint main() {\n  int64_t a_97 = -1ll;\n  int64_t b_98 = -1ll;\n  int64_t c_99 = -1ll;\n  int64_t d_100 = -1ll;\n  std::cin >> a_97;\n  std::cin >> b_98;\n  std::cin >> c_99;\n  std::cin >> d_100;\n  auto ans_101 = solve(a_97, b_98, c_99, d_100);\n  std::cout << ans_101 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/abc208_b.py", "python": "# https://atcoder.jp/contests/abc208/tasks/abc208_b\n\n# from typing import *\n\ndef solve(p: int) -> int:\n    e = 1\n    cs = []\n    ans = 0\n    for i in range(10):\n        e *= i+1\n        cs.append(e)\n    for c in reversed(cs):\n        ans += p//c\n        p -= p//c * c\n    return ans\n\ndef main() -> None:\n    p = int(input())\n    ans = solve(p)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(p: int) -> int:\n    e: $0 = 1\n    cs: $1 = []\n    ans: $3 = 0\n    for i in range(10):\n        e *= i + 1\n        cs.append(e)\n    for c in reversed(cs):\n        ans += p // c\n        p -= p // c * c\n    return ans\ndef main() -> None:\n    p: $4 = int(input())\n    ans: $5 = solve(p)\n    print(ans)\n", "core": "fun (p$45: int) ->\n    (foldl (fun ($66: int * int) ($65: int) ->\n        (- ($65 * ($66.0 / $65)) + $66.0, $66.1 + $66.0 / $65)\n    ) (p$45, 0) (reverse (foldl (fun ($56: int list * int) ($55: int) ->\n        (snoc $56.0 ($55 * $56.1 + $56.1), $55 * $56.1 + $56.1)\n    ) (nil, 1) (range 10)).0)).1\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t p_160) {\n  std::vector<int64_t> x_171;\n  int64_t x_172 = 1ll;\n  for (int32_t x162 = 0; x162 < 10ll; ++x162) {\n    x_171.push_back(x162 * x_172 + x_172);\n    int64_t x174 = x162 * x_172 + x_172;\n    x_172 = x174;\n  }\n  std::reverse(x_171.begin(), x_171.end());\n  int64_t x_176 = 0ll;\n  for (int64_t x168 : x_171) {\n    int64_t x177 = -(x168 * jikka::floordiv(p_160, x168)) + p_160;\n    int64_t x178 = x_176 + jikka::floordiv(p_160, x168);\n    p_160 = x177;\n    x_176 = x178;\n  }\n  return x_176;\n}\nint main() {\n  int64_t p_179 = -1ll;\n  std::cin >> p_179;\n  auto ans_180 = solve(p_179);\n  std::cout << ans_180 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_a.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_a\nfrom typing import *\n\ndef solve(n: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 4 for h_i in h)\n\n    dp = [-1 for _ in range(n)]\n    dp[0] = 0\n    dp[1] = abs(h[1] - h[0])\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2]))\n    return dp[n - 1]\n\ndef main() -> None:\n    n = int(input())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 4 for h_i in h)\n    dp: $5 = [- 1 for _ in range(n)]\n    dp[0]: $6 = 0\n    dp[1]: $7 = abs(h[1] - h[0])\n    for i in range(2, n):\n        dp[i]: $8 = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2]))\n    return dp[n - 1]\ndef main() -> None:\n    n: $9 = int(input())\n    h: $10 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $12 = solve(n, h)\n    print(ans)\n", "core": "fun (n$91: int) (h$92: int list) ->\n    assert - n$91 + 2 <= 0 && n$91 - 100000 <= 0 in\n    assert - n$91 + len h$92 == 0 in\n    assert all (map (fun ($97: int) ->\n        - $97 + 1 <= 0 && $97 - 10000 <= 0\n    ) h$92) in\n    if n$91 - 1 == 0 then 0 else (scanl (fun ($264: int * int) ($263: int) ->\n        ($264.1, min (abs (- h$92[$263 + 1] + h$92[$263 + 2]) + $264.1) (abs (- h$92[$263] + h$92[$263 + 2]) + $264.0))\n    ) (0, abs (- h$92[0] + h$92[1])) (range (n$91 - 2)))[n$91 - 2].1\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_266, std::vector<int64_t> h_267) {\n  assert(-n_266 + 2ll <= 0ll and n_266 - 100000ll <= 0ll);\n  assert(-n_266 + int64_t(h_267.size()) == 0ll);\n  for (int64_t x268 : h_267) {\n    assert(-x268 + 1ll <= 0ll and x268 - 10000ll <= 0ll);\n  }\n  int64_t x274;\n  if (n_266 - 1ll == 0ll) {\n    x274 = 0ll;\n  } else {\n    std::vector<std::array<int64_t, 2>> x270(n_266 - 2ll + 1);\n    x270[0] = std::array<int64_t, 2>{0ll, std::abs(-h_267[0ll] + h_267[1ll])};\n    for (int32_t i271 = 0; i271 < int32_t(n_266 - 2ll); ++i271) {\n      x270[i271 + 1] = std::array<int64_t, 2>{\n          x270[i271][1],\n          std::min<int64_t>(\n              std::abs(-h_267[i271 + 1ll] + h_267[i271 + 2ll]) + x270[i271][1],\n              std::abs(-h_267[i271] + h_267[i271 + 2ll]) + x270[i271][0])};\n    }\n    x274 = x270[n_266 - 2ll][1];\n  }\n  return x274;\n}\nint main() {\n  int64_t n_275 = -1ll;\n  std::cin >> n_275;\n  std::vector<int64_t> h_276(n_275, -1ll);\n  for (int32_t i277 = 0; i277 < n_275; ++i277) {\n    std::cin >> h_276[i277];\n  }\n  auto ans_278 = solve(n_275, h_276);\n  std::cout << ans_278 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_b.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_b\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, k: int, h: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert 1 <= k <= 100\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 4 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(max(0, i - k), i):\n            dp[i] = min(dp[i], dp[j] + abs(h[i] - h[j]))\n    return dp[n - 1]\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, k, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, k: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 10 ** 5\n    assert 1 <= k and k <= 100\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 4 for h_i in h)\n    dp: $8 = [INF for _ in range(n)]\n    dp[0]: $9 = 0\n    for i in range(1, n):\n        for j in range(max(0, i - k), i):\n            dp[i]: $10 = min(dp[i], dp[j] + abs(h[i] - h[j]))\n    return dp[n - 1]\ndef main() -> None:\n    n, k: $11 = map(int, input().split())\n    h: $12 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $14 = solve(n, k, h)\n    print(ans)\n", "core": "fun (n$96: int) (k$97: int) (h$98: int list) ->\n    assert - n$96 + 2 <= 0 && n$96 - 100000 <= 0 in\n    assert - k$97 + 1 <= 0 && k$97 - 100 <= 0 in\n    assert - n$96 + len h$98 == 0 in\n    assert all (map (fun ($104: int) ->\n        - $104 + 1 <= 0 && $104 - 10000 <= 0\n    ) h$98) in\n    (foldl (fun ($277: int list) ($278: int) ->\n        foldl (fun ($274: int list) ($275: int) ->\n            $274[$278 + 1 <- min $274[$278 + 1] (abs (- h$98[$275 + max 0 ($278 - k$97 + 1)] + h$98[$278 + 1]) + $274[$275 + max 0 ($278 - k$97 + 1)])]\n        ) $277 (range ($278 - max 0 ($278 - k$97 + 1) + 1))\n    ) (replicate n$96 1000000000000000000)[0 <- 0] (range (n$96 - 1)))[n$96 - 1]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_279, int64_t k_280, std::vector<int64_t> h_281) {\n  assert(-n_279 + 2ll <= 0ll and n_279 - 100000ll <= 0ll);\n  assert(-k_280 + 1ll <= 0ll and k_280 - 100ll <= 0ll);\n  assert(-n_279 + int64_t(h_281.size()) == 0ll);\n  for (int64_t x282 : h_281) {\n    assert(-x282 + 1ll <= 0ll and x282 - 10000ll <= 0ll);\n  }\n  std::vector<int64_t> x284(n_279, 1000000000000000000ll);\n  x284[0ll] = 0ll;\n  for (int32_t x286 = 0; x286 < n_279 - 1ll; ++x286) {\n    for (int32_t x290 = 0;\n         x290 < x286 - std::max<int64_t>(0ll, x286 - k_280 + 1ll) + 1ll;\n         ++x290) {\n      x284[x286 + 1ll] = std::min<int64_t>(\n          x284[x286 + 1ll],\n          std::abs(-h_281[x290 + std::max<int64_t>(0ll, x286 - k_280 + 1ll)] +\n                   h_281[x286 + 1ll]) +\n              x284[x290 + std::max<int64_t>(0ll, x286 - k_280 + 1ll)]);\n    }\n  }\n  return x284[n_279 - 1ll];\n}\nint main() {\n  int64_t n_293 = -1ll;\n  int64_t k_294 = -1ll;\n  std::cin >> n_293;\n  std::vector<int64_t> h_295(n_293, -1ll);\n  std::cin >> k_294;\n  for (int32_t i296 = 0; i296 < n_293; ++i296) {\n    std::cin >> h_295[i296];\n  }\n  auto ans_297 = solve(n_293, k_294, h_295);\n  std::cout << ans_297 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_c.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_c\nfrom typing import *\n\ndef solve(n: int, a: List[int], b: List[int], c: List[int]) -> int:\n    assert 1 <= n <= 10 ** 5\n    assert len(a) == n\n    assert len(b) == n\n    assert len(c) == n\n    assert all(1 <= a_i <= 10 ** 4 for a_i in a)\n    assert all(1 <= b_i <= 10 ** 4 for b_i in b)\n    assert all(1 <= c_i <= 10 ** 4 for c_i in c)\n\n    dp_a = [-1 for _ in range(n + 1)]\n    dp_b = [-1 for _ in range(n + 1)]\n    dp_c = [-1 for _ in range(n + 1)]\n    dp_a[0] = 0\n    dp_b[0] = 0\n    dp_c[0] = 0\n    for i in range(n):\n        dp_a[i + 1] = a[i] + max(dp_b[i], dp_c[i])\n        dp_b[i + 1] = b[i] + max(dp_c[i], dp_a[i])\n        dp_c[i + 1] = c[i] + max(dp_a[i], dp_b[i])\n    return max([dp_a[n], dp_b[n], dp_c[n]])\n\ndef main() -> None:\n    n = int(input())\n    a = list(range(n))\n    b = list(range(n))\n    c = list(range(n))\n    for i in range(n):\n        a[i], b[i], c[i] = map(int, input().split())\n    ans = solve(n, a, b, c)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, a: List[int], b: List[int], c: List[int]) -> int:\n    assert 1 <= n and n <= 10 ** 5\n    assert len(a) == n\n    assert len(b) == n\n    assert len(c) == n\n    assert all(1 <= a_i and a_i <= 10 ** 4 for a_i in a)\n    assert all(1 <= b_i and b_i <= 10 ** 4 for b_i in b)\n    assert all(1 <= c_i and c_i <= 10 ** 4 for c_i in c)\n    dp_a: $11 = [- 1 for _ in range(n + 1)]\n    dp_b: $12 = [- 1 for _ in range(n + 1)]\n    dp_c: $13 = [- 1 for _ in range(n + 1)]\n    dp_a[0]: $14 = 0\n    dp_b[0]: $15 = 0\n    dp_c[0]: $16 = 0\n    for i in range(n):\n        dp_a[i + 1]: $17 = a[i] + max(dp_b[i], dp_c[i])\n        dp_b[i + 1]: $18 = b[i] + max(dp_c[i], dp_a[i])\n        dp_c[i + 1]: $19 = c[i] + max(dp_a[i], dp_b[i])\n    return max([dp_a[n], dp_b[n], dp_c[n]])\ndef main() -> None:\n    n: $21 = int(input())\n    a: $22 = list(range(n))\n    b: $23 = list(range(n))\n    c: $24 = list(range(n))\n    for i in range(n):\n        a[i], b[i], c[i]: $25 = map(int, input().split())\n    ans: $26 = solve(n, a, b, c)\n    print(ans)\n", "core": "fun (n$172: int) (a$173: int list) (b$174: int list) (c$175: int list) ->\n    assert - n$172 + 1 <= 0 && n$172 - 100000 <= 0 in\n    assert - n$172 + len a$173 == 0 in\n    assert - n$172 + len b$174 == 0 in\n    assert - n$172 + len c$175 == 0 in\n    assert all (map (fun ($186: int) ->\n        - $186 + 1 <= 0 && $186 - 10000 <= 0\n    ) a$173) in\n    assert all (map (fun ($190: int) ->\n        - $190 + 1 <= 0 && $190 - 10000 <= 0\n    ) b$174) in\n    assert all (map (fun ($194: int) ->\n        - $194 + 1 <= 0 && $194 - 10000 <= 0\n    ) c$175) in\n    let $260: int list * int list * int list = foldl (fun ($221: int list * int list * int list) ($220: int) ->\n        let dp_a$253: int list = $221.2[$220 + 1 <- max $221.1[$220] $221.0[$220] + a$173[$220]]\n        in let dp_b$256: int list = $221.1[$220 + 1 <- max $221.0[$220] dp_a$253[$220] + b$174[$220]]\n        in ($221.0[$220 + 1 <- max dp_a$253[$220] dp_b$256[$220] + c$175[$220]], dp_b$256, dp_a$253)\n    ) ((replicate (n$172 + 1) -1)[0 <- 0], (replicate (n$172 + 1) -1)[0 <- 0], (replicate (n$172 + 1) -1)[0 <- 0]) (range n$172)\n    in max $260.2[n$172] (max $260.1[n$172] (maximum (cons $260.0[n$172] nil)))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_501, std::vector<int64_t> a_502,\n              std::vector<int64_t> b_503, std::vector<int64_t> c_504) {\n  assert(-n_501 + 1ll <= 0ll and n_501 - 100000ll <= 0ll);\n  assert(-n_501 + int64_t(a_502.size()) == 0ll);\n  assert(-n_501 + int64_t(b_503.size()) == 0ll);\n  assert(-n_501 + int64_t(c_504.size()) == 0ll);\n  for (int64_t x505 : a_502) {\n    assert(-x505 + 1ll <= 0ll and x505 - 10000ll <= 0ll);\n  }\n  for (int64_t x507 : b_503) {\n    assert(-x507 + 1ll <= 0ll and x507 - 10000ll <= 0ll);\n  }\n  for (int64_t x509 : c_504) {\n    assert(-x509 + 1ll <= 0ll and x509 - 10000ll <= 0ll);\n  }\n  std::vector<int64_t> x512(n_501 + 1ll, -1ll);\n  std::vector<int64_t> x513(n_501 + 1ll, -1ll);\n  std::vector<int64_t> x514(n_501 + 1ll, -1ll);\n  x512[0ll] = 0ll;\n  x513[0ll] = 0ll;\n  x514[0ll] = 0ll;\n  for (int32_t x516 = 0; x516 < n_501; ++x516) {\n    x514[x516 + 1ll] = std::max<int64_t>(x513[x516], x512[x516]) + a_502[x516];\n    x513[x516 + 1ll] = std::max<int64_t>(x512[x516], x514[x516]) + b_503[x516];\n    x512[x516 + 1ll] = std::max<int64_t>(x514[x516], x513[x516]) + c_504[x516];\n  }\n  std::vector<int64_t> x521;\n  x521.push_back(x512[n_501]);\n  x521.insert(x521.end(), std::vector<int64_t>().begin(),\n              std::vector<int64_t>().end());\n  int64_t x522 = *std::max_element(x521.begin(), x521.end());\n  return std::max<int64_t>(x514[n_501], std::max<int64_t>(x513[n_501], x522));\n}\nint main() {\n  int64_t n_532 = -1ll;\n  std::cin >> n_532;\n  std::vector<int64_t> a_533(n_532, -1ll);\n  std::vector<int64_t> b_534(n_532, -1ll);\n  std::vector<int64_t> c_535(n_532, -1ll);\n  for (int32_t i_536 = 0; i_536 < n_532; ++i_536) {\n    std::cin >> a_533[i_536];\n    std::cin >> b_534[i_536];\n    std::cin >> c_535[i_536];\n  }\n  auto ans_537 = solve(n_532, a_533, b_534, c_535);\n  std::cout << ans_537 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_min_mult.py", "python": "# https://judge.kimiyuki.net/problem/dp-min-mult\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, a: List[int], b: List[int]) -> int:\n    n = len(a)\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + a[j] * b[i])\n    return dp[n - 1]\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == n\n    ans = solve(n, a, b)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, a: List[int], b: List[int]) -> int:\n    n: $1 = len(a)\n    dp: $2 = [INF for _ in range(n)]\n    dp[0]: $3 = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i]: $4 = min(dp[i], dp[j] + a[j] * b[i])\n    return dp[n - 1]\ndef main() -> None:\n    n: $5 = int(input())\n    a: $6 = list(map(int, input().split()))\n    assert len(a) == n\n    b: $8 = list(map(int, input().split()))\n    assert len(b) == n\n    ans: $10 = solve(n, a, b)\n    print(ans)\n", "core": "const (fun (a$83: int list) (b$84: int list) ->\n    (foldl (fun ($214: convex_hull_trick * int list) ($210: int) ->\n        let $216: int list = snoc $214.1 (cht_getmin $214.0 b$84[$210 + 1])\n        in (cht_insert $214.0 a$83[$210 + 1] $216[$210 + 1], $216)\n    ) (let $212: int list = snoc nil 0\n    in (foldl (fun ($211: convex_hull_trick) ($213: int) ->\n        cht_insert $211 a$83[$213] $212[$213]\n    ) cht_init (range 1), $212)) (range (len a$83 - 1))).1[len a$83 - 1]\n)\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_217, std::vector<int64_t> a_218,\n              std::vector<int64_t> b_219) {\n  std::vector<int64_t> x221;\n  x221.push_back(0ll);\n  jikka::convex_hull_trick x222;\n  for (int32_t x223 = 0; x223 < 1ll; ++x223) {\n    x222.add_line(a_218[x223], x221[x223]);\n  }\n  for (int32_t x227 = 0; x227 < int64_t(a_218.size()) - 1ll; ++x227) {\n    x221.push_back(x222.get_min(b_219[x227 + 1ll]));\n    x222.add_line(a_218[x227 + 1ll], x221[x227 + 1ll]);\n  }\n  return x221[int64_t(a_218.size()) - 1ll];\n}\nint main() {\n  int64_t n_236 = -1ll;\n  std::cin >> n_236;\n  std::vector<int64_t> a_237(n_236, -1ll);\n  std::vector<int64_t> b_238(n_236, -1ll);\n  for (int32_t i239 = 0; i239 < n_236; ++i239) {\n    std::cin >> a_237[i239];\n  }\n  for (int32_t i240 = 0; i240 < n_236; ++i240) {\n    std::cin >> b_238[i240];\n  }\n  auto ans_241 = solve(n_236, a_237, b_238);\n  std::cout << ans_241 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_min_square_kubaru.py", "python": "# https://judge.kimiyuki.net/problem/dp-min-square\n\nINF = 10 ** 18\n\ndef solve(a: List[int]) -> int:\n    n = len(a)\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for j in range(n):\n        for i in range(j + 1, n):\n            dp[i] = min(dp[i], dp[j] + (a[i] - a[j]) ** 2)\n    return dp[n - 1]\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(a: List[int]) -> int:\n    n: $1 = len(a)\n    dp: $2 = [INF for _ in range(n)]\n    dp[0]: $3 = 0\n    for j in range(n):\n        for i in range(j + 1, n):\n            dp[i]: $4 = min(dp[i], dp[j] + a[i] - a[j] ** 2)\n    return dp[n - 1]\n", "core": "fun (a$55: int list) ->\n    (foldl (fun ($197: convex_hull_trick * int list) ($193: int) ->\n        let $199: int list = snoc $197.1 (min (- (a$55[$193 + 1] * a$55[$193 + 1]) + (if $193 + 1 == 0 then 0 else 1000000000000000000)) (cht_getmin $197.0 (a$55[$193 + 1] * -2)) + a$55[$193 + 1] * a$55[$193 + 1])\n        in (cht_insert $197.0 a$55[$193 + 1] ($199[$193 + 1] + a$55[$193 + 1] * a$55[$193 + 1]), $199)\n    ) (let $195: int list = snoc nil 0\n    in (foldl (fun ($194: convex_hull_trick) ($196: int) ->\n        cht_insert $194 a$55[$196] ($195[$196] + a$55[$196] * a$55[$196])\n    ) cht_init (range 1), $195)) (range (len a$55 - 1))).1[len a$55 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_202) {\n  std::vector<int64_t> x204;\n  x204.push_back(0ll);\n  jikka::convex_hull_trick x205;\n  for (int32_t x206 = 0; x206 < 1ll; ++x206) {\n    x205.add_line(a_202[x206], x204[x206] + a_202[x206] * a_202[x206]);\n  }\n  for (int32_t x210 = 0; x210 < int64_t(a_202.size()) - 1ll; ++x210) {\n    x204.push_back(\n        std::min<int64_t>(-(a_202[x210 + 1ll] * a_202[x210 + 1ll]) +\n                              (x210 + 1ll == 0ll ? 0ll : 1000000000000000000ll),\n                          x205.get_min(a_202[x210 + 1ll] * -2ll)) +\n        a_202[x210 + 1ll] * a_202[x210 + 1ll]);\n    x205.add_line(a_202[x210 + 1ll],\n                  x204[x210 + 1ll] + a_202[x210 + 1ll] * a_202[x210 + 1ll]);\n  }\n  return x204[int64_t(a_202.size()) - 1ll];\n}\nint main() {\n  int64_t x219 = -1ll;\n  std::cin >> x219;\n  std::vector<int64_t> x220(x219, -1ll);\n  for (int32_t i221 = 0; i221 < x219; ++i221) {\n    std::cin >> x220[i221];\n  }\n  auto x222 = solve(x220);\n  std::cout << x222 << ' ';\n}\n"}, {"path": "examples/dp_min_square_morau.py", "python": "# https://judge.kimiyuki.net/problem/dp-min-square\n\nINF = 10 ** 18\n\ndef solve(a: List[int]) -> int:\n    n = len(a)\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + (a[i] - a[j]) ** 2)\n    return dp[n - 1]\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(a: List[int]) -> int:\n    n: $1 = len(a)\n    dp: $2 = [INF for _ in range(n)]\n    dp[0]: $3 = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i]: $4 = min(dp[i], dp[j] + a[i] - a[j] ** 2)\n    return dp[n - 1]\n", "core": "fun (a$54: int list) ->\n    (foldl (fun ($190: convex_hull_trick * int list) ($186: int) ->\n        let $192: int list = snoc $190.1 (a$54[$186 + 1] * a$54[$186 + 1] + cht_getmin $190.0 (a$54[$186 + 1] * -2))\n        in (cht_insert $190.0 a$54[$186 + 1] ($192[$186 + 1] + a$54[$186 + 1] * a$54[$186 + 1]), $192)\n    ) (let $188: int list = snoc nil 0\n    in (foldl (fun ($187: convex_hull_trick) ($189: int) ->\n        cht_insert $187 a$54[$189] ($188[$189] + a$54[$189] * a$54[$189])\n    ) cht_init (range 1), $188)) (range (len a$54 - 1))).1[len a$54 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_193) {\n  std::vector<int64_t> x195;\n  x195.push_back(0ll);\n  jikka::convex_hull_trick x196;\n  for (int32_t x197 = 0; x197 < 1ll; ++x197) {\n    x196.add_line(a_193[x197], x195[x197] + a_193[x197] * a_193[x197]);\n  }\n  for (int32_t x201 = 0; x201 < int64_t(a_193.size()) - 1ll; ++x201) {\n    x195.push_back(a_193[x201 + 1ll] * a_193[x201 + 1ll] +\n                   x196.get_min(a_193[x201 + 1ll] * -2ll));\n    x196.add_line(a_193[x201 + 1ll],\n                  x195[x201 + 1ll] + a_193[x201 + 1ll] * a_193[x201 + 1ll]);\n  }\n  return x195[int64_t(a_193.size()) - 1ll];\n}\nint main() {\n  int64_t x210 = -1ll;\n  std::cin >> x210;\n  std::vector<int64_t> x211(x210, -1ll);\n  for (int32_t i212 = 0; i212 < x210; ++i212) {\n    std::cin >> x211[i212];\n  }\n  auto x213 = solve(x211);\n  std::cout << x213 << ' ';\n}\n"}, {"path": "examples/dp_q.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_q\nfrom typing import *\n\ndef solve(n: int, h: List[int], a: List[int]) -> int:\n    assert 1 <= n <= 2 * 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i <= n for h_i in h)\n    assert len(a) == n\n    assert all(1 <= a_i <= 10 ** 9 for a_i in a)\n\n    dp = [0 for _ in range(n)]\n    for i in range(n):\n        b = 0\n        for j in range(h[i]):\n            b = max(b, dp[j])\n        dp[h[i] - 1] = b + a[i]\n    return max(dp)\n\ndef main() -> None:\n    n = int(input())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(n, h, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, h: List[int], a: List[int]) -> int:\n    assert 1 <= n and n <= 2 * 10 ** 5\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= n for h_i in h)\n    assert len(a) == n\n    assert all(1 <= a_i and a_i <= 10 ** 9 for a_i in a)\n    dp: $8 = [0 for _ in range(n)]\n    for i in range(n):\n        b: $9 = 0\n        for j in range(h[i]):\n            b: $10 = max(b, dp[j])\n        dp[h[i] - 1]: $11 = b + a[i]\n    return max(dp)\ndef main() -> None:\n    n: $12 = int(input())\n    h: $13 = list(map(int, input().split()))\n    assert len(h) == n\n    a: $15 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $17 = solve(n, h, a)\n    print(ans)\n", "core": "fun (n$109: int) (h$110: int list) (a$111: int list) ->\n    assert - n$109 + 1 <= 0 && n$109 - 200000 <= 0 in\n    assert - n$109 + len h$110 == 0 in\n    assert all (map (fun ($119: int) ->\n        - $119 + 1 <= 0 && $119 - n$109 <= 0\n    ) h$110) in\n    assert - n$109 + len a$111 == 0 in\n    assert all (map (fun ($123: int) ->\n        - $123 + 1 <= 0 && $123 - 1000000000 <= 0\n    ) a$111) in\n    maximum (let $283: int list = replicate n$109 0\n    in (foldl (fun ($281: int list * segment_tree<int_max>) ($133: int) ->\n        let $282: int = max 0 (segtree_getrange $281.1 0 h$110[$133]) + a$111[$133]\n        in ($281.0[h$110[$133] - 1 <- $282], segtree_setpoint $281.1 (h$110[$133] - 1) $282)\n    ) ($283, segtree_initlist $283) (range n$109)).0)\n", "cxx": "#include \"jikka/segment_tree.hpp\"\n#include <algorithm>\n#include <array>\n#include <atcoder/segtree>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_284, std::vector<int64_t> h_285,\n              std::vector<int64_t> a_286) {\n  assert(-n_284 + 1ll <= 0ll and n_284 - 200000ll <= 0ll);\n  assert(-n_284 + int64_t(h_285.size()) == 0ll);\n  for (int64_t x287 : h_285) {\n    assert(-x287 + 1ll <= 0ll and x287 - n_284 <= 0ll);\n  }\n  assert(-n_284 + int64_t(a_286.size()) == 0ll);\n  for (int64_t x289 : a_286) {\n    assert(-x289 + 1ll <= 0ll and x289 - 1000000000ll <= 0ll);\n  }\n  std::vector<int64_t> x292(n_284, 0ll);\n  std::vector<int64_t> x_299 = x292;\n  atcoder::segtree<int64_t, jikka::max_int64_t, jikka::const_int64_min> x_300(\n      x292);\n  for (int32_t x294 = 0; x294 < n_284; ++x294) {\n    int64_t x297 =\n        std::max<int64_t>(0ll, x_300.prod(0ll, h_285[x294])) + a_286[x294];\n    x_299[h_285[x294] - 1ll] = x297;\n    x_300.set(h_285[x294] - 1ll, x297);\n  }\n  int64_t x298 = *std::max_element(x_299.begin(), x_299.end());\n  return x298;\n}\nint main() {\n  int64_t n_303 = -1ll;\n  std::cin >> n_303;\n  std::vector<int64_t> h_304(n_303, -1ll);\n  std::vector<int64_t> a_305(n_303, -1ll);\n  for (int32_t i306 = 0; i306 < n_303; ++i306) {\n    std::cin >> h_304[i306];\n  }\n  for (int32_t i307 = 0; i307 < n_303; ++i307) {\n    std::cin >> a_305[i307];\n  }\n  auto ans_308 = solve(n_303, h_304, a_305);\n  std::cout << ans_308 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_z-kubaru.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_z\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n <= 2 * 10 ** 5\n    assert 1 <= c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 6 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = min(dp[j], dp[i] + (h[i] - h[j]) ** 2 + c)\n    return dp[n - 1]\n\ndef main() -> None:\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, c, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 2 * 10 ** 5\n    assert 1 <= c and c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 6 for h_i in h)\n    dp: $8 = [INF for _ in range(n)]\n    dp[0]: $9 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j]: $10 = min(dp[j], dp[i] + h[i] - h[j] ** 2 + c)\n    return dp[n - 1]\ndef main() -> None:\n    n, c: $11 = map(int, input().split())\n    h: $12 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $14 = solve(n, c, h)\n    print(ans)\n", "core": "fun (n$93: int) (c$94: int) (h$95: int list) ->\n    assert - n$93 + 2 <= 0 && n$93 - 200000 <= 0 in\n    assert - c$94 + 1 <= 0 && c$94 - 1000000000000 <= 0 in\n    assert - n$93 + len h$95 == 0 in\n    assert all (map (fun ($101: int) ->\n        - $101 + 1 <= 0 && $101 - 1000000 <= 0\n    ) h$95) in\n    (foldl (fun ($279: convex_hull_trick * int list) ($275: int) ->\n        let $281: int list = snoc $279.1 (c$94 + min (- c$94 - h$95[$275 + 1] * h$95[$275 + 1] + (if $275 + 1 == 0 then 0 else 1000000000000000000)) (cht_getmin $279.0 (h$95[$275 + 1] * -2)) + h$95[$275 + 1] * h$95[$275 + 1])\n        in (cht_insert $279.0 h$95[$275 + 1] ($281[$275 + 1] + h$95[$275 + 1] * h$95[$275 + 1]), $281)\n    ) (let $277: int list = snoc nil 0\n    in (foldl (fun ($276: convex_hull_trick) ($278: int) ->\n        cht_insert $276 h$95[$278] ($277[$278] + h$95[$278] * h$95[$278])\n    ) cht_init (range 1), $277)) (range (n$93 - 1))).1[n$93 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_284, int64_t c_285, std::vector<int64_t> h_286) {\n  assert(-n_284 + 2ll <= 0ll and n_284 - 200000ll <= 0ll);\n  assert(-c_285 + 1ll <= 0ll and c_285 - 1000000000000ll <= 0ll);\n  assert(-n_284 + int64_t(h_286.size()) == 0ll);\n  for (int64_t x287 : h_286) {\n    assert(-x287 + 1ll <= 0ll and x287 - 1000000ll <= 0ll);\n  }\n  std::vector<int64_t> x290;\n  x290.push_back(0ll);\n  jikka::convex_hull_trick x291;\n  for (int32_t x292 = 0; x292 < 1ll; ++x292) {\n    x291.add_line(h_286[x292], x290[x292] + h_286[x292] * h_286[x292]);\n  }\n  for (int32_t x296 = 0; x296 < n_284 - 1ll; ++x296) {\n    x290.push_back(\n        c_285 +\n        std::min<int64_t>(-c_285 - h_286[x296 + 1ll] * h_286[x296 + 1ll] +\n                              (x296 + 1ll == 0ll ? 0ll : 1000000000000000000ll),\n                          x291.get_min(h_286[x296 + 1ll] * -2ll)) +\n        h_286[x296 + 1ll] * h_286[x296 + 1ll]);\n    x291.add_line(h_286[x296 + 1ll],\n                  x290[x296 + 1ll] + h_286[x296 + 1ll] * h_286[x296 + 1ll]);\n  }\n  return x290[n_284 - 1ll];\n}\nint main() {\n  int64_t n_305 = -1ll;\n  int64_t c_306 = -1ll;\n  std::cin >> n_305;\n  std::vector<int64_t> h_307(n_305, -1ll);\n  std::cin >> c_306;\n  for (int32_t i308 = 0; i308 < n_305; ++i308) {\n    std::cin >> h_307[i308];\n  }\n  auto ans_309 = solve(n_305, c_306, h_307);\n  std::cout << ans_309 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/dp_z-morau.py", "python": "# https://atcoder.jp/contests/dp/tasks/dp_z\nfrom typing import *\n\nINF = 10 ** 18\n\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n <= 2 * 10 ** 5\n    assert 1 <= c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i <= 10 ** 6 for h_i in h)\n\n    dp = [INF for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + (h[j] - h[i]) ** 2 + c)\n    return dp[n - 1]\n\ndef main() -> None:\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    assert len(h) == n\n    ans = solve(n, c, h)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "INF: $0 = 10 ** 18\ndef solve(n: int, c: int, h: List[int]) -> int:\n    assert 2 <= n and n <= 2 * 10 ** 5\n    assert 1 <= c and c <= 10 ** 12\n    assert len(h) == n\n    assert all(1 <= h_i and h_i <= 10 ** 6 for h_i in h)\n    dp: $8 = [INF for _ in range(n)]\n    dp[0]: $9 = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp[i]: $10 = min(dp[i], dp[j] + h[j] - h[i] ** 2 + c)\n    return dp[n - 1]\ndef main() -> None:\n    n, c: $11 = map(int, input().split())\n    h: $12 = list(map(int, input().split()))\n    assert len(h) == n\n    ans: $14 = solve(n, c, h)\n    print(ans)\n", "core": "fun (n$92: int) (c$93: int) (h$94: int list) ->\n    assert - n$92 + 2 <= 0 && n$92 - 200000 <= 0 in\n    assert - c$93 + 1 <= 0 && c$93 - 1000000000000 <= 0 in\n    assert - n$92 + len h$94 == 0 in\n    assert all (map (fun ($100: int) ->\n        - $100 + 1 <= 0 && $100 - 1000000 <= 0\n    ) h$94) in\n    (foldl (fun ($272: convex_hull_trick * int list) ($268: int) ->\n        let $274: int list = snoc $272.1 (c$93 + h$94[$268 + 1] * h$94[$268 + 1] + cht_getmin $272.0 (h$94[$268 + 1] * -2))\n        in (cht_insert $272.0 h$94[$268 + 1] ($274[$268 + 1] + h$94[$268 + 1] * h$94[$268 + 1]), $274)\n    ) (let $270: int list = snoc nil 0\n    in (foldl (fun ($269: convex_hull_trick) ($271: int) ->\n        cht_insert $269 h$94[$271] ($270[$271] + h$94[$271] * h$94[$271])\n    ) cht_init (range 1), $270)) (range (n$92 - 1))).1[n$92 - 1]\n", "cxx": "#include \"jikka/convex_hull_trick.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_275, int64_t c_276, std::vector<int64_t> h_277) {\n  assert(-n_275 + 2ll <= 0ll and n_275 - 200000ll <= 0ll);\n  assert(-c_276 + 1ll <= 0ll and c_276 - 1000000000000ll <= 0ll);\n  assert(-n_275 + int64_t(h_277.size()) == 0ll);\n  for (int64_t x278 : h_277) {\n    assert(-x278 + 1ll <= 0ll and x278 - 1000000ll <= 0ll);\n  }\n  std::vector<int64_t> x281;\n  x281.push_back(0ll);\n  jikka::convex_hull_trick x282;\n  for (int32_t x283 = 0; x283 < 1ll; ++x283) {\n    x282.add_line(h_277[x283], x281[x283] + h_277[x283] * h_277[x283]);\n  }\n  for (int32_t x287 = 0; x287 < n_275 - 1ll; ++x287) {\n    x281.push_back(c_276 + h_277[x287 + 1ll] * h_277[x287 + 1ll] +\n                   x282.get_min(h_277[x287 + 1ll] * -2ll));\n    x282.add_line(h_277[x287 + 1ll],\n                  x281[x287 + 1ll] + h_277[x287 + 1ll] * h_277[x287 + 1ll]);\n  }\n  return x281[n_275 - 1ll];\n}\nint main() {\n  int64_t n_296 = -1ll;\n  int64_t c_297 = -1ll;\n  std::cin >> n_296;\n  std::vector<int64_t> h_298(n_296, -1ll);\n  std::cin >> c_297;\n  for (int32_t i299 = 0; i299 < n_296; ++i299) {\n    std::cin >> h_298[i299];\n  }\n  auto ans_300 = solve(n_296, c_297, h_298);\n  std::cout << ans_300 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/fact.py", "python": "def solve(n: int) -> int:\n    ans = 1\n    for i in range(n):\n        ans *= i + 1\n    return ans % 998244353\n", "rpython": "def solve(n: int) -> int:\n    ans: $0 = 1\n    for i in range(n):\n        ans *= i + 1\n    return ans % 998244353\n", "core": "fun (n$14: int) ->\n    modproduct (map (fun ($57: int) ->\n        modplus ($57 % 998244353) 1 998244353\n    ) (range n$14)) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_58) {\n  std::vector<int64_t> x59(n_58);\n  for (int32_t i60 = 0; i60 < int32_t(n_58); ++i60) {\n    x59[i60] =\n        jikka::mod::plus(jikka::floormod(i60, 998244353ll), 1ll, 998244353ll);\n  }\n  int64_t x62 = 1ll;\n  for (int64_t x63 : x59) {\n    x62 = jikka::mod::mult(x62, x63, 998244353ll);\n  }\n  return x62;\n}\nint main() {\n  int64_t x64 = -1ll;\n  std::cin >> x64;\n  auto x65 = solve(x64);\n  std::cout << x65 << ' ';\n}\n"}, {"path": "examples/fib.py", "python": "def f(n: int) -> int:\n    a = 0\n    b = 1\n    for _ in range(n):\n        c = a + b\n        a = b\n        b = c\n    return a\n\ndef solve(n: int) -> int:\n    return f(n) % 998244353\n", "rpython": "def f(n: int) -> int:\n    a: $0 = 0\n    b: $1 = 1\n    for _ in range(n):\n        c: $2 = a + b\n        a: $3 = b\n        b: $4 = c\n    return a\ndef solve(n: int) -> int:\n    return f(n) % 998244353\n", "core": "fun (n$38: int) ->\n    (modmatap@2@2 (modmatpow@2 ((1, 1), (1, 0)) n$38 998244353) (1, 0) 998244353).1\n", "cxx": "#include \"jikka/modulo_matrix.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_100) {\n  return jikka::modmat::ap<2, 2>(jikka::modmat::pow<2>(\n                                     std::array<std::array<int64_t, 2>, 2>{\n                                         std::array<int64_t, 2>{1ll, 1ll},\n                                         std::array<int64_t, 2>{1ll, 0ll}},\n                                     n_100, 998244353ll),\n                                 std::array<int64_t, 2>{1ll, 0ll},\n                                 998244353ll)[1];\n}\nint main() {\n  int64_t x101 = -1ll;\n  std::cin >> x101;\n  auto x102 = solve(x101);\n  std::cout << x102 << ' ';\n}\n"}, {"path": "examples/fib_list_riantkb.py", "python": "# See https://github.com/kmyk/Jikka/issues/178\nfrom typing import *\n\n\ndef solve(n: int) -> int:\n    a = 0\n    b = 1\n    lis = []\n    for i in range(n):\n        lis.append(0)\n    for i in lis:\n        c = a + b + i\n        a = b\n        b = c\n    return a % 1000000007\n\n\ndef main():\n    n = int(input())\n    ans = solve(n)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(n: int) -> int:\n    a: $0 = 0\n    b: $1 = 1\n    lis: $2 = []\n    for i in range(n):\n        lis.append(0)\n    for i in lis:\n        c: $4 = a + b + i\n        a: $5 = b\n        b: $6 = c\n    return a % 1000000007\ndef main() -> $9:\n    n: $7 = int(input())\n    ans: $8 = solve(n)\n    print(ans)\n", "core": "fun (n$48: int) ->\n    (foldl (fun ($138: int * int) ($139: int) ->\n        (modplus (modplus ($139 % 1000000007) (vecfloormod@2 $138 1000000007).0 1000000007) (vecfloormod@2 $138 1000000007).1 1000000007, (vecfloormod@2 $138 1000000007).0)\n    ) (1, 0) (iterate n$48 (fun ($60: int list) ->\n        snoc $60 0\n    ) nil)).1\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include \"jikka/modulo_matrix.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_140) {\n  std::vector<int64_t> x141;\n  for (int32_t i142 = 0; i142 < int32_t(n_140); ++i142) {\n    x141.push_back(0ll);\n  }\n  int64_t x_149 = 1ll;\n  int64_t x_150 = 0ll;\n  for (int64_t x146 : x141) {\n    int64_t x151 = jikka::mod::plus(\n        jikka::mod::plus(\n            jikka::floormod(x146, 1000000007ll),\n            jikka::modmat::floormod<2>(std::array<int64_t, 2>{x_149, x_150},\n                                       1000000007ll)[0],\n            1000000007ll),\n        jikka::modmat::floormod<2>(std::array<int64_t, 2>{x_149, x_150},\n                                   1000000007ll)[1],\n        1000000007ll);\n    int64_t x152 = jikka::modmat::floormod<2>(\n        std::array<int64_t, 2>{x_149, x_150}, 1000000007ll)[0];\n    x_149 = x151;\n    x_150 = x152;\n  }\n  return x_150;\n}\nint main() {\n  int64_t n_153 = -1ll;\n  std::cin >> n_153;\n  auto ans_154 = solve(n_153);\n  std::cout << ans_154 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/higher_order_function.py", "python": "from typing import *\n\ndef repeat(f: Callable[[int], int], k: int) -> Callable[[int], int]:\n    g = lambda x: x\n    for _ in range(k):\n        g = (lambda g: lambda x: f(g(x)))(g)\n    return g\n\ndef solve(n: int) -> int:\n    return repeat(lambda x: x + n, n)(n)\n", "rpython": "def repeat(f: Callable[[int], int], k: int) -> Callable[[int], int]:\n    g: $0 = lambda x: x\n    for _ in range(k):\n        g: $2 = lambda g: lambda x: f(g(x))(g)\n    return g\ndef solve(n: int) -> int:\n    return repeat(lambda x: x + n, n)(n)\n", "core": "fun (n$53: int) ->\n    iterate n$53 (fun ($60: int -> int) ($104: int) ->\n        n$53 + $60 $104\n    ) id n$53\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_105) {\n  std::function<int64_t(int64_t)> x107 = [=](int64_t x_106) -> int64_t {\n    return x_106;\n  };\n  for (int32_t i108 = 0; i108 < int32_t(n_105); ++i108) {\n    x107 = [=](int64_t b110) -> int64_t { return n_105 + x107(b110); };\n  }\n  return x107(n_105);\n}\nint main() {\n  int64_t x111 = -1ll;\n  std::cin >> x111;\n  auto x112 = solve(x111);\n  std::cout << x112 << ' ';\n}\n"}, {"path": "examples/list_literal.py", "python": "def solve(a: int, b: int, c:int) -> int:\n    return sum([a, b, c])\n", "rpython": "def solve(a: int, b: int, c: int) -> int:\n    return sum([a, b, c])\n", "core": "fun (a$11: int) (b$12: int) (c$13: int) ->\n    a$11 + b$12 + c$13\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_29, int64_t b_30, int64_t c_31) {\n  return a_29 + b_30 + c_31;\n}\nint main() {\n  int64_t x32 = -1ll;\n  int64_t x33 = -1ll;\n  int64_t x34 = -1ll;\n  std::cin >> x32;\n  std::cin >> x33;\n  std::cin >> x34;\n  auto x35 = solve(x32, x33, x34);\n  std::cout << x35 << ' ';\n}\n"}, {"path": "examples/loop_mod_uta8a.py", "python": "# See https://github.com/kmyk/Jikka/issues/173\n\ndef solve(n: int, k: int) -> int:\n    for _ in range(k):\n        n = n % 3\n    return n\n\ndef main() -> None:\n    n, k = map(int, input().split())\n    ans = solve(n, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, k: int) -> int:\n    for _ in range(k):\n        n: $0 = n % 3\n    return n\ndef main() -> None:\n    n, k: $1 = map(int, input().split())\n    ans: $2 = solve(n, k)\n    print(ans)\n", "core": "fun (n$22: int) (k$23: int) ->\n    if range k$23 == nil then n$22 else n$22 % 3\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/range.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_55, int64_t k_56) {\n  return jikka::range(k_56) == std::vector<int64_t>()\n             ? n_55\n             : jikka::floormod(n_55, 3ll);\n}\nint main() {\n  int64_t n_57 = -1ll;\n  int64_t k_58 = -1ll;\n  std::cin >> n_57;\n  std::cin >> k_58;\n  auto ans_59 = solve(n_57, k_58);\n  std::cout << ans_59 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/method_calls.py", "python": "def solve(a: int, b: int, c: int) -> int:\n    xs = [a, b, c, 1]\n    return xs.count(0) + xs.index(1)\n", "rpython": "def solve(a: int, b: int, c: int) -> int:\n    xs: $0 = [a, b, c, 1]\n    return xs.count(0) + xs.index(1)\n", "core": "fun (a$20: int) (b$21: int) (c$22: int) ->\n    let xs$23: int list = cons a$20 (cons b$21 (cons c$22 (cons 1 nil)))\n    in len (filter (fun (y: int) ->\n        y == 0\n    ) xs$23) + minimum (filter (fun (i: int) ->\n        xs$23[i] - 1 == 0\n    ) (range (len xs$23)))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_72, int64_t b_73, int64_t c_74) {\n  std::vector<int64_t> x76;\n  x76.push_back(1ll);\n  x76.insert(x76.end(), std::vector<int64_t>().begin(),\n             std::vector<int64_t>().end());\n  std::vector<int64_t> x77;\n  x77.push_back(c_74);\n  x77.insert(x77.end(), x76.begin(), x76.end());\n  std::vector<int64_t> x78;\n  x78.push_back(b_73);\n  x78.insert(x78.end(), x77.begin(), x77.end());\n  std::vector<int64_t> x79;\n  x79.push_back(a_72);\n  x79.insert(x79.end(), x78.begin(), x78.end());\n  std::vector<int64_t> x80;\n  for (int64_t x81 : x79) {\n    if (x81 == 0ll) {\n      x80.push_back(x81);\n    }\n  }\n  std::vector<int64_t> x83;\n  for (int32_t x84 = 0; x84 < int64_t(x79.size()); ++x84) {\n    if (x79[x84] - 1ll == 0ll) {\n      x83.push_back(x84);\n    }\n  }\n  int64_t x86 = *std::min_element(x83.begin(), x83.end());\n  return int64_t(x80.size()) + x86;\n}\nint main() {\n  int64_t x87 = -1ll;\n  int64_t x88 = -1ll;\n  int64_t x89 = -1ll;\n  std::cin >> x87;\n  std::cin >> x88;\n  std::cin >> x89;\n  auto x90 = solve(x87, x88, x89);\n  std::cout << x90 << ' ';\n}\n"}, {"path": "examples/static_range_sum.py", "python": "# https://judge.yosupo.jp/problem/static_range_sum\n\nfrom typing import *\n\ndef solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:\n    ans = [-1 for _ in range(q)]\n    for i in range(q):\n        ans[i] = sum(a[l[i]:r[i]])\n    return ans\n\ndef main() -> None:\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    l = list(range(q))\n    r = list(range(q))\n    for i in range(q):\n        l[i], r[i] = map(int, input().split())\n    ans = solve(n, q, a, l, r)\n    for i in range(q):\n        print(ans[i])\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:\n    ans: $0 = [- 1 for _ in range(q)]\n    for i in range(q):\n        ans[i]: $1 = sum(a[l[i]:r[i]])\n    return ans\ndef main() -> None:\n    n, q: $2 = map(int, input().split())\n    a: $3 = list(map(int, input().split()))\n    assert len(a) == n\n    l: $5 = list(range(q))\n    r: $6 = list(range(q))\n    for i in range(q):\n        l[i], r[i]: $7 = map(int, input().split())\n    ans: $8 = solve(n, q, a, l, r)\n    for i in range(q):\n        print(ans[i])\n", "core": "const (fun (q$69: int) (a$70: int list) (l$71: int list) (r$72: int list) ->\n    let $143: int list = scanl (fun ($144: int) ($145: int) ->\n        $144 + $145\n    ) 0 a$70\n    in map (fun ($82: int) ->\n        - $143[l$71[$82]] + $143[r$72[$82]]\n    ) (range q$69)\n)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_146, int64_t q_147,\n                           std::vector<int64_t> a_148,\n                           std::vector<int64_t> l_149,\n                           std::vector<int64_t> r_150) {\n  std::vector<int64_t> x152(a_148.size() + 1);\n  x152[0] = 0ll;\n  for (int32_t i153 = 0; i153 < int32_t(a_148.size()); ++i153) {\n    x152[i153 + 1] = x152[i153] + a_148[i153];\n  }\n  std::vector<int64_t> x156(q_147);\n  for (int32_t i157 = 0; i157 < int32_t(q_147); ++i157) {\n    x156[i157] = -x152[l_149[i157]] + x152[r_150[i157]];\n  }\n  return x156;\n}\nint main() {\n  int64_t n_159 = -1ll;\n  int64_t q_160 = -1ll;\n  std::cin >> n_159;\n  std::vector<int64_t> a_161(n_159, -1ll);\n  std::cin >> q_160;\n  std::vector<int64_t> l_162(q_160, -1ll);\n  std::vector<int64_t> r_163(q_160, -1ll);\n  for (int32_t i164 = 0; i164 < n_159; ++i164) {\n    std::cin >> a_161[i164];\n  }\n  for (int32_t i_165 = 0; i_165 < q_160; ++i_165) {\n    std::cin >> l_162[i_165];\n    std::cin >> r_163[i_165];\n  }\n  auto ans_166 = solve(n_159, q_160, a_161, l_162, r_163);\n  for (int32_t i_167 = 0; i_167 < q_160; ++i_167) {\n    std::cout << ans_166[i_167] << ' ';\n    std::cout << '\\n' << ' ';\n  }\n}\n"}, {"path": "examples/sum_ax_plus_b.py", "python": "# https://judge.kimiyuki.net/problem/sum-ax-plus-b\ndef solve(a: int, b: int, n: int) -> int:\n    y = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 998244353\n", "rpython": "def solve(a: int, b: int, n: int) -> int:\n    y: $0 = 0\n    for x in range(n):\n        y += a * x + b\n    return y % 998244353\n", "core": "fun (a$20: int) (b$21: int) (n$22: int) ->\n    modplus (modplus (modmult (modmult (a$20 % 998244353) (n$22 % 998244353) 998244353) 499122176 998244353) (modmult (modmult (modmult (a$20 % 998244353) (n$22 % 998244353) 998244353) (n$22 % 998244353) 998244353) 499122177 998244353) 998244353) (modmult (b$21 % 998244353) (n$22 % 998244353) 998244353) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t a_71, int64_t b_72, int64_t n_73) {\n  return jikka::mod::plus(\n      jikka::mod::plus(\n          jikka::mod::mult(jikka::mod::mult(jikka::floormod(a_71, 998244353ll),\n                                            jikka::floormod(n_73, 998244353ll),\n                                            998244353ll),\n                           499122176ll, 998244353ll),\n          jikka::mod::mult(\n              jikka::mod::mult(\n                  jikka::mod::mult(jikka::floormod(a_71, 998244353ll),\n                                   jikka::floormod(n_73, 998244353ll),\n                                   998244353ll),\n                  jikka::floormod(n_73, 998244353ll), 998244353ll),\n              499122177ll, 998244353ll),\n          998244353ll),\n      jikka::mod::mult(jikka::floormod(b_72, 998244353ll),\n                       jikka::floormod(n_73, 998244353ll), 998244353ll),\n      998244353ll);\n}\nint main() {\n  int64_t x74 = -1ll;\n  int64_t x75 = -1ll;\n  int64_t x76 = -1ll;\n  std::cin >> x74;\n  std::cin >> x75;\n  std::cin >> x76;\n  auto x77 = solve(x74, x75, x76);\n  std::cout << x77 << ' ';\n}\n"}, {"path": "examples/sum_sum_abs_one.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-abs-one\nfrom typing import *\n\ndef solve(a: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for a_j in a:\n            ans += abs(a_i - a_j)\n    return ans\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for a_j in a:\n            ans += abs(a_i - a_j)\n    return ans\ndef main() -> None:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $4 = solve(a)\n    print(ans)\n", "core": "fun (a$34: int list) ->\n    let a$98: int list = sort a$34\n    in - (len a$98 * (scanl (fun ($122: int) ($123: int) ->\n        $122 + $123\n    ) 0 a$98)[len a$98]) + sum (map (fun ($114: int) ->\n        $114 * a$98[$114]\n    ) (range (len a$98))) + sum (map (fun ($99: int) ->\n        $99 * a$98[$99]\n    ) (range (len a$98))) - sum (let $110: int list = scanl (fun ($111: int) ($112: int) ->\n        $111 + $112\n    ) 0 a$98\n    in map (fun ($109: int) ->\n        $110[$109]\n    ) (range (len a$98))) + sum (let $115: int list = scanl (fun ($116: int) ($117: int) ->\n        $116 + $117\n    ) 0 a$98\n    in map (fun ($107: int) ->\n        $115[len a$98] - $115[$107 + 1]\n    ) (range (len a$98))) + (scanl (fun ($124: int) ($125: int) ->\n        $124 + $125\n    ) 0 a$98)[len a$98]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_126) {\n  std::sort(a_126.begin(), a_126.end());\n  std::vector<int64_t> x129(a_126.size() + 1);\n  x129[0] = 0ll;\n  for (int32_t i130 = 0; i130 < int32_t(a_126.size()); ++i130) {\n    x129[i130 + 1] = x129[i130] + a_126[i130];\n  }\n  std::vector<int64_t> x133(int64_t(a_126.size()));\n  for (int32_t i134 = 0; i134 < int32_t(int64_t(a_126.size())); ++i134) {\n    x133[i134] = i134 * a_126[i134];\n  }\n  int64_t x136 = std::accumulate(x133.begin(), x133.end(), 0ll);\n  std::vector<int64_t> x137(int64_t(a_126.size()));\n  for (int32_t i138 = 0; i138 < int32_t(int64_t(a_126.size())); ++i138) {\n    x137[i138] = i138 * a_126[i138];\n  }\n  int64_t x140 = std::accumulate(x137.begin(), x137.end(), 0ll);\n  std::vector<int64_t> x142(a_126.size() + 1);\n  x142[0] = 0ll;\n  for (int32_t i143 = 0; i143 < int32_t(a_126.size()); ++i143) {\n    x142[i143 + 1] = x142[i143] + a_126[i143];\n  }\n  std::vector<int64_t> x146(int64_t(a_126.size()));\n  for (int32_t i147 = 0; i147 < int32_t(int64_t(a_126.size())); ++i147) {\n    x146[i147] = x142[i147];\n  }\n  int64_t x149 = std::accumulate(x146.begin(), x146.end(), 0ll);\n  std::vector<int64_t> x151(a_126.size() + 1);\n  x151[0] = 0ll;\n  for (int32_t i152 = 0; i152 < int32_t(a_126.size()); ++i152) {\n    x151[i152 + 1] = x151[i152] + a_126[i152];\n  }\n  std::vector<int64_t> x155(int64_t(a_126.size()));\n  for (int32_t i156 = 0; i156 < int32_t(int64_t(a_126.size())); ++i156) {\n    x155[i156] = x151[int64_t(a_126.size())] - x151[i156 + 1ll];\n  }\n  int64_t x158 = std::accumulate(x155.begin(), x155.end(), 0ll);\n  std::vector<int64_t> x159(a_126.size() + 1);\n  x159[0] = 0ll;\n  for (int32_t i160 = 0; i160 < int32_t(a_126.size()); ++i160) {\n    x159[i160 + 1] = x159[i160] + a_126[i160];\n  }\n  return -(int64_t(a_126.size()) * x129[int64_t(a_126.size())]) + x136 + x140 -\n         x149 + x158 + x159[int64_t(a_126.size())];\n}\nint main() {\n  int64_t n_163 = -1ll;\n  std::cin >> n_163;\n  std::vector<int64_t> a_164(n_163, -1ll);\n  for (int32_t i165 = 0; i165 < n_163; ++i165) {\n    std::cin >> a_164[i165];\n  }\n  auto ans_166 = solve(a_164);\n  std::cout << ans_166 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_mult.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-square\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i * a_j\n    return ans % 998244353\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i * a_j\n    return ans % 998244353\ndef main() -> None:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $4 = solve(a)\n    print(ans)\n", "core": "fun (a$33: int list) ->\n    modmult (modsum (map (fun ($100: int) ->\n        $100 % 998244353\n    ) a$33) 998244353) (modsum (map (fun ($99: int) ->\n        $99 % 998244353\n    ) a$33) 998244353) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_101) {\n  std::vector<int64_t> x102(a_101.size());\n  for (int32_t i103 = 0; i103 < int32_t(a_101.size()); ++i103) {\n    x102[i103] = jikka::floormod(a_101[i103], 998244353ll);\n  }\n  int64_t x105 = 0ll;\n  for (int64_t x106 : x102) {\n    x105 += jikka::floormod(x106, 998244353ll);\n  }\n  std::vector<int64_t> x107(a_101.size());\n  for (int32_t i108 = 0; i108 < int32_t(a_101.size()); ++i108) {\n    x107[i108] = jikka::floormod(a_101[i108], 998244353ll);\n  }\n  int64_t x110 = 0ll;\n  for (int64_t x111 : x107) {\n    x110 += jikka::floormod(x111, 998244353ll);\n  }\n  return jikka::mod::mult(jikka::floormod(x105, 998244353ll),\n                          jikka::floormod(x110, 998244353ll), 998244353ll);\n}\nint main() {\n  int64_t n_112 = -1ll;\n  std::cin >> n_112;\n  std::vector<int64_t> a_113(n_112, -1ll);\n  for (int32_t i114 = 0; i114 < n_112; ++i114) {\n    std::cin >> a_113[i114];\n  }\n  auto ans_115 = solve(a_113);\n  std::cout << ans_115 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_plus_one.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-plus-one\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i - a_j\n    return ans\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i - a_j\n    return ans\ndef main() -> None:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $4 = solve(a)\n    print(ans)\n", "core": "const 0\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_95) { return 0ll; }\nint main() {\n  int64_t n_96 = -1ll;\n  std::cin >> n_96;\n  std::vector<int64_t> a_97(n_96, -1ll);\n  for (int32_t i98 = 0; i98 < n_96; ++i98) {\n    std::cin >> a_97[i98];\n  }\n  auto ans_99 = solve(a_97);\n  std::cout << ans_99 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_plus_one_lt.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-plus-one-lt\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    n = len(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += a[i] - a[j]\n    return ans\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    n: $0 = len(a)\n    ans: $1 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += a[i] - a[j]\n    return ans\ndef main() -> None:\n    n: $2 = int(input())\n    a: $3 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $5 = solve(a)\n    print(ans)\n", "core": "fun (a$47: int list) ->\n    len a$47 * (scanl (fun ($136: int) ($137: int) ->\n        $136 + $137\n    ) 0 a$47)[len a$47] - sum (map (fun ($55: int) ->\n        $55 * a$47[$55]\n    ) (range (len a$47))) - sum (let $129: int list = scanl (fun ($130: int) ($131: int) ->\n        $130 + $131\n    ) 0 a$47\n    in map (fun ($128: int) ->\n        $129[len a$47] - $129[$128 + 1]\n    ) (range (len a$47))) - (scanl (fun ($138: int) ($139: int) ->\n        $138 + $139\n    ) 0 a$47)[len a$47]\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_140) {\n  std::vector<int64_t> x141(a_140.size() + 1);\n  x141[0] = 0ll;\n  for (int32_t i142 = 0; i142 < int32_t(a_140.size()); ++i142) {\n    x141[i142 + 1] = x141[i142] + a_140[i142];\n  }\n  std::vector<int64_t> x145(int64_t(a_140.size()));\n  for (int32_t i146 = 0; i146 < int32_t(int64_t(a_140.size())); ++i146) {\n    x145[i146] = i146 * a_140[i146];\n  }\n  int64_t x148 = std::accumulate(x145.begin(), x145.end(), 0ll);\n  std::vector<int64_t> x150(a_140.size() + 1);\n  x150[0] = 0ll;\n  for (int32_t i151 = 0; i151 < int32_t(a_140.size()); ++i151) {\n    x150[i151 + 1] = x150[i151] + a_140[i151];\n  }\n  std::vector<int64_t> x154(int64_t(a_140.size()));\n  for (int32_t i155 = 0; i155 < int32_t(int64_t(a_140.size())); ++i155) {\n    x154[i155] = x150[int64_t(a_140.size())] - x150[i155 + 1ll];\n  }\n  int64_t x157 = std::accumulate(x154.begin(), x154.end(), 0ll);\n  std::vector<int64_t> x158(a_140.size() + 1);\n  x158[0] = 0ll;\n  for (int32_t i159 = 0; i159 < int32_t(a_140.size()); ++i159) {\n    x158[i159 + 1] = x158[i159] + a_140[i159];\n  }\n  return int64_t(a_140.size()) * x141[int64_t(a_140.size())] - x148 - x157 -\n         x158[int64_t(a_140.size())];\n}\nint main() {\n  int64_t n_162 = -1ll;\n  std::cin >> n_162;\n  std::vector<int64_t> a_163(n_162, -1ll);\n  for (int32_t i164 = 0; i164 < n_162; ++i164) {\n    std::cin >> a_163[i164];\n  }\n  auto ans_165 = solve(a_163);\n  std::cout << ans_165 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_plus_two.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-plus-two\nfrom typing import *\n\n\ndef solve(a: List[int], b: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for b_j in b:\n            ans += a_i - b_j\n    return ans\n\n\ndef main() -> None:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == m\n    ans = solve(a, b)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int], b: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for b_j in b:\n            ans += a_i - b_j\n    return ans\ndef main() -> None:\n    n, m: $1 = map(int, input().split())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    b: $4 = list(map(int, input().split()))\n    assert len(b) == m\n    ans: $6 = solve(a, b)\n    print(ans)\n", "core": "fun (a$47: int list) (b$48: int list) ->\n    - (len a$47 * sum b$48) + len b$48 * sum a$47\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_110, std::vector<int64_t> b_111) {\n  int64_t x112 = std::accumulate(b_111.begin(), b_111.end(), 0ll);\n  int64_t x113 = std::accumulate(a_110.begin(), a_110.end(), 0ll);\n  return -(int64_t(a_110.size()) * x112) + int64_t(b_111.size()) * x113;\n}\nint main() {\n  int64_t n_114 = -1ll;\n  int64_t m_115 = -1ll;\n  std::cin >> n_114;\n  std::vector<int64_t> a_116(n_114, -1ll);\n  std::cin >> m_115;\n  std::vector<int64_t> b_117(m_115, -1ll);\n  for (int32_t i118 = 0; i118 < n_114; ++i118) {\n    std::cin >> a_116[i118];\n  }\n  for (int32_t i119 = 0; i119 < m_115; ++i119) {\n    std::cin >> b_117[i119];\n  }\n  auto ans_120 = solve(a_116, b_117);\n  std::cout << ans_120 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/sum_sum_square.py", "python": "# https://judge.kimiyuki.net/problem/sum-sum-square\nfrom typing import *\n\n\ndef solve(a: List[int]) -> int:\n    ans = 0\n    for a_i in a:\n        for a_j in a:\n            ans += (a_i - a_j) ** 2\n    return ans % 998244353\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    ans = solve(a)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "rpython": "def solve(a: List[int]) -> int:\n    ans: $0 = 0\n    for a_i in a:\n        for a_j in a:\n            ans += a_i - a_j ** 2\n    return ans % 998244353\ndef main() -> None:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    ans: $4 = solve(a)\n    print(ans)\n", "core": "fun (a$33: int list) ->\n    modplus (modplus (modmult (len a$33 % 998244353) (modsum (map (fun ($100: int) ->\n        modmult ($100 % 998244353) ($100 % 998244353) 998244353\n    ) a$33) 998244353) 998244353) (modmult (len a$33 % 998244353) (modsum (map (fun ($102: int) ->\n        modmult ($102 % 998244353) ($102 % 998244353) 998244353\n    ) a$33) 998244353) 998244353) 998244353) (modmult (modmult (modsum (map (fun ($101: int) ->\n        $101 % 998244353\n    ) a$33) 998244353) (modsum (map (fun ($104: int) ->\n        $104 % 998244353\n    ) a$33) 998244353) 998244353) 998244351 998244353) 998244353\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(std::vector<int64_t> a_105) {\n  std::vector<int64_t> x106(a_105.size());\n  for (int32_t i107 = 0; i107 < int32_t(a_105.size()); ++i107) {\n    x106[i107] = jikka::mod::mult(jikka::floormod(a_105[i107], 998244353ll),\n                                  jikka::floormod(a_105[i107], 998244353ll),\n                                  998244353ll);\n  }\n  int64_t x109 = 0ll;\n  for (int64_t x110 : x106) {\n    x109 += jikka::floormod(x110, 998244353ll);\n  }\n  std::vector<int64_t> x111(a_105.size());\n  for (int32_t i112 = 0; i112 < int32_t(a_105.size()); ++i112) {\n    x111[i112] = jikka::mod::mult(jikka::floormod(a_105[i112], 998244353ll),\n                                  jikka::floormod(a_105[i112], 998244353ll),\n                                  998244353ll);\n  }\n  int64_t x114 = 0ll;\n  for (int64_t x115 : x111) {\n    x114 += jikka::floormod(x115, 998244353ll);\n  }\n  std::vector<int64_t> x116(a_105.size());\n  for (int32_t i117 = 0; i117 < int32_t(a_105.size()); ++i117) {\n    x116[i117] = jikka::floormod(a_105[i117], 998244353ll);\n  }\n  int64_t x119 = 0ll;\n  for (int64_t x120 : x116) {\n    x119 += jikka::floormod(x120, 998244353ll);\n  }\n  std::vector<int64_t> x121(a_105.size());\n  for (int32_t i122 = 0; i122 < int32_t(a_105.size()); ++i122) {\n    x121[i122] = jikka::floormod(a_105[i122], 998244353ll);\n  }\n  int64_t x124 = 0ll;\n  for (int64_t x125 : x121) {\n    x124 += jikka::floormod(x125, 998244353ll);\n  }\n  return jikka::mod::plus(\n      jikka::mod::plus(\n          jikka::mod::mult(jikka::floormod(int64_t(a_105.size()), 998244353ll),\n                           jikka::floormod(x109, 998244353ll), 998244353ll),\n          jikka::mod::mult(jikka::floormod(int64_t(a_105.size()), 998244353ll),\n                           jikka::floormod(x114, 998244353ll), 998244353ll),\n          998244353ll),\n      jikka::mod::mult(jikka::mod::mult(jikka::floormod(x119, 998244353ll),\n                                        jikka::floormod(x124, 998244353ll),\n                                        998244353ll),\n                       998244351ll, 998244353ll),\n      998244353ll);\n}\nint main() {\n  int64_t n_126 = -1ll;\n  std::cin >> n_126;\n  std::vector<int64_t> a_127(n_126, -1ll);\n  for (int32_t i128 = 0; i128 < n_126; ++i128) {\n    std::cin >> a_127[i128];\n  }\n  auto ans_129 = solve(a_127);\n  std::cout << ans_129 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/wip/tle/abc127_e.py", "python": "# https://atcoder.jp/contests/abc127/tasks/abc127_e\n\nMOD: int = 10 ** 9 + 7\n\ndef solve(h: int, w: int, k: int) -> int:\n    ans = 0\n    for y1 in range(h):\n        for x1 in range(w):\n            for y2 in range(h):\n                for x2 in range(w):\n                    if (y1, x1) < (y2, x2):\n                        ans += jikka.choose(h * w - 2, k - 2) * (abs(y2 - y1) + abs(x2 - x1))\n    return ans % MOD\n\ndef main() -> None:\n    n, m, k = map(int, input().split())\n    ans = solve(n, m, k)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "rpython": "MOD: int = 10 ** 9 + 7\ndef solve(h: int, w: int, k: int) -> int:\n    ans: $0 = 0\n    for y1 in range(h):\n        for x1 in range(w):\n            for y2 in range(h):\n                for x2 in range(w):\n                    if (y1, x1) < (y2, x2):\n                        ans += jikka.choose(h * w - 2, k - 2) * abs(y2 - y1) + abs(x2 - x1)\n    return ans % MOD\ndef main() -> None:\n    n, m, k: $2 = map(int, input().split())\n    ans: $3 = solve(n, m, k)\n    print(ans)\n", "core": "fun (h$58: int) (w$59: int) (k$60: int) ->\n    foldl (fun ($227: int) ($228: int) ->\n        (vecfloormod@1 (foldl (fun ($74: int) ($73: int) ->\n            foldl (fun ($79: int) ($78: int) ->\n                foldl (fun ($84: int) ($83: int) ->\n                    if ($228, $73) < ($78, $83) then $84 + abs (- $228 + $78) * choose (h$58 * w$59 - 2) (k$60 - 2) + abs (- $73 + $83) * choose (h$58 * w$59 - 2) (k$60 - 2) else $84\n                ) $79 (range w$59)\n            ) $74 (range h$58)\n        ) $227 (range w$59),) 1000000007).0\n    ) 0 (range h$58)\n", "cxx": "#include \"jikka/modulo_matrix.hpp\"\n#include \"jikka/not_modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t h_373, int64_t w_374, int64_t k_375) {\n  int64_t x376 = 0ll;\n  for (int32_t x377 = 0; x377 < h_373; ++x377) {\n    int64_t x380 = x376;\n    for (int32_t x381 = 0; x381 < w_374; ++x381) {\n      for (int32_t x385 = 0; x385 < h_373; ++x385) {\n        for (int32_t x389 = 0; x389 < w_374; ++x389) {\n          x380 = std::array<int64_t, 2>{x377, x381} <\n                         std::array<int64_t, 2>{x385, x389}\n                     ? x380 +\n                           std::abs(-x377 + x385) *\n                               jikka::notmod::choose(h_373 * w_374 - 2ll,\n                                                     k_375 - 2ll) +\n                           std::abs(-x381 + x389) *\n                               jikka::notmod::choose(h_373 * w_374 - 2ll,\n                                                     k_375 - 2ll)\n                     : x380;\n        }\n      }\n    }\n    x376 = jikka::modmat::floormod<1>(std::array<int64_t, 1>{x380},\n                                      1000000007ll)[0];\n  }\n  return x376;\n}\nint main() {\n  int64_t n_392 = -1ll;\n  int64_t m_393 = -1ll;\n  int64_t k_394 = -1ll;\n  std::cin >> n_392;\n  std::cin >> m_393;\n  std::cin >> k_394;\n  auto ans_395 = solve(n_392, m_393, k_394);\n  std::cout << ans_395 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/wip/tle/abc134_c.py", "python": "# https://atcoder.jp/contests/abc134/tasks/abc134_c\nfrom typing import *\n\ndef solve(N: int, A: List[int]) -> List[int]:\n    # assert 2 <= N <= 200000\n    # assert len(A) == N\n    # assert all(0 <= A_i <= 200000 for A_i in A)\n\n    ans = [-1 for _ in range(N)]\n    for i in range(N):\n        ans[i] = max((0 if j == i else A[j]) for j in range(N))\n    return ans\n", "rpython": "def solve(N: int, A: List[int]) -> List[int]:\n    ans: $0 = [- 1 for _ in range(N)]\n    for i in range(N):\n        ans[i]: $1 = max(0 if j == i else A[j] for j in range(N))\n    return ans\n", "core": "fun (N$36: int) (A$37: int list) ->\n    map (fun ($54: int) ->\n        maximum (map (fun ($58: int) ->\n            if - $54 + $58 == 0 then 0 else A$37[$58]\n        ) (range N$36))\n    ) (range N$36)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t N_115, std::vector<int64_t> A_116) {\n  std::vector<int64_t> x117(N_115);\n  for (int32_t i118 = 0; i118 < int32_t(N_115); ++i118) {\n    std::vector<int64_t> x120(N_115);\n    for (int32_t i121 = 0; i121 < int32_t(N_115); ++i121) {\n      x120[i121] = -i118 + i121 == 0ll ? 0ll : A_116[i121];\n    }\n    int64_t x123 = *std::max_element(x120.begin(), x120.end());\n    x117[i118] = x123;\n  }\n  return x117;\n}\nint main() {\n  int64_t x124 = -1ll;\n  int64_t x125 = -1ll;\n  std::cin >> x124;\n  std::cin >> x125;\n  std::vector<int64_t> x126(x125, -1ll);\n  for (int32_t i127 = 0; i127 < x125; ++i127) {\n    std::cin >> x126[i127];\n  }\n  auto x128 = solve(x124, x126);\n  std::cout << int32_t(x128.size()) << ' ';\n  for (int32_t i129 = 0; i129 < int32_t(x128.size()); ++i129) {\n    std::cout << x128[i129] << ' ';\n  }\n}\n"}, {"path": "examples/wip/tle/codefestival_2015_final_d.py", "python": "# https://atcoder.jp/contests/code-festival-2015-final-open/tasks/codefestival_2015_final_d\nfrom typing import *\n\ndef solve(n: int, s: List[int], t: List[int]) -> int:\n    assert 2 <= n <= 10 ** 5\n    assert len(s) == n\n    assert len(t) == n\n    ans = n\n    for i in range(n):\n        ans_i = max(sum((1 if s[j] <= x < t[j] else 0) for j in range(n) if j != i) for x in range(max(t)))\n        ans = min(ans, ans_i)\n    return ans\n", "rpython": "def solve(n: int, s: List[int], t: List[int]) -> int:\n    assert 2 <= n and n <= 10 ** 5\n    assert len(s) == n\n    assert len(t) == n\n    ans: $4 = n\n    for i in range(n):\n        ans_i: $5 = max(sum(1 if s[j] <= x and x < t[j] else 0 for j in range(n) if j != i) for x in range(max(t)))\n        ans: $9 = min(ans, ans_i)\n    return ans\n", "core": "fun (n$69: int) (s$70: int list) (t$71: int list) ->\n    assert - n$69 + 2 <= 0 && n$69 - 100000 <= 0 in\n    assert - n$69 + len s$70 == 0 in\n    assert - n$69 + len t$71 == 0 in\n    minimum (cons n$69 (map (fun ($87: int) ->\n        maximum (map (fun ($91: int) ->\n            sum (map (fun ($94: int) ->\n                if - $91 + s$70[$94] <= 0 && $91 - t$71[$94] < 0 then 1 else 0\n            ) (filter (fun ($107: int) ->\n                $107 - $87 != 0\n            ) (range n$69)))\n        ) (range (maximum t$71)))\n    ) (range n$69)))\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t n_196, std::vector<int64_t> s_197,\n              std::vector<int64_t> t_198) {\n  assert(-n_196 + 2ll <= 0ll and n_196 - 100000ll <= 0ll);\n  assert(-n_196 + int64_t(s_197.size()) == 0ll);\n  assert(-n_196 + int64_t(t_198.size()) == 0ll);\n  std::vector<int64_t> x199(n_196);\n  for (int32_t i200 = 0; i200 < int32_t(n_196); ++i200) {\n    int64_t x203 = *std::max_element(t_198.begin(), t_198.end());\n    std::vector<int64_t> x202(x203);\n    for (int32_t i204 = 0; i204 < int32_t(x203); ++i204) {\n      std::vector<int64_t> x207;\n      for (int32_t x208 = 0; x208 < n_196; ++x208) {\n        if (x208 - i200 != 0ll) {\n          x207.push_back(x208);\n        }\n      }\n      std::vector<int64_t> x206(x207.size());\n      for (int32_t i210 = 0; i210 < int32_t(x207.size()); ++i210) {\n        x206[i210] =\n            -i204 + s_197[x207[i210]] <= 0ll and i204 - t_198[x207[i210]] < 0ll\n                ? 1ll\n                : 0ll;\n      }\n      int64_t x212 = std::accumulate(x206.begin(), x206.end(), 0ll);\n      x202[i204] = x212;\n    }\n    int64_t x213 = *std::max_element(x202.begin(), x202.end());\n    x199[i200] = x213;\n  }\n  std::vector<int64_t> x214;\n  x214.push_back(n_196);\n  x214.insert(x214.end(), x199.begin(), x199.end());\n  int64_t x215 = *std::min_element(x214.begin(), x214.end());\n  return x215;\n}\nint main() {\n  int64_t x216 = -1ll;\n  int64_t x217 = -1ll;\n  int64_t x219 = -1ll;\n  std::cin >> x216;\n  std::cin >> x217;\n  std::vector<int64_t> x218(x217, -1ll);\n  for (int32_t i221 = 0; i221 < x217; ++i221) {\n    std::cin >> x218[i221];\n  }\n  std::cin >> x219;\n  std::vector<int64_t> x220(x219, -1ll);\n  for (int32_t i222 = 0; i222 < x219; ++i222) {\n    std::cin >> x220[i222];\n  }\n  auto x223 = solve(x216, x218, x220);\n  std::cout << x223 << ' ';\n}\n"}, {"path": "examples/wip/tle/m_solutions2019_e.py", "python": "# https://atcoder.jp/contests/m-solutions2019/tasks/m_solutions2019_e\nfrom typing import *\n\nMOD: int = 1000003\n\ndef solve1(x: int, d: int, n: int) -> int:\n    assert 0 <= x < MOD\n    assert 0 <= d < MOD\n    assert 0 <= n < 10 ** 9\n\n    return product(x + i * d for i in range(n)) % MOD\n\ndef solve(Q: int, x: List[int], d: List[int], n: List[int]) -> List[int]:\n    assert 1 <= Q <= 100000\n    assert len(x) == Q\n    assert all(0 <= x_i < MOD for x_i in x)\n    assert len(d) == Q\n    assert all(0 <= d_i < MOD for d_i in d)\n    assert len(n) == Q\n    assert all(0 <= n_i < MOD for n_i in n)\n\n    ans = [-1 for _ in range(Q)]\n    for i in range(Q):\n        ans[i] = solve1(x[i], d[i], n[i])\n    return ans\n", "rpython": "MOD: int = 1000003\ndef solve1(x: int, d: int, n: int) -> int:\n    assert 0 <= x and x < MOD\n    assert 0 <= d and d < MOD\n    assert 0 <= n and n < 10 ** 9\n    return product(x + i * d for i in range(n)) % MOD\ndef solve(Q: int, x: List[int], d: List[int], n: List[int]) -> List[int]:\n    assert 1 <= Q and Q <= 100000\n    assert len(x) == Q\n    assert all(0 <= x_i and x_i < MOD for x_i in x)\n    assert len(d) == Q\n    assert all(0 <= d_i and d_i < MOD for d_i in d)\n    assert len(n) == Q\n    assert all(0 <= n_i and n_i < MOD for n_i in n)\n    ans: $17 = [- 1 for _ in range(Q)]\n    for i in range(Q):\n        ans[i]: $18 = solve1(x[i], d[i], n[i])\n    return ans\n", "core": "fun (Q$121: int) (x$122: int list) (d$123: int list) (n$124: int list) ->\n    assert - Q$121 + 1 <= 0 && Q$121 - 100000 <= 0 in\n    assert - Q$121 + len x$122 == 0 in\n    assert all (map (fun ($147: int) ->\n        - $147 <= 0 && $147 - 1000003 < 0\n    ) x$122) in\n    assert - Q$121 + len d$123 == 0 in\n    assert all (map (fun ($151: int) ->\n        - $151 <= 0 && $151 - 1000003 < 0\n    ) d$123) in\n    assert - Q$121 + len n$124 == 0 in\n    assert all (map (fun ($155: int) ->\n        - $155 <= 0 && $155 - 1000003 < 0\n    ) n$124) in\n    map (fun ($165: int) ->\n        assert - x$122[$165] <= 0 && x$122[$165] - 1000003 < 0 in\n        assert - d$123[$165] <= 0 && d$123[$165] - 1000003 < 0 in\n        assert - n$124[$165] <= 0 && n$124[$165] - 1000000000 < 0 in\n        modproduct (map (fun ($331: int) ->\n            modplus (modmult ($331 % 1000003) (d$123[$165] % 1000003) 1000003) (x$122[$165] % 1000003) 1000003\n        ) (range n$124[$165])) 1000003\n    ) (range Q$121)\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t Q_332, std::vector<int64_t> x_333,\n                           std::vector<int64_t> d_334,\n                           std::vector<int64_t> n_335) {\n  assert(-Q_332 + 1ll <= 0ll and Q_332 - 100000ll <= 0ll);\n  assert(-Q_332 + int64_t(x_333.size()) == 0ll);\n  for (int64_t x336 : x_333) {\n    assert(-x336 <= 0ll and x336 - 1000003ll < 0ll);\n  }\n  assert(-Q_332 + int64_t(d_334.size()) == 0ll);\n  for (int64_t x338 : d_334) {\n    assert(-x338 <= 0ll and x338 - 1000003ll < 0ll);\n  }\n  assert(-Q_332 + int64_t(n_335.size()) == 0ll);\n  for (int64_t x340 : n_335) {\n    assert(-x340 <= 0ll and x340 - 1000003ll < 0ll);\n  }\n  std::vector<int64_t> x342(Q_332);\n  for (int32_t i343 = 0; i343 < int32_t(Q_332); ++i343) {\n    assert(-x_333[i343] <= 0ll and x_333[i343] - 1000003ll < 0ll);\n    assert(-d_334[i343] <= 0ll and d_334[i343] - 1000003ll < 0ll);\n    assert(-n_335[i343] <= 0ll and n_335[i343] - 1000000000ll < 0ll);\n    std::vector<int64_t> x345(n_335[i343]);\n    for (int32_t i346 = 0; i346 < int32_t(n_335[i343]); ++i346) {\n      x345[i346] = jikka::mod::plus(\n          jikka::mod::mult(jikka::floormod(i346, 1000003ll),\n                           jikka::floormod(d_334[i343], 1000003ll), 1000003ll),\n          jikka::floormod(x_333[i343], 1000003ll), 1000003ll);\n    }\n    int64_t x348 = 1ll;\n    for (int64_t x349 : x345) {\n      x348 = jikka::mod::mult(x348, x349, 1000003ll);\n    }\n    x342[i343] = x348;\n  }\n  return x342;\n}\nint main() {\n  int64_t x350 = -1ll;\n  int64_t x351 = -1ll;\n  int64_t x353 = -1ll;\n  int64_t x355 = -1ll;\n  std::cin >> x350;\n  std::cin >> x351;\n  std::vector<int64_t> x352(x351, -1ll);\n  for (int32_t i357 = 0; i357 < x351; ++i357) {\n    std::cin >> x352[i357];\n  }\n  std::cin >> x353;\n  std::vector<int64_t> x354(x353, -1ll);\n  for (int32_t i358 = 0; i358 < x353; ++i358) {\n    std::cin >> x354[i358];\n  }\n  std::cin >> x355;\n  std::vector<int64_t> x356(x355, -1ll);\n  for (int32_t i359 = 0; i359 < x355; ++i359) {\n    std::cin >> x356[i359];\n  }\n  auto x360 = solve(x350, x352, x354, x356);\n  std::cout << int32_t(x360.size()) << ' ';\n  for (int32_t i361 = 0; i361 < int32_t(x360.size()); ++i361) {\n    std::cout << x360[i361] << ' ';\n  }\n}\n"}, {"path": "examples/wip/tle/point_add_range_sum.py", "python": "# https://judge.yosupo.jp/problem/point_add_range_sum\n\nfrom typing import *\n\ndef solve(n: int, q: int, a: List[int], t: List[int], args1: List[int], args2: List[int]) -> List[int]:\n    ans = []\n    for i in range(q):\n        if t[i] == 0:\n            p = args1[i]\n            x = args2[i]\n            a[p] += x\n        else:\n            l = args1[i]\n            r = args2[i]\n            ans.append(sum(a[l:r]))\n    return ans\n\ndef main() -> None:\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    t = list(range(q))\n    args1 = list(range(q))\n    args2 = list(range(q))\n    for i in range(q):\n        t[i], args1[i], args2[i] = map(int, input().split())\n    ans = solve(n, q, a, t, args1, args2)\n    for i in range(len(ans)):\n        print(ans[i])\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, q: int, a: List[int], t: List[int], args1: List[int], args2: List[int]) -> List[int]:\n    ans: $0 = []\n    for i in range(q):\n        if t[i] == 0:\n            p: $3 = args1[i]\n            x: $4 = args2[i]\n            a[p] += x\n        else:\n            l: $5 = args1[i]\n            r: $6 = args2[i]\n            ans.append(sum(a[l:r]))\n    return ans\ndef main() -> None:\n    n, q: $7 = map(int, input().split())\n    a: $8 = list(map(int, input().split()))\n    assert len(a) == n\n    t: $10 = list(range(q))\n    args1: $11 = list(range(q))\n    args2: $12 = list(range(q))\n    for i in range(q):\n        t[i], args1[i], args2[i]: $13 = map(int, input().split())\n    ans: $14 = solve(n, q, a, t, args1, args2)\n    for i in range(len(ans)):\n        print(ans[i])\n", "core": "const (fun (q$102: int) (a$103: int list) (t$104: int list) (args1$105: int list) (args2$106: int list) ->\n    (foldl (fun ($116: int list * int list) ($115: int) ->\n        let $124: int list * int list = if t$104[$115] == 0 then ($116.0[args1$105[$115] <- args2$106[$115] + $116.0[args1$105[$115]]], $116.1) else ($116.0, snoc $116.1 (let $243: int list = scanl (fun ($244: int) ($245: int) ->\n            $244 + $245\n        ) 0 $116.0\n        in - $243[args1$105[$115]] + $243[args2$106[$115]]))\n        in ($124.0, $124.1)\n    ) (a$103, nil) (range q$102)).1\n)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_246, int64_t q_247,\n                           std::vector<int64_t> a_248,\n                           std::vector<int64_t> t_249,\n                           std::vector<int64_t> args_250,\n                           std::vector<int64_t> args_251) {\n  std::vector<int64_t> x_265;\n  for (int32_t x253 = 0; x253 < q_247; ++x253) {\n    std::array<std::vector<int64_t>, 2> x263;\n    if (t_249[x253] == 0ll) {\n      std::vector<int64_t> a_268 = a_248;\n      a_268[args_250[x253]] = args_251[x253] + a_248[args_250[x253]];\n      x263 = std::array<std::vector<int64_t>, 2>{a_268, x_265};\n    } else {\n      std::vector<int64_t> x258(a_248.size() + 1);\n      x258[0] = 0ll;\n      for (int32_t i259 = 0; i259 < int32_t(a_248.size()); ++i259) {\n        x258[i259 + 1] = x258[i259] + a_248[i259];\n      }\n      std::vector<int64_t> x262 = x_265;\n      x262.push_back(-x258[args_250[x253]] + x258[args_251[x253]]);\n      x263 = std::array<std::vector<int64_t>, 2>{a_248, x262};\n    }\n    std::vector<int64_t> x266 = x263[0];\n    std::vector<int64_t> x267 = x263[1];\n    a_248 = x266;\n    x_265 = x267;\n  }\n  return x_265;\n}\nint main() {\n  int64_t n_269 = -1ll;\n  int64_t q_270 = -1ll;\n  std::cin >> n_269;\n  std::vector<int64_t> a_271(n_269, -1ll);\n  std::cin >> q_270;\n  std::vector<int64_t> t_272(q_270, -1ll);\n  std::vector<int64_t> args_273(q_270, -1ll);\n  std::vector<int64_t> args_274(q_270, -1ll);\n  for (int32_t i275 = 0; i275 < n_269; ++i275) {\n    std::cin >> a_271[i275];\n  }\n  for (int32_t i_276 = 0; i_276 < q_270; ++i_276) {\n    std::cin >> t_272[i_276];\n    std::cin >> args_273[i_276];\n    std::cin >> args_274[i_276];\n  }\n  auto ans_277 = solve(n_269, q_270, a_271, t_272, args_273, args_274);\n  for (int32_t i_278 = 0; i_278 < int32_t(ans_277.size()); ++i_278) {\n    std::cout << ans_277[i_278] << ' ';\n    std::cout << '\\n' << ' ';\n  }\n}\n"}, {"path": "examples/wip/tle/yukicoder_1618.py", "python": "# https://yukicoder.me/problems/no/1618\nfrom typing import *\n\n\ndef solve(n: int, a: List[int], b: List[int]) -> List[int]:\n    c = [0 for _ in range(2 * n)]\n    for i in range(n):\n        for j in range(n):\n            c[i + j + 1] += (i + 1) * a[j] + (j + 1) * b[i]\n    return c\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    b = list(map(int, input().split()))\n    assert len(b) == n\n    ans = solve(n, a, b)\n    print(*ans)\n\n\nif __name__ == '__main__':\n    main()\n", "rpython": "def solve(n: int, a: List[int], b: List[int]) -> List[int]:\n    c: $0 = [0 for _ in range(2 * n)]\n    for i in range(n):\n        for j in range(n):\n            c[i + j + 1] += i + 1 * a[j] + j + 1 * b[i]\n    return c\ndef main() -> $7:\n    n: $1 = int(input())\n    a: $2 = list(map(int, input().split()))\n    assert len(a) == n\n    b: $4 = list(map(int, input().split()))\n    assert len(b) == n\n    ans: $6 = solve(n, a, b)\n    print(*ans)\n", "core": "fun (n$64: int) (a$65: int list) (b$66: int list) ->\n    foldl (fun ($78: int list) ($77: int) ->\n        foldl (fun ($83: int list) ($82: int) ->\n            $83[$77 + $82 + 1 <- $77 * a$65[$82] + $82 * b$66[$77] + $83[$77 + $82 + 1] + a$65[$82] + b$66[$77]]\n        ) $78 (range n$64)\n    ) (replicate (n$64 * 2) 0) (range n$64)\n", "cxx": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nstd::vector<int64_t> solve(int64_t n_178, std::vector<int64_t> a_179,\n                           std::vector<int64_t> b_180) {\n  std::vector<int64_t> x181(n_178 * 2ll, 0ll);\n  for (int32_t x183 = 0; x183 < n_178; ++x183) {\n    for (int32_t x187 = 0; x187 < n_178; ++x187) {\n      x181[x183 + x187 + 1ll] = x183 * a_179[x187] + x187 * b_180[x183] +\n                                x181[x183 + x187 + 1ll] + a_179[x187] +\n                                b_180[x183];\n    }\n  }\n  return x181;\n}\nint main() {\n  int64_t n_190 = -1ll;\n  std::cin >> n_190;\n  std::vector<int64_t> a_191(n_190, -1ll);\n  std::vector<int64_t> b_192(n_190, -1ll);\n  for (int32_t i193 = 0; i193 < n_190; ++i193) {\n    std::cin >> a_191[i193];\n  }\n  for (int32_t i194 = 0; i194 < n_190; ++i194) {\n    std::cin >> b_192[i194];\n  }\n  auto ans_195 = solve(n_190, a_191, b_192);\n  for (int32_t i196 = 0; i196 < int32_t(ans_195.size()); ++i196) {\n    std::cout << ans_195[i196] << ' ';\n  }\n  std::cout << '\\n' << ' ';\n}\n"}, {"path": "examples/wip/tle/yukicoder_1649.py", "python": "# https://yukicoder.me/problems/no/1649\nfrom typing import *\n\nMOD = 998244353\n\n\ndef solve(N: int, x: List[int], y: List[int]) -> int:\n    ans = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            ans += (abs(x[i] - x[j]) + abs(y[i] - y[j])) ** 2\n    return ans % MOD\n\n\n# generated by oj-template v4.8.0 (https://github.com/online-judge-tools/template-generator)\ndef main():\n    N = int(input())\n    x = list(range(N))\n    y = list(range(N))\n    for i in range(N):\n        x[i], y[i] = map(int, input().split())\n    ans = solve(N, x, y)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "rpython": "MOD: $0 = 998244353\ndef solve(N: int, x: List[int], y: List[int]) -> int:\n    ans: $1 = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            ans += abs(x[i] - x[j]) + abs(y[i] - y[j]) ** 2\n    return ans % MOD\ndef main() -> $7:\n    N: $2 = int(input())\n    x: $3 = list(range(N))\n    y: $4 = list(range(N))\n    for i in range(N):\n        x[i], y[i]: $5 = map(int, input().split())\n    ans: $6 = solve(N, x, y)\n    print(ans)\n", "core": "fun (N$57: int) (x$58: int list) (y$59: int list) ->\n    foldl (fun ($156: int) ($157: int) ->\n        if range (- $157 + N$57 - 1) == nil then $156 else modplus (modplus (modplus ($156 % 998244353) (modsum (map (fun ($165: int) ->\n            modmult (abs (x$58[$157] - x$58[$157 + $165 + 1]) % 998244353) (abs (x$58[$157] - x$58[$157 + $165 + 1]) % 998244353) 998244353\n        ) (range (- $157 + N$57 - 1))) 998244353) 998244353) (modsum (map (fun ($166: int) ->\n            modmult (abs (y$59[$157] - y$59[$157 + $166 + 1]) % 998244353) (abs (y$59[$157] - y$59[$157 + $166 + 1]) % 998244353) 998244353\n        ) (range (- $157 + N$57 - 1))) 998244353) 998244353) (modmult (modsum (map (fun ($167: int) ->\n            modmult (abs (x$58[$157] - x$58[$157 + $167 + 1]) % 998244353) (abs (y$59[$157] - y$59[$157 + $167 + 1]) % 998244353) 998244353\n        ) (range (- $157 + N$57 - 1))) 998244353) 2 998244353) 998244353\n    ) 0 (range (N$57 - 1))\n", "cxx": "#include \"jikka/divmod.hpp\"\n#include \"jikka/modulo.hpp\"\n#include \"jikka/range.hpp\"\n#include <algorithm>\n#include <array>\n#include <cassert>\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <tuple>\n#include <vector>\nint64_t solve(int64_t N_168, std::vector<int64_t> x_169,\n              std::vector<int64_t> y_170) {\n  int64_t x171 = 0ll;\n  for (int32_t x172 = 0; x172 < N_168 - 1ll; ++x172) {\n    int64_t x190;\n    if (jikka::range(-x172 + N_168 - 1ll) == std::vector<int64_t>()) {\n      x190 = x171;\n    } else {\n      std::vector<int64_t> x175(-x172 + N_168 - 1ll);\n      for (int32_t i176 = 0; i176 < int32_t(-x172 + N_168 - 1ll); ++i176) {\n        x175[i176] = jikka::mod::mult(\n            jikka::floormod(std::abs(x_169[x172] - x_169[x172 + i176 + 1ll]),\n                            998244353ll),\n            jikka::floormod(std::abs(x_169[x172] - x_169[x172 + i176 + 1ll]),\n                            998244353ll),\n            998244353ll);\n      }\n      int64_t x178 = 0ll;\n      for (int64_t x179 : x175) {\n        x178 += jikka::floormod(x179, 998244353ll);\n      }\n      std::vector<int64_t> x180(-x172 + N_168 - 1ll);\n      for (int32_t i181 = 0; i181 < int32_t(-x172 + N_168 - 1ll); ++i181) {\n        x180[i181] = jikka::mod::mult(\n            jikka::floormod(std::abs(y_170[x172] - y_170[x172 + i181 + 1ll]),\n                            998244353ll),\n            jikka::floormod(std::abs(y_170[x172] - y_170[x172 + i181 + 1ll]),\n                            998244353ll),\n            998244353ll);\n      }\n      int64_t x183 = 0ll;\n      for (int64_t x184 : x180) {\n        x183 += jikka::floormod(x184, 998244353ll);\n      }\n      std::vector<int64_t> x185(-x172 + N_168 - 1ll);\n      for (int32_t i186 = 0; i186 < int32_t(-x172 + N_168 - 1ll); ++i186) {\n        x185[i186] = jikka::mod::mult(\n            jikka::floormod(std::abs(x_169[x172] - x_169[x172 + i186 + 1ll]),\n                            998244353ll),\n            jikka::floormod(std::abs(y_170[x172] - y_170[x172 + i186 + 1ll]),\n                            998244353ll),\n            998244353ll);\n      }\n      int64_t x188 = 0ll;\n      for (int64_t x189 : x185) {\n        x188 += jikka::floormod(x189, 998244353ll);\n      }\n      x190 = jikka::mod::plus(\n          jikka::mod::plus(jikka::mod::plus(jikka::floormod(x171, 998244353ll),\n                                            jikka::floormod(x178, 998244353ll),\n                                            998244353ll),\n                           jikka::floormod(x183, 998244353ll), 998244353ll),\n          jikka::mod::mult(jikka::floormod(x188, 998244353ll), 2ll,\n                           998244353ll),\n          998244353ll);\n    }\n    x171 = x190;\n  }\n  return x171;\n}\nint main() {\n  int64_t N_191 = -1ll;\n  std::cin >> N_191;\n  std::vector<int64_t> x_192(N_191, -1ll);\n  std::vector<int64_t> y_193(N_191, -1ll);\n  for (int32_t i_194 = 0; i_194 < N_191; ++i_194) {\n    std::cin >> x_192[i_194];\n    std::cin >> y_193[i_194];\n  }\n  auto ans_195 = solve(N_191, x_192, y_193);\n  std::cout << ans_195 << ' ';\n  std::cout << '\\n' << ' ';\n}\n"}], "errors": [{"path": "examples/errors/toplevel_expr_statements.py", "python": "if __name__ == '__main__':  # err\n    a = int(input())\n    print(a ** 2)\n", "error": "Semantic Error (line 1 column 1) (user's mistake?): Failed at Jikka.Python.Convert.ToplevelDecl: only `if __name__ == \"__main__\": main()' is allowed for if statements at toplevel\n1 |if __name__ == '__main__':  # err\n   ^^\n2 |    a = int(input())\n"}, {"path": "examples/errors/type_errors.py", "python": "def solve(n: int) -> bool:\n    a = n + True  # err\n    b = 2 * n\n    return b  # err\n", "error": "Type Error (line 2 column 13) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type int and type bool: type int is not type bool\n1 |def solve(n: int) -> bool:\n2 |    a = n + True  # err\n               ^^^^\n3 |    b = 2 * n\n\nType Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type bool and type int: type bool is not type int\n3 |    b = 2 * n\n4 |    return b  # err\n              ^\n"}, {"path": "examples/errors/undefined_identifiers.py", "python": "def solve(x: int) -> int:\n    x = y  # err\n    z = x + 1\n    return y  # err\n", "error": "Symbol Error (line 2 column 9) (user's mistake?): Jikka.RestrictedPython.Convert.Alpha: undefined identifier: y\n1 |def solve(x: int) -> int:\n2 |    x = y  # err\n           ^\n3 |    z = x + 1\n\nSymbol Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.Alpha: undefined identifier: y\n3 |    z = x + 1\n4 |    return y  # err\n              ^\n"}]}